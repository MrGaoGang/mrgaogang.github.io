{"version":3,"sources":["../node_modules/codemirror/mode/javascript/javascript.js"],"names":["CodeMirror","defineMode","config","parserConfig","type","content","indentUnit","statementIndent","jsonldMode","jsonld","jsonMode","json","trackScope","isTS","typescript","wordRE","wordCharacters","keywords","kw","style","A","B","C","D","operator","atom","if","while","with","else","do","try","finally","return","break","continue","new","delete","void","throw","debugger","var","const","let","function","catch","for","switch","case","default","in","typeof","instanceof","true","false","null","undefined","NaN","Infinity","this","class","super","yield","export","import","extends","await","isOperatorChar","isJsonldKeyword","ret","tp","cont","tokenBase","stream","state","quote","ch","next","tokenize","escaped","peek","match","test","eat","tokenComment","skipToEnd","expressionAllowed","inSet","readRegexp","current","tokenQuasi","eatWhile","string","slice","start","lexical","word","lastType","propertyIsEnumerable","maybeEnd","brackets","findFatArrow","fatArrowAt","arrow","indexOf","m","exec","index","depth","sawSomething","pos","charAt","bracket","atomicTypes","number","variable","regexp","jsonld-keyword","JSLexical","indented","column","align","prev","info","inScope","varname","v","localVars","name","cx","context","vars","marked","cc","pass","i","arguments","length","push","apply","inList","list","register","block","newContext","registerVarScoped","inner","Context","Var","globalVars","isModifier","defaultVars","pushcontext","pushblockcontext","popcontext","pushlex","result","indent","outer","lex","poplex","expect","wanted","exp","statement","value","vardef","parenExpr","maybeexpression","pop","maybeelse","functiondef","forspec","className","enumdef","typename","typeexpr","pattern","expression","maybelabel","maybeCatchBinding","afterExport","afterImport","funarg","expressionInner","expressionNoComma","noComma","body","arrowBodyNoComma","arrowBody","commasep","maybeop","maybeoperatorNoComma","maybeoperatorComma","hasOwnProperty","classExpression","arrayLiteral","contCommasep","objprop","quasi","targetNoComma","target","maybeTypeArgs","maybeTarget","me","expr","property","backUp","continueQuasi","_","getterSetter","afterprop","maybetype","what","end","sep","proceed","maybetypeOrIn","mayberettype","isKW","afterType","typeprops","typearg","maybeReturnType","typeprop","functiondecl","typeparam","maybeTypeDefault","maybeAssign","vardefCont","eltpattern","proppattern","_type","forspec1","forspec2","classNameAfter","classBody","classfield","isInterface","maybeFrom","exportField","importSpec","maybeMoreImports","maybeAs","enummember","startState","basecolumn","token","sol","indentation","eatSpace","combinator","parseJS","textAfter","Pass","top","firstChar","c","closing","isContinuedStatement","doubleIndentSwitch","electricInput","blockCommentStart","blockCommentEnd","blockCommentContinue","lineComment","fold","closeBrackets","helperType","skipExpression","registerHelper","defineMIME","mod","__webpack_require__"],"mappings":"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","file":"static/js/0.722859f2.chunk.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"javascript\", function (config, parserConfig) {\n    var indentUnit = config.indentUnit;\n    var statementIndent = parserConfig.statementIndent;\n    var jsonldMode = parserConfig.jsonld;\n    var jsonMode = parserConfig.json || jsonldMode;\n    var trackScope = parserConfig.trackScope !== false;\n    var isTS = parserConfig.typescript;\n    var wordRE = parserConfig.wordCharacters || /[\\w$\\xa1-\\uffff]/; // Tokenizer\n\n    var keywords = function () {\n      function kw(type) {\n        return {\n          type: type,\n          style: \"keyword\"\n        };\n      }\n\n      var A = kw(\"keyword a\"),\n          B = kw(\"keyword b\"),\n          C = kw(\"keyword c\"),\n          D = kw(\"keyword d\");\n      var operator = kw(\"operator\"),\n          atom = {\n        type: \"atom\",\n        style: \"atom\"\n      };\n      return {\n        \"if\": kw(\"if\"),\n        \"while\": A,\n        \"with\": A,\n        \"else\": B,\n        \"do\": B,\n        \"try\": B,\n        \"finally\": B,\n        \"return\": D,\n        \"break\": D,\n        \"continue\": D,\n        \"new\": kw(\"new\"),\n        \"delete\": C,\n        \"void\": C,\n        \"throw\": C,\n        \"debugger\": kw(\"debugger\"),\n        \"var\": kw(\"var\"),\n        \"const\": kw(\"var\"),\n        \"let\": kw(\"var\"),\n        \"function\": kw(\"function\"),\n        \"catch\": kw(\"catch\"),\n        \"for\": kw(\"for\"),\n        \"switch\": kw(\"switch\"),\n        \"case\": kw(\"case\"),\n        \"default\": kw(\"default\"),\n        \"in\": operator,\n        \"typeof\": operator,\n        \"instanceof\": operator,\n        \"true\": atom,\n        \"false\": atom,\n        \"null\": atom,\n        \"undefined\": atom,\n        \"NaN\": atom,\n        \"Infinity\": atom,\n        \"this\": kw(\"this\"),\n        \"class\": kw(\"class\"),\n        \"super\": kw(\"atom\"),\n        \"yield\": C,\n        \"export\": kw(\"export\"),\n        \"import\": kw(\"import\"),\n        \"extends\": C,\n        \"await\": C\n      };\n    }();\n\n    var isOperatorChar = /[+\\-*&%=<>!?|~^@]/;\n    var isJsonldKeyword = /^@(context|id|value|language|type|container|list|set|reverse|index|base|vocab|graph)\"/;\n\n    function readRegexp(stream) {\n      var escaped = false,\n          next,\n          inSet = false;\n\n      while ((next = stream.next()) != null) {\n        if (!escaped) {\n          if (next == \"/\" && !inSet) return;\n          if (next == \"[\") inSet = true;else if (inSet && next == \"]\") inSet = false;\n        }\n\n        escaped = !escaped && next == \"\\\\\";\n      }\n    } // Used as scratch variables to communicate multiple values without\n    // consing up tons of objects.\n\n\n    var type, content;\n\n    function ret(tp, style, cont) {\n      type = tp;\n      content = cont;\n      return style;\n    }\n\n    function tokenBase(stream, state) {\n      var ch = stream.next();\n\n      if (ch == '\"' || ch == \"'\") {\n        state.tokenize = tokenString(ch);\n        return state.tokenize(stream, state);\n      } else if (ch == \".\" && stream.match(/^\\d[\\d_]*(?:[eE][+\\-]?[\\d_]+)?/)) {\n        return ret(\"number\", \"number\");\n      } else if (ch == \".\" && stream.match(\"..\")) {\n        return ret(\"spread\", \"meta\");\n      } else if (/[\\[\\]{}\\(\\),;\\:\\.]/.test(ch)) {\n        return ret(ch);\n      } else if (ch == \"=\" && stream.eat(\">\")) {\n        return ret(\"=>\", \"operator\");\n      } else if (ch == \"0\" && stream.match(/^(?:x[\\dA-Fa-f_]+|o[0-7_]+|b[01_]+)n?/)) {\n        return ret(\"number\", \"number\");\n      } else if (/\\d/.test(ch)) {\n        stream.match(/^[\\d_]*(?:n|(?:\\.[\\d_]*)?(?:[eE][+\\-]?[\\d_]+)?)?/);\n        return ret(\"number\", \"number\");\n      } else if (ch == \"/\") {\n        if (stream.eat(\"*\")) {\n          state.tokenize = tokenComment;\n          return tokenComment(stream, state);\n        } else if (stream.eat(\"/\")) {\n          stream.skipToEnd();\n          return ret(\"comment\", \"comment\");\n        } else if (expressionAllowed(stream, state, 1)) {\n          readRegexp(stream);\n          stream.match(/^\\b(([gimyus])(?![gimyus]*\\2))+\\b/);\n          return ret(\"regexp\", \"string-2\");\n        } else {\n          stream.eat(\"=\");\n          return ret(\"operator\", \"operator\", stream.current());\n        }\n      } else if (ch == \"`\") {\n        state.tokenize = tokenQuasi;\n        return tokenQuasi(stream, state);\n      } else if (ch == \"#\" && stream.peek() == \"!\") {\n        stream.skipToEnd();\n        return ret(\"meta\", \"meta\");\n      } else if (ch == \"#\" && stream.eatWhile(wordRE)) {\n        return ret(\"variable\", \"property\");\n      } else if (ch == \"<\" && stream.match(\"!--\") || ch == \"-\" && stream.match(\"->\") && !/\\S/.test(stream.string.slice(0, stream.start))) {\n        stream.skipToEnd();\n        return ret(\"comment\", \"comment\");\n      } else if (isOperatorChar.test(ch)) {\n        if (ch != \">\" || !state.lexical || state.lexical.type != \">\") {\n          if (stream.eat(\"=\")) {\n            if (ch == \"!\" || ch == \"=\") stream.eat(\"=\");\n          } else if (/[<>*+\\-|&?]/.test(ch)) {\n            stream.eat(ch);\n            if (ch == \">\") stream.eat(ch);\n          }\n        }\n\n        if (ch == \"?\" && stream.eat(\".\")) return ret(\".\");\n        return ret(\"operator\", \"operator\", stream.current());\n      } else if (wordRE.test(ch)) {\n        stream.eatWhile(wordRE);\n        var word = stream.current();\n\n        if (state.lastType != \".\") {\n          if (keywords.propertyIsEnumerable(word)) {\n            var kw = keywords[word];\n            return ret(kw.type, kw.style, word);\n          }\n\n          if (word == \"async\" && stream.match(/^(\\s|\\/\\*([^*]|\\*(?!\\/))*?\\*\\/)*[\\[\\(\\w]/, false)) return ret(\"async\", \"keyword\", word);\n        }\n\n        return ret(\"variable\", \"variable\", word);\n      }\n    }\n\n    function tokenString(quote) {\n      return function (stream, state) {\n        var escaped = false,\n            next;\n\n        if (jsonldMode && stream.peek() == \"@\" && stream.match(isJsonldKeyword)) {\n          state.tokenize = tokenBase;\n          return ret(\"jsonld-keyword\", \"meta\");\n        }\n\n        while ((next = stream.next()) != null) {\n          if (next == quote && !escaped) break;\n          escaped = !escaped && next == \"\\\\\";\n        }\n\n        if (!escaped) state.tokenize = tokenBase;\n        return ret(\"string\", \"string\");\n      };\n    }\n\n    function tokenComment(stream, state) {\n      var maybeEnd = false,\n          ch;\n\n      while (ch = stream.next()) {\n        if (ch == \"/\" && maybeEnd) {\n          state.tokenize = tokenBase;\n          break;\n        }\n\n        maybeEnd = ch == \"*\";\n      }\n\n      return ret(\"comment\", \"comment\");\n    }\n\n    function tokenQuasi(stream, state) {\n      var escaped = false,\n          next;\n\n      while ((next = stream.next()) != null) {\n        if (!escaped && (next == \"`\" || next == \"$\" && stream.eat(\"{\"))) {\n          state.tokenize = tokenBase;\n          break;\n        }\n\n        escaped = !escaped && next == \"\\\\\";\n      }\n\n      return ret(\"quasi\", \"string-2\", stream.current());\n    }\n\n    var brackets = \"([{}])\"; // This is a crude lookahead trick to try and notice that we're\n    // parsing the argument patterns for a fat-arrow function before we\n    // actually hit the arrow token. It only works if the arrow is on\n    // the same line as the arguments and there's no strange noise\n    // (comments) in between. Fallback is to only notice when we hit the\n    // arrow, and not declare the arguments as locals for the arrow\n    // body.\n\n    function findFatArrow(stream, state) {\n      if (state.fatArrowAt) state.fatArrowAt = null;\n      var arrow = stream.string.indexOf(\"=>\", stream.start);\n      if (arrow < 0) return;\n\n      if (isTS) {\n        // Try to skip TypeScript return type declarations after the arguments\n        var m = /:\\s*(?:\\w+(?:<[^>]*>|\\[\\])?|\\{[^}]*\\})\\s*$/.exec(stream.string.slice(stream.start, arrow));\n        if (m) arrow = m.index;\n      }\n\n      var depth = 0,\n          sawSomething = false;\n\n      for (var pos = arrow - 1; pos >= 0; --pos) {\n        var ch = stream.string.charAt(pos);\n        var bracket = brackets.indexOf(ch);\n\n        if (bracket >= 0 && bracket < 3) {\n          if (!depth) {\n            ++pos;\n            break;\n          }\n\n          if (--depth == 0) {\n            if (ch == \"(\") sawSomething = true;\n            break;\n          }\n        } else if (bracket >= 3 && bracket < 6) {\n          ++depth;\n        } else if (wordRE.test(ch)) {\n          sawSomething = true;\n        } else if (/[\"'\\/`]/.test(ch)) {\n          for (;; --pos) {\n            if (pos == 0) return;\n            var next = stream.string.charAt(pos - 1);\n\n            if (next == ch && stream.string.charAt(pos - 2) != \"\\\\\") {\n              pos--;\n              break;\n            }\n          }\n        } else if (sawSomething && !depth) {\n          ++pos;\n          break;\n        }\n      }\n\n      if (sawSomething && !depth) state.fatArrowAt = pos;\n    } // Parser\n\n\n    var atomicTypes = {\n      \"atom\": true,\n      \"number\": true,\n      \"variable\": true,\n      \"string\": true,\n      \"regexp\": true,\n      \"this\": true,\n      \"import\": true,\n      \"jsonld-keyword\": true\n    };\n\n    function JSLexical(indented, column, type, align, prev, info) {\n      this.indented = indented;\n      this.column = column;\n      this.type = type;\n      this.prev = prev;\n      this.info = info;\n      if (align != null) this.align = align;\n    }\n\n    function inScope(state, varname) {\n      if (!trackScope) return false;\n\n      for (var v = state.localVars; v; v = v.next) {\n        if (v.name == varname) return true;\n      }\n\n      for (var cx = state.context; cx; cx = cx.prev) {\n        for (var v = cx.vars; v; v = v.next) {\n          if (v.name == varname) return true;\n        }\n      }\n    }\n\n    function parseJS(state, style, type, content, stream) {\n      var cc = state.cc; // Communicate our context to the combinators.\n      // (Less wasteful than consing up a hundred closures on every call.)\n\n      cx.state = state;\n      cx.stream = stream;\n      cx.marked = null, cx.cc = cc;\n      cx.style = style;\n      if (!state.lexical.hasOwnProperty(\"align\")) state.lexical.align = true;\n\n      while (true) {\n        var combinator = cc.length ? cc.pop() : jsonMode ? expression : statement;\n\n        if (combinator(type, content)) {\n          while (cc.length && cc[cc.length - 1].lex) {\n            cc.pop()();\n          }\n\n          if (cx.marked) return cx.marked;\n          if (type == \"variable\" && inScope(state, content)) return \"variable-2\";\n          return style;\n        }\n      }\n    } // Combinator utils\n\n\n    var cx = {\n      state: null,\n      column: null,\n      marked: null,\n      cc: null\n    };\n\n    function pass() {\n      for (var i = arguments.length - 1; i >= 0; i--) {\n        cx.cc.push(arguments[i]);\n      }\n    }\n\n    function cont() {\n      pass.apply(null, arguments);\n      return true;\n    }\n\n    function inList(name, list) {\n      for (var v = list; v; v = v.next) {\n        if (v.name == name) return true;\n      }\n\n      return false;\n    }\n\n    function register(varname) {\n      var state = cx.state;\n      cx.marked = \"def\";\n      if (!trackScope) return;\n\n      if (state.context) {\n        if (state.lexical.info == \"var\" && state.context && state.context.block) {\n          // FIXME function decls are also not block scoped\n          var newContext = registerVarScoped(varname, state.context);\n\n          if (newContext != null) {\n            state.context = newContext;\n            return;\n          }\n        } else if (!inList(varname, state.localVars)) {\n          state.localVars = new Var(varname, state.localVars);\n          return;\n        }\n      } // Fall through means this is global\n\n\n      if (parserConfig.globalVars && !inList(varname, state.globalVars)) state.globalVars = new Var(varname, state.globalVars);\n    }\n\n    function registerVarScoped(varname, context) {\n      if (!context) {\n        return null;\n      } else if (context.block) {\n        var inner = registerVarScoped(varname, context.prev);\n        if (!inner) return null;\n        if (inner == context.prev) return context;\n        return new Context(inner, context.vars, true);\n      } else if (inList(varname, context.vars)) {\n        return context;\n      } else {\n        return new Context(context.prev, new Var(varname, context.vars), false);\n      }\n    }\n\n    function isModifier(name) {\n      return name == \"public\" || name == \"private\" || name == \"protected\" || name == \"abstract\" || name == \"readonly\";\n    } // Combinators\n\n\n    function Context(prev, vars, block) {\n      this.prev = prev;\n      this.vars = vars;\n      this.block = block;\n    }\n\n    function Var(name, next) {\n      this.name = name;\n      this.next = next;\n    }\n\n    var defaultVars = new Var(\"this\", new Var(\"arguments\", null));\n\n    function pushcontext() {\n      cx.state.context = new Context(cx.state.context, cx.state.localVars, false);\n      cx.state.localVars = defaultVars;\n    }\n\n    function pushblockcontext() {\n      cx.state.context = new Context(cx.state.context, cx.state.localVars, true);\n      cx.state.localVars = null;\n    }\n\n    function popcontext() {\n      cx.state.localVars = cx.state.context.vars;\n      cx.state.context = cx.state.context.prev;\n    }\n\n    popcontext.lex = true;\n\n    function pushlex(type, info) {\n      var result = function result() {\n        var state = cx.state,\n            indent = state.indented;\n        if (state.lexical.type == \"stat\") indent = state.lexical.indented;else for (var outer = state.lexical; outer && outer.type == \")\" && outer.align; outer = outer.prev) {\n          indent = outer.indented;\n        }\n        state.lexical = new JSLexical(indent, cx.stream.column(), type, null, state.lexical, info);\n      };\n\n      result.lex = true;\n      return result;\n    }\n\n    function poplex() {\n      var state = cx.state;\n\n      if (state.lexical.prev) {\n        if (state.lexical.type == \")\") state.indented = state.lexical.indented;\n        state.lexical = state.lexical.prev;\n      }\n    }\n\n    poplex.lex = true;\n\n    function expect(wanted) {\n      function exp(type) {\n        if (type == wanted) return cont();else if (wanted == \";\" || type == \"}\" || type == \")\" || type == \"]\") return pass();else return cont(exp);\n      }\n\n      ;\n      return exp;\n    }\n\n    function statement(type, value) {\n      if (type == \"var\") return cont(pushlex(\"vardef\", value), vardef, expect(\";\"), poplex);\n      if (type == \"keyword a\") return cont(pushlex(\"form\"), parenExpr, statement, poplex);\n      if (type == \"keyword b\") return cont(pushlex(\"form\"), statement, poplex);\n      if (type == \"keyword d\") return cx.stream.match(/^\\s*$/, false) ? cont() : cont(pushlex(\"stat\"), maybeexpression, expect(\";\"), poplex);\n      if (type == \"debugger\") return cont(expect(\";\"));\n      if (type == \"{\") return cont(pushlex(\"}\"), pushblockcontext, block, poplex, popcontext);\n      if (type == \";\") return cont();\n\n      if (type == \"if\") {\n        if (cx.state.lexical.info == \"else\" && cx.state.cc[cx.state.cc.length - 1] == poplex) cx.state.cc.pop()();\n        return cont(pushlex(\"form\"), parenExpr, statement, poplex, maybeelse);\n      }\n\n      if (type == \"function\") return cont(functiondef);\n      if (type == \"for\") return cont(pushlex(\"form\"), pushblockcontext, forspec, statement, popcontext, poplex);\n\n      if (type == \"class\" || isTS && value == \"interface\") {\n        cx.marked = \"keyword\";\n        return cont(pushlex(\"form\", type == \"class\" ? type : value), className, poplex);\n      }\n\n      if (type == \"variable\") {\n        if (isTS && value == \"declare\") {\n          cx.marked = \"keyword\";\n          return cont(statement);\n        } else if (isTS && (value == \"module\" || value == \"enum\" || value == \"type\") && cx.stream.match(/^\\s*\\w/, false)) {\n          cx.marked = \"keyword\";\n          if (value == \"enum\") return cont(enumdef);else if (value == \"type\") return cont(typename, expect(\"operator\"), typeexpr, expect(\";\"));else return cont(pushlex(\"form\"), pattern, expect(\"{\"), pushlex(\"}\"), block, poplex, poplex);\n        } else if (isTS && value == \"namespace\") {\n          cx.marked = \"keyword\";\n          return cont(pushlex(\"form\"), expression, statement, poplex);\n        } else if (isTS && value == \"abstract\") {\n          cx.marked = \"keyword\";\n          return cont(statement);\n        } else {\n          return cont(pushlex(\"stat\"), maybelabel);\n        }\n      }\n\n      if (type == \"switch\") return cont(pushlex(\"form\"), parenExpr, expect(\"{\"), pushlex(\"}\", \"switch\"), pushblockcontext, block, poplex, poplex, popcontext);\n      if (type == \"case\") return cont(expression, expect(\":\"));\n      if (type == \"default\") return cont(expect(\":\"));\n      if (type == \"catch\") return cont(pushlex(\"form\"), pushcontext, maybeCatchBinding, statement, poplex, popcontext);\n      if (type == \"export\") return cont(pushlex(\"stat\"), afterExport, poplex);\n      if (type == \"import\") return cont(pushlex(\"stat\"), afterImport, poplex);\n      if (type == \"async\") return cont(statement);\n      if (value == \"@\") return cont(expression, statement);\n      return pass(pushlex(\"stat\"), expression, expect(\";\"), poplex);\n    }\n\n    function maybeCatchBinding(type) {\n      if (type == \"(\") return cont(funarg, expect(\")\"));\n    }\n\n    function expression(type, value) {\n      return expressionInner(type, value, false);\n    }\n\n    function expressionNoComma(type, value) {\n      return expressionInner(type, value, true);\n    }\n\n    function parenExpr(type) {\n      if (type != \"(\") return pass();\n      return cont(pushlex(\")\"), maybeexpression, expect(\")\"), poplex);\n    }\n\n    function expressionInner(type, value, noComma) {\n      if (cx.state.fatArrowAt == cx.stream.start) {\n        var body = noComma ? arrowBodyNoComma : arrowBody;\n        if (type == \"(\") return cont(pushcontext, pushlex(\")\"), commasep(funarg, \")\"), poplex, expect(\"=>\"), body, popcontext);else if (type == \"variable\") return pass(pushcontext, pattern, expect(\"=>\"), body, popcontext);\n      }\n\n      var maybeop = noComma ? maybeoperatorNoComma : maybeoperatorComma;\n      if (atomicTypes.hasOwnProperty(type)) return cont(maybeop);\n      if (type == \"function\") return cont(functiondef, maybeop);\n\n      if (type == \"class\" || isTS && value == \"interface\") {\n        cx.marked = \"keyword\";\n        return cont(pushlex(\"form\"), classExpression, poplex);\n      }\n\n      if (type == \"keyword c\" || type == \"async\") return cont(noComma ? expressionNoComma : expression);\n      if (type == \"(\") return cont(pushlex(\")\"), maybeexpression, expect(\")\"), poplex, maybeop);\n      if (type == \"operator\" || type == \"spread\") return cont(noComma ? expressionNoComma : expression);\n      if (type == \"[\") return cont(pushlex(\"]\"), arrayLiteral, poplex, maybeop);\n      if (type == \"{\") return contCommasep(objprop, \"}\", null, maybeop);\n      if (type == \"quasi\") return pass(quasi, maybeop);\n      if (type == \"new\") return cont(maybeTarget(noComma));\n      return cont();\n    }\n\n    function maybeexpression(type) {\n      if (type.match(/[;\\}\\)\\],]/)) return pass();\n      return pass(expression);\n    }\n\n    function maybeoperatorComma(type, value) {\n      if (type == \",\") return cont(maybeexpression);\n      return maybeoperatorNoComma(type, value, false);\n    }\n\n    function maybeoperatorNoComma(type, value, noComma) {\n      var me = noComma == false ? maybeoperatorComma : maybeoperatorNoComma;\n      var expr = noComma == false ? expression : expressionNoComma;\n      if (type == \"=>\") return cont(pushcontext, noComma ? arrowBodyNoComma : arrowBody, popcontext);\n\n      if (type == \"operator\") {\n        if (/\\+\\+|--/.test(value) || isTS && value == \"!\") return cont(me);\n        if (isTS && value == \"<\" && cx.stream.match(/^([^<>]|<[^<>]*>)*>\\s*\\(/, false)) return cont(pushlex(\">\"), commasep(typeexpr, \">\"), poplex, me);\n        if (value == \"?\") return cont(expression, expect(\":\"), expr);\n        return cont(expr);\n      }\n\n      if (type == \"quasi\") {\n        return pass(quasi, me);\n      }\n\n      if (type == \";\") return;\n      if (type == \"(\") return contCommasep(expressionNoComma, \")\", \"call\", me);\n      if (type == \".\") return cont(property, me);\n      if (type == \"[\") return cont(pushlex(\"]\"), maybeexpression, expect(\"]\"), poplex, me);\n\n      if (isTS && value == \"as\") {\n        cx.marked = \"keyword\";\n        return cont(typeexpr, me);\n      }\n\n      if (type == \"regexp\") {\n        cx.state.lastType = cx.marked = \"operator\";\n        cx.stream.backUp(cx.stream.pos - cx.stream.start - 1);\n        return cont(expr);\n      }\n    }\n\n    function quasi(type, value) {\n      if (type != \"quasi\") return pass();\n      if (value.slice(value.length - 2) != \"${\") return cont(quasi);\n      return cont(expression, continueQuasi);\n    }\n\n    function continueQuasi(type) {\n      if (type == \"}\") {\n        cx.marked = \"string-2\";\n        cx.state.tokenize = tokenQuasi;\n        return cont(quasi);\n      }\n    }\n\n    function arrowBody(type) {\n      findFatArrow(cx.stream, cx.state);\n      return pass(type == \"{\" ? statement : expression);\n    }\n\n    function arrowBodyNoComma(type) {\n      findFatArrow(cx.stream, cx.state);\n      return pass(type == \"{\" ? statement : expressionNoComma);\n    }\n\n    function maybeTarget(noComma) {\n      return function (type) {\n        if (type == \".\") return cont(noComma ? targetNoComma : target);else if (type == \"variable\" && isTS) return cont(maybeTypeArgs, noComma ? maybeoperatorNoComma : maybeoperatorComma);else return pass(noComma ? expressionNoComma : expression);\n      };\n    }\n\n    function target(_, value) {\n      if (value == \"target\") {\n        cx.marked = \"keyword\";\n        return cont(maybeoperatorComma);\n      }\n    }\n\n    function targetNoComma(_, value) {\n      if (value == \"target\") {\n        cx.marked = \"keyword\";\n        return cont(maybeoperatorNoComma);\n      }\n    }\n\n    function maybelabel(type) {\n      if (type == \":\") return cont(poplex, statement);\n      return pass(maybeoperatorComma, expect(\";\"), poplex);\n    }\n\n    function property(type) {\n      if (type == \"variable\") {\n        cx.marked = \"property\";\n        return cont();\n      }\n    }\n\n    function objprop(type, value) {\n      if (type == \"async\") {\n        cx.marked = \"property\";\n        return cont(objprop);\n      } else if (type == \"variable\" || cx.style == \"keyword\") {\n        cx.marked = \"property\";\n        if (value == \"get\" || value == \"set\") return cont(getterSetter);\n        var m; // Work around fat-arrow-detection complication for detecting typescript typed arrow params\n\n        if (isTS && cx.state.fatArrowAt == cx.stream.start && (m = cx.stream.match(/^\\s*:\\s*/, false))) cx.state.fatArrowAt = cx.stream.pos + m[0].length;\n        return cont(afterprop);\n      } else if (type == \"number\" || type == \"string\") {\n        cx.marked = jsonldMode ? \"property\" : cx.style + \" property\";\n        return cont(afterprop);\n      } else if (type == \"jsonld-keyword\") {\n        return cont(afterprop);\n      } else if (isTS && isModifier(value)) {\n        cx.marked = \"keyword\";\n        return cont(objprop);\n      } else if (type == \"[\") {\n        return cont(expression, maybetype, expect(\"]\"), afterprop);\n      } else if (type == \"spread\") {\n        return cont(expressionNoComma, afterprop);\n      } else if (value == \"*\") {\n        cx.marked = \"keyword\";\n        return cont(objprop);\n      } else if (type == \":\") {\n        return pass(afterprop);\n      }\n    }\n\n    function getterSetter(type) {\n      if (type != \"variable\") return pass(afterprop);\n      cx.marked = \"property\";\n      return cont(functiondef);\n    }\n\n    function afterprop(type) {\n      if (type == \":\") return cont(expressionNoComma);\n      if (type == \"(\") return pass(functiondef);\n    }\n\n    function commasep(what, end, sep) {\n      function proceed(type, value) {\n        if (sep ? sep.indexOf(type) > -1 : type == \",\") {\n          var lex = cx.state.lexical;\n          if (lex.info == \"call\") lex.pos = (lex.pos || 0) + 1;\n          return cont(function (type, value) {\n            if (type == end || value == end) return pass();\n            return pass(what);\n          }, proceed);\n        }\n\n        if (type == end || value == end) return cont();\n        if (sep && sep.indexOf(\";\") > -1) return pass(what);\n        return cont(expect(end));\n      }\n\n      return function (type, value) {\n        if (type == end || value == end) return cont();\n        return pass(what, proceed);\n      };\n    }\n\n    function contCommasep(what, end, info) {\n      for (var i = 3; i < arguments.length; i++) {\n        cx.cc.push(arguments[i]);\n      }\n\n      return cont(pushlex(end, info), commasep(what, end), poplex);\n    }\n\n    function block(type) {\n      if (type == \"}\") return cont();\n      return pass(statement, block);\n    }\n\n    function maybetype(type, value) {\n      if (isTS) {\n        if (type == \":\") return cont(typeexpr);\n        if (value == \"?\") return cont(maybetype);\n      }\n    }\n\n    function maybetypeOrIn(type, value) {\n      if (isTS && (type == \":\" || value == \"in\")) return cont(typeexpr);\n    }\n\n    function mayberettype(type) {\n      if (isTS && type == \":\") {\n        if (cx.stream.match(/^\\s*\\w+\\s+is\\b/, false)) return cont(expression, isKW, typeexpr);else return cont(typeexpr);\n      }\n    }\n\n    function isKW(_, value) {\n      if (value == \"is\") {\n        cx.marked = \"keyword\";\n        return cont();\n      }\n    }\n\n    function typeexpr(type, value) {\n      if (value == \"keyof\" || value == \"typeof\" || value == \"infer\" || value == \"readonly\") {\n        cx.marked = \"keyword\";\n        return cont(value == \"typeof\" ? expressionNoComma : typeexpr);\n      }\n\n      if (type == \"variable\" || value == \"void\") {\n        cx.marked = \"type\";\n        return cont(afterType);\n      }\n\n      if (value == \"|\" || value == \"&\") return cont(typeexpr);\n      if (type == \"string\" || type == \"number\" || type == \"atom\") return cont(afterType);\n      if (type == \"[\") return cont(pushlex(\"]\"), commasep(typeexpr, \"]\", \",\"), poplex, afterType);\n      if (type == \"{\") return cont(pushlex(\"}\"), typeprops, poplex, afterType);\n      if (type == \"(\") return cont(commasep(typearg, \")\"), maybeReturnType, afterType);\n      if (type == \"<\") return cont(commasep(typeexpr, \">\"), typeexpr);\n    }\n\n    function maybeReturnType(type) {\n      if (type == \"=>\") return cont(typeexpr);\n    }\n\n    function typeprops(type) {\n      if (type.match(/[\\}\\)\\]]/)) return cont();\n      if (type == \",\" || type == \";\") return cont(typeprops);\n      return pass(typeprop, typeprops);\n    }\n\n    function typeprop(type, value) {\n      if (type == \"variable\" || cx.style == \"keyword\") {\n        cx.marked = \"property\";\n        return cont(typeprop);\n      } else if (value == \"?\" || type == \"number\" || type == \"string\") {\n        return cont(typeprop);\n      } else if (type == \":\") {\n        return cont(typeexpr);\n      } else if (type == \"[\") {\n        return cont(expect(\"variable\"), maybetypeOrIn, expect(\"]\"), typeprop);\n      } else if (type == \"(\") {\n        return pass(functiondecl, typeprop);\n      } else if (!type.match(/[;\\}\\)\\],]/)) {\n        return cont();\n      }\n    }\n\n    function typearg(type, value) {\n      if (type == \"variable\" && cx.stream.match(/^\\s*[?:]/, false) || value == \"?\") return cont(typearg);\n      if (type == \":\") return cont(typeexpr);\n      if (type == \"spread\") return cont(typearg);\n      return pass(typeexpr);\n    }\n\n    function afterType(type, value) {\n      if (value == \"<\") return cont(pushlex(\">\"), commasep(typeexpr, \">\"), poplex, afterType);\n      if (value == \"|\" || type == \".\" || value == \"&\") return cont(typeexpr);\n      if (type == \"[\") return cont(typeexpr, expect(\"]\"), afterType);\n\n      if (value == \"extends\" || value == \"implements\") {\n        cx.marked = \"keyword\";\n        return cont(typeexpr);\n      }\n\n      if (value == \"?\") return cont(typeexpr, expect(\":\"), typeexpr);\n    }\n\n    function maybeTypeArgs(_, value) {\n      if (value == \"<\") return cont(pushlex(\">\"), commasep(typeexpr, \">\"), poplex, afterType);\n    }\n\n    function typeparam() {\n      return pass(typeexpr, maybeTypeDefault);\n    }\n\n    function maybeTypeDefault(_, value) {\n      if (value == \"=\") return cont(typeexpr);\n    }\n\n    function vardef(_, value) {\n      if (value == \"enum\") {\n        cx.marked = \"keyword\";\n        return cont(enumdef);\n      }\n\n      return pass(pattern, maybetype, maybeAssign, vardefCont);\n    }\n\n    function pattern(type, value) {\n      if (isTS && isModifier(value)) {\n        cx.marked = \"keyword\";\n        return cont(pattern);\n      }\n\n      if (type == \"variable\") {\n        register(value);\n        return cont();\n      }\n\n      if (type == \"spread\") return cont(pattern);\n      if (type == \"[\") return contCommasep(eltpattern, \"]\");\n      if (type == \"{\") return contCommasep(proppattern, \"}\");\n    }\n\n    function proppattern(type, value) {\n      if (type == \"variable\" && !cx.stream.match(/^\\s*:/, false)) {\n        register(value);\n        return cont(maybeAssign);\n      }\n\n      if (type == \"variable\") cx.marked = \"property\";\n      if (type == \"spread\") return cont(pattern);\n      if (type == \"}\") return pass();\n      if (type == \"[\") return cont(expression, expect(']'), expect(':'), proppattern);\n      return cont(expect(\":\"), pattern, maybeAssign);\n    }\n\n    function eltpattern() {\n      return pass(pattern, maybeAssign);\n    }\n\n    function maybeAssign(_type, value) {\n      if (value == \"=\") return cont(expressionNoComma);\n    }\n\n    function vardefCont(type) {\n      if (type == \",\") return cont(vardef);\n    }\n\n    function maybeelse(type, value) {\n      if (type == \"keyword b\" && value == \"else\") return cont(pushlex(\"form\", \"else\"), statement, poplex);\n    }\n\n    function forspec(type, value) {\n      if (value == \"await\") return cont(forspec);\n      if (type == \"(\") return cont(pushlex(\")\"), forspec1, poplex);\n    }\n\n    function forspec1(type) {\n      if (type == \"var\") return cont(vardef, forspec2);\n      if (type == \"variable\") return cont(forspec2);\n      return pass(forspec2);\n    }\n\n    function forspec2(type, value) {\n      if (type == \")\") return cont();\n      if (type == \";\") return cont(forspec2);\n\n      if (value == \"in\" || value == \"of\") {\n        cx.marked = \"keyword\";\n        return cont(expression, forspec2);\n      }\n\n      return pass(expression, forspec2);\n    }\n\n    function functiondef(type, value) {\n      if (value == \"*\") {\n        cx.marked = \"keyword\";\n        return cont(functiondef);\n      }\n\n      if (type == \"variable\") {\n        register(value);\n        return cont(functiondef);\n      }\n\n      if (type == \"(\") return cont(pushcontext, pushlex(\")\"), commasep(funarg, \")\"), poplex, mayberettype, statement, popcontext);\n      if (isTS && value == \"<\") return cont(pushlex(\">\"), commasep(typeparam, \">\"), poplex, functiondef);\n    }\n\n    function functiondecl(type, value) {\n      if (value == \"*\") {\n        cx.marked = \"keyword\";\n        return cont(functiondecl);\n      }\n\n      if (type == \"variable\") {\n        register(value);\n        return cont(functiondecl);\n      }\n\n      if (type == \"(\") return cont(pushcontext, pushlex(\")\"), commasep(funarg, \")\"), poplex, mayberettype, popcontext);\n      if (isTS && value == \"<\") return cont(pushlex(\">\"), commasep(typeparam, \">\"), poplex, functiondecl);\n    }\n\n    function typename(type, value) {\n      if (type == \"keyword\" || type == \"variable\") {\n        cx.marked = \"type\";\n        return cont(typename);\n      } else if (value == \"<\") {\n        return cont(pushlex(\">\"), commasep(typeparam, \">\"), poplex);\n      }\n    }\n\n    function funarg(type, value) {\n      if (value == \"@\") cont(expression, funarg);\n      if (type == \"spread\") return cont(funarg);\n\n      if (isTS && isModifier(value)) {\n        cx.marked = \"keyword\";\n        return cont(funarg);\n      }\n\n      if (isTS && type == \"this\") return cont(maybetype, maybeAssign);\n      return pass(pattern, maybetype, maybeAssign);\n    }\n\n    function classExpression(type, value) {\n      // Class expressions may have an optional name.\n      if (type == \"variable\") return className(type, value);\n      return classNameAfter(type, value);\n    }\n\n    function className(type, value) {\n      if (type == \"variable\") {\n        register(value);\n        return cont(classNameAfter);\n      }\n    }\n\n    function classNameAfter(type, value) {\n      if (value == \"<\") return cont(pushlex(\">\"), commasep(typeparam, \">\"), poplex, classNameAfter);\n\n      if (value == \"extends\" || value == \"implements\" || isTS && type == \",\") {\n        if (value == \"implements\") cx.marked = \"keyword\";\n        return cont(isTS ? typeexpr : expression, classNameAfter);\n      }\n\n      if (type == \"{\") return cont(pushlex(\"}\"), classBody, poplex);\n    }\n\n    function classBody(type, value) {\n      if (type == \"async\" || type == \"variable\" && (value == \"static\" || value == \"get\" || value == \"set\" || isTS && isModifier(value)) && cx.stream.match(/^\\s+[\\w$\\xa1-\\uffff]/, false)) {\n        cx.marked = \"keyword\";\n        return cont(classBody);\n      }\n\n      if (type == \"variable\" || cx.style == \"keyword\") {\n        cx.marked = \"property\";\n        return cont(classfield, classBody);\n      }\n\n      if (type == \"number\" || type == \"string\") return cont(classfield, classBody);\n      if (type == \"[\") return cont(expression, maybetype, expect(\"]\"), classfield, classBody);\n\n      if (value == \"*\") {\n        cx.marked = \"keyword\";\n        return cont(classBody);\n      }\n\n      if (isTS && type == \"(\") return pass(functiondecl, classBody);\n      if (type == \";\" || type == \",\") return cont(classBody);\n      if (type == \"}\") return cont();\n      if (value == \"@\") return cont(expression, classBody);\n    }\n\n    function classfield(type, value) {\n      if (value == \"?\") return cont(classfield);\n      if (type == \":\") return cont(typeexpr, maybeAssign);\n      if (value == \"=\") return cont(expressionNoComma);\n      var context = cx.state.lexical.prev,\n          isInterface = context && context.info == \"interface\";\n      return pass(isInterface ? functiondecl : functiondef);\n    }\n\n    function afterExport(type, value) {\n      if (value == \"*\") {\n        cx.marked = \"keyword\";\n        return cont(maybeFrom, expect(\";\"));\n      }\n\n      if (value == \"default\") {\n        cx.marked = \"keyword\";\n        return cont(expression, expect(\";\"));\n      }\n\n      if (type == \"{\") return cont(commasep(exportField, \"}\"), maybeFrom, expect(\";\"));\n      return pass(statement);\n    }\n\n    function exportField(type, value) {\n      if (value == \"as\") {\n        cx.marked = \"keyword\";\n        return cont(expect(\"variable\"));\n      }\n\n      if (type == \"variable\") return pass(expressionNoComma, exportField);\n    }\n\n    function afterImport(type) {\n      if (type == \"string\") return cont();\n      if (type == \"(\") return pass(expression);\n      if (type == \".\") return pass(maybeoperatorComma);\n      return pass(importSpec, maybeMoreImports, maybeFrom);\n    }\n\n    function importSpec(type, value) {\n      if (type == \"{\") return contCommasep(importSpec, \"}\");\n      if (type == \"variable\") register(value);\n      if (value == \"*\") cx.marked = \"keyword\";\n      return cont(maybeAs);\n    }\n\n    function maybeMoreImports(type) {\n      if (type == \",\") return cont(importSpec, maybeMoreImports);\n    }\n\n    function maybeAs(_type, value) {\n      if (value == \"as\") {\n        cx.marked = \"keyword\";\n        return cont(importSpec);\n      }\n    }\n\n    function maybeFrom(_type, value) {\n      if (value == \"from\") {\n        cx.marked = \"keyword\";\n        return cont(expression);\n      }\n    }\n\n    function arrayLiteral(type) {\n      if (type == \"]\") return cont();\n      return pass(commasep(expressionNoComma, \"]\"));\n    }\n\n    function enumdef() {\n      return pass(pushlex(\"form\"), pattern, expect(\"{\"), pushlex(\"}\"), commasep(enummember, \"}\"), poplex, poplex);\n    }\n\n    function enummember() {\n      return pass(pattern, maybeAssign);\n    }\n\n    function isContinuedStatement(state, textAfter) {\n      return state.lastType == \"operator\" || state.lastType == \",\" || isOperatorChar.test(textAfter.charAt(0)) || /[,.]/.test(textAfter.charAt(0));\n    }\n\n    function expressionAllowed(stream, state, backUp) {\n      return state.tokenize == tokenBase && /^(?:operator|sof|keyword [bcd]|case|new|export|default|spread|[\\[{}\\(,;:]|=>)$/.test(state.lastType) || state.lastType == \"quasi\" && /\\{\\s*$/.test(stream.string.slice(0, stream.pos - (backUp || 0)));\n    } // Interface\n\n\n    return {\n      startState: function startState(basecolumn) {\n        var state = {\n          tokenize: tokenBase,\n          lastType: \"sof\",\n          cc: [],\n          lexical: new JSLexical((basecolumn || 0) - indentUnit, 0, \"block\", false),\n          localVars: parserConfig.localVars,\n          context: parserConfig.localVars && new Context(null, null, false),\n          indented: basecolumn || 0\n        };\n        if (parserConfig.globalVars && typeof parserConfig.globalVars == \"object\") state.globalVars = parserConfig.globalVars;\n        return state;\n      },\n      token: function token(stream, state) {\n        if (stream.sol()) {\n          if (!state.lexical.hasOwnProperty(\"align\")) state.lexical.align = false;\n          state.indented = stream.indentation();\n          findFatArrow(stream, state);\n        }\n\n        if (state.tokenize != tokenComment && stream.eatSpace()) return null;\n        var style = state.tokenize(stream, state);\n        if (type == \"comment\") return style;\n        state.lastType = type == \"operator\" && (content == \"++\" || content == \"--\") ? \"incdec\" : type;\n        return parseJS(state, style, type, content, stream);\n      },\n      indent: function indent(state, textAfter) {\n        if (state.tokenize == tokenComment || state.tokenize == tokenQuasi) return CodeMirror.Pass;\n        if (state.tokenize != tokenBase) return 0;\n        var firstChar = textAfter && textAfter.charAt(0),\n            lexical = state.lexical,\n            top; // Kludge to prevent 'maybelse' from blocking lexical scope pops\n\n        if (!/^\\s*else\\b/.test(textAfter)) for (var i = state.cc.length - 1; i >= 0; --i) {\n          var c = state.cc[i];\n          if (c == poplex) lexical = lexical.prev;else if (c != maybeelse && c != popcontext) break;\n        }\n\n        while ((lexical.type == \"stat\" || lexical.type == \"form\") && (firstChar == \"}\" || (top = state.cc[state.cc.length - 1]) && (top == maybeoperatorComma || top == maybeoperatorNoComma) && !/^[,\\.=+\\-*:?[\\(]/.test(textAfter))) {\n          lexical = lexical.prev;\n        }\n\n        if (statementIndent && lexical.type == \")\" && lexical.prev.type == \"stat\") lexical = lexical.prev;\n        var type = lexical.type,\n            closing = firstChar == type;\n        if (type == \"vardef\") return lexical.indented + (state.lastType == \"operator\" || state.lastType == \",\" ? lexical.info.length + 1 : 0);else if (type == \"form\" && firstChar == \"{\") return lexical.indented;else if (type == \"form\") return lexical.indented + indentUnit;else if (type == \"stat\") return lexical.indented + (isContinuedStatement(state, textAfter) ? statementIndent || indentUnit : 0);else if (lexical.info == \"switch\" && !closing && parserConfig.doubleIndentSwitch != false) return lexical.indented + (/^(?:case|default)\\b/.test(textAfter) ? indentUnit : 2 * indentUnit);else if (lexical.align) return lexical.column + (closing ? 0 : 1);else return lexical.indented + (closing ? 0 : indentUnit);\n      },\n      electricInput: /^\\s*(?:case .*?:|default:|\\{|\\})$/,\n      blockCommentStart: jsonMode ? null : \"/*\",\n      blockCommentEnd: jsonMode ? null : \"*/\",\n      blockCommentContinue: jsonMode ? null : \" * \",\n      lineComment: jsonMode ? null : \"//\",\n      fold: \"brace\",\n      closeBrackets: \"()[]{}''\\\"\\\"``\",\n      helperType: jsonMode ? \"json\" : \"javascript\",\n      jsonldMode: jsonldMode,\n      jsonMode: jsonMode,\n      expressionAllowed: expressionAllowed,\n      skipExpression: function skipExpression(state) {\n        var top = state.cc[state.cc.length - 1];\n        if (top == expression || top == expressionNoComma) state.cc.pop();\n      }\n    };\n  });\n  CodeMirror.registerHelper(\"wordChars\", \"javascript\", /[\\w$]/);\n  CodeMirror.defineMIME(\"text/javascript\", \"javascript\");\n  CodeMirror.defineMIME(\"text/ecmascript\", \"javascript\");\n  CodeMirror.defineMIME(\"application/javascript\", \"javascript\");\n  CodeMirror.defineMIME(\"application/x-javascript\", \"javascript\");\n  CodeMirror.defineMIME(\"application/ecmascript\", \"javascript\");\n  CodeMirror.defineMIME(\"application/json\", {\n    name: \"javascript\",\n    json: true\n  });\n  CodeMirror.defineMIME(\"application/x-json\", {\n    name: \"javascript\",\n    json: true\n  });\n  CodeMirror.defineMIME(\"application/manifest+json\", {\n    name: \"javascript\",\n    json: true\n  });\n  CodeMirror.defineMIME(\"application/ld+json\", {\n    name: \"javascript\",\n    jsonld: true\n  });\n  CodeMirror.defineMIME(\"text/typescript\", {\n    name: \"javascript\",\n    typescript: true\n  });\n  CodeMirror.defineMIME(\"application/typescript\", {\n    name: \"javascript\",\n    typescript: true\n  });\n});"],"sourceRoot":""}