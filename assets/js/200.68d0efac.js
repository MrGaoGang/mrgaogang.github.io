(window.webpackJsonp=window.webpackJsonp||[]).push([[200],{884:function(t,s,n){"use strict";n.r(s);var a=n(18),e=Object(a.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h2",{attrs:{id:"sql"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#sql"}},[t._v("#")]),t._v(" SQL")]),t._v(" "),n("ul",[n("li",[n("p",[n("RouterLink",{attrs:{to:"/mysql/mysql索引及查询优化.html"}},[t._v("MySQL索引及查询优化")]),n("Tag")],1)]),t._v(" "),n("li",[n("p",[n("RouterLink",{attrs:{to:"/mysql/mysql主从复制.html"}},[t._v("使用 Docker 进行 MySQL 主从复制")])],1)]),t._v(" "),n("li",[n("p",[n("a",{attrs:{href:"https://mp.weixin.qq.com/s/YpRQa9YguOqJygJbdRZ-nA",target:"_blank",rel:"noopener noreferrer"}},[t._v("数据库存储选型经验总结"),n("OutboundLink")],1)])]),t._v(" "),n("li",[n("p",[n("a",{attrs:{href:"https://juejin.cn/post/7062316115715686408",target:"_blank",rel:"noopener noreferrer"}},[t._v("MySQL索引的创建与设计原则"),n("OutboundLink")],1)])]),t._v(" "),n("li",[n("p",[n("a",{attrs:{href:"https://cdn-1252273386.cos.ap-guangzhou.myqcloud.com/images/83c39bb340683a4fbcc78e8c2fe6532b.png",target:"_blank",rel:"noopener noreferrer"}},[t._v("非关系型数据库选型"),n("OutboundLink")],1)])])]),t._v(" "),n("h2",{attrs:{id:"docker"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#docker"}},[t._v("#")]),t._v(" Docker")]),t._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"https://yeasy.gitbook.io/docker_practice/",target:"_blank",rel:"noopener noreferrer"}},[t._v("docker 从入门到实践"),n("OutboundLink")],1),n("Tag")],1),t._v(" "),n("li",[n("a",{attrs:{href:"https://juejin.cn/post/6875323565479034894",target:"_blank",rel:"noopener noreferrer"}},[t._v("手摸手带你 Docker 从入门到实践"),n("OutboundLink")],1),n("Tag")],1),t._v(" "),n("li",[n("RouterLink",{attrs:{to:"/other/docker_deploy_github.html"}},[t._v("私有项目如何使用 github action 打包 docker 镜像并部署到服务器")]),t._v(" "),n("Tag",{attrs:{hot:""}})],1)]),t._v(" "),n("h3",{attrs:{id:"docker【镜像】常见命令"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#docker【镜像】常见命令"}},[t._v("#")]),t._v(" docker【镜像】常见命令")]),t._v(" "),n("div",{staticClass:"language-bash extra-class"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 去下载镜像，先从本地找，没有去镜像，最后没有去 hub，标签不写默认为 lastest")]),t._v("\n$ "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" pull "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("镜像名"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(":"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("标签Tag"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 列出本机的所有 image 文件，-a 显示本地所有镜像（包括中间镜像），-q 只显示镜像ID，--digests 显示镜像的摘要信息")]),t._v("\n$ "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" image "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("ls")]),t._v("\n$ "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" images\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 删除 image 文件, -f 强制删除镜像")]),t._v("\n$ "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" rmi "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("镜像名"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(":标签Tag"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n$ "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" rmi "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("镜像名1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(":标签Tag"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("镜像名2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(":标签Tag"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 删多个")]),t._v("\n$ "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" rmi "),n("span",{pre:!0,attrs:{class:"token variable"}},[n("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$(")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("ps")]),t._v(" -a -q"),n("span",{pre:!0,attrs:{class:"token variable"}},[t._v(")")])]),t._v("    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 删全部，后面是子命令")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查询镜像名称，--no-trunc 显示完整的镜像描述，--filter=stars=30 列出star不少于指定值的镜像，--filter=is-automated=true 列出自动构建类型的镜像")]),t._v("\n$ "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" search "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("关键字"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 下载镜像，标签 tag 不写默认为 lastest，也可以自己加比如 :3.2.0")]),t._v("\n$ "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" pull "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("镜像名"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(":标签Tag"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# docker 构建镜像")]),t._v("\n\n$ "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" build "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v(" --file Dockerfile --tag mrgaogang/iot-web:latest\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# docker 发布")]),t._v("\n\n$ "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" push mrgaogang/iot-web:latest\n\n\n\n")])])]),n("h3",{attrs:{id:"docker-私有化部署"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#docker-私有化部署"}},[t._v("#")]),t._v(" docker 私有化部署")]),t._v(" "),n("div",{staticClass:"language-bash extra-class"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 私有化部署")]),t._v("\nhttps://bbs.huaweicloud.com/blogs/196661\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 1、下载镜像")]),t._v("\n$ "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" pull registry:2\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 2、运行容器")]),t._v("\n$ "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" run  -d --restart"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("always  -v /opt/registry:/var/lib/registry -p "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("5000")]),t._v(":5000 --name myregistry registry:2\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 私有化构建")]),t._v("\n$ "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" build "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v(" --file Dockerfile --tag "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("127.0")]),t._v(".0.1:5000:mrgaogang/iot-web:latest\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 私有化发布")]),t._v("\n\n$ "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" push "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("127.0")]),t._v(".0.1:5000:mrgaogang/iot-web:latest\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 注意，上传镜像时报错了：http: server gave HTTP response to HTTPS client")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 【在docker push 的客户端执行，而不是私有服务器】解决办法1：")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 1、编辑 /etc/docker/daemon.json，在文件中写入：")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"insecure-registries"')]),t._v(":"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"http://你的ip:5000"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 【在docker push 的客户端执行，而不是私有服务器】或者快解决办法2")]),t._v("\n\n$ "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("vim")]),t._v(" /usr/lib/systemd/system/docker.service\n修改里面的内容 为 "),n("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("ExecStart")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("/usr/bin/dockerd  --containerd"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("/run/containerd/containerd.sock --insecure-registry 你的ip:5000\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 2、重启生效：")]),t._v("\n\n$ "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" systemctl daemon-reload\n$ "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" systemctl restart "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 再次上传，问题解决：")]),t._v("\n$ "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" push "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("127.0")]),t._v(".0.1:5000:mrgaogang/iot-web:latest\n\n")])])]),n("h3",{attrs:{id:"docker【容器】常见命令"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#docker【容器】常见命令"}},[t._v("#")]),t._v(" docker【容器】常见命令")]),t._v(" "),n("div",{staticClass:"language-bash extra-class"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 列出本机正在运行的容器，-a 列出本机所有容器包括终止运行的容器，-q 静默模式只显示容器编号，-l 显示最近创建的容器")]),t._v("\n$ "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" container "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("ls")]),t._v("     "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 等价于下面这个命令")]),t._v("\n$ "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("ps")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 新建并启动容器")]),t._v("\n$ "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" run "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("option"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("容器名"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" \n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## --restart=always  # 启动加上这个会保证docker启动自动启动容器【注意需要放在容器名称前端】")]),t._v("\n\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 启动容器")]),t._v("\n$ "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" start "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("容器ID"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("/"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("容器Names"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 重启容器")]),t._v("\n$ "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" restart "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("容器ID"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("/"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("容器Names"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 终止容器运行")]),t._v("\n$ "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("kill")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("容器ID"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 强行终止，相当于向容器里面的主进程发出 SIGKILL 信号，那些正在进行中的操作会全部丢失")]),t._v("\n$ "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("kill")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token variable"}},[n("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$(")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("ps")]),t._v(" -a -q"),n("span",{pre:!0,attrs:{class:"token variable"}},[t._v(")")])]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 强行终止所有容器")]),t._v("\n$ "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" stop "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("容器ID"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 从容终止，相当于向容器里面的主进程发出 SIGTERM 信号，然后过一段时间再发出 SIGKILL 信号")]),t._v("\n$ "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" stop "),n("span",{pre:!0,attrs:{class:"token variable"}},[n("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$(")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("ps")]),t._v(" -a -q"),n("span",{pre:!0,attrs:{class:"token variable"}},[t._v(")")])]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 终止所有容器")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 终止运行的容器文件，依然会占据硬盘空间，可以使用 docker container rm 命令删除，-f 强制删除可以删除正在运行的容器")]),t._v("\n$ "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("rm")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("容器ID"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n$ "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("rm")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token variable"}},[n("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("ps")]),t._v(" -aq"),n("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")])]),t._v("    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 删除所有已经停止的容器，因为没停止的rm删不了需要加-f")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看容器的输出，-t加入时间戳，-f跟随最新日志打印，--tail数字显示最后多少条，如果docker run时，没有使用-it，就要用这个命令查看输出")]),t._v("\n$ "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" logs "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("容器ID"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看容器进程信息")]),t._v("\n$ "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("top")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("容器ID"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("/"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("容器Names"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n$ "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" port "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("容器ID"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("/"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("容器Names"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 退出容器")]),t._v("\n$ "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("exit")]),t._v("           "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 容器退出")]),t._v("\nctrl + p + q     "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 容器退出，快捷键")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 进入容器")]),t._v("\n$ "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" attach "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("容器ID"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("      "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 退出容器时会让容器停止，本机的输入直接输到容器中")]),t._v("\n$ "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("exec")]),t._v(" -it "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("容器ID"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 退出容器时不会让容器停止，在已运行的容器中执行命令，不创建和启动新的容器")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 设置容器在docker启动时自动启动")]),t._v("\n$ "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" container update --restart"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("always "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("容器名字"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n")])])]),n("p",[t._v("这里要特别说一下 "),n("code",[t._v("docker run")]),t._v(" 的 "),n("code",[t._v("option")]),t._v("，因为最常用：")]),t._v(" "),n("ol",[n("li",[n("code",[t._v("--name")]),t._v(" 为容器指定一个名称；")]),t._v(" "),n("li",[n("strong",[n("code",[t._v("-d")]),t._v(" 容器启动后进入后台，并返回容器 ID，即启动守护式容器；")])]),t._v(" "),n("li",[n("code",[t._v("-P")]),t._v(" 随机端口映射；")]),t._v(" "),n("li",[n("strong",[n("code",[t._v("-p 80:8080")]),t._v(" 将本地 80 端口映射到容器的 8080 端口；")])]),t._v(" "),n("li",[n("code",[t._v("bash")]),t._v(" 容器启动以后，内部第一个执行的命令。这里启动 bash，保证用户可以使用 Shell；")]),t._v(" "),n("li",[n("strong",[n("code",[t._v("-i")]),t._v(" 以交互模式运行容器，通常与 "),n("code",[t._v("-t")]),t._v(" 同时使用；")])]),t._v(" "),n("li",[n("strong",[n("code",[t._v("-t")]),t._v(" 为容器重新分配一个伪输入终端，容器的 Shell 会映射到当前的 Shell，然后在本机窗口输入的命令，就会传入容器，通常与 "),n("code",[t._v("-i")]),t._v(" 同时使用；")])]),t._v(" "),n("li",[n("code",[t._v("--rm")]),t._v(" 在容器终止运行后自动删除容器文件；")]),t._v(" "),n("li",[n("code",[t._v("--restart=always")]),t._v(" 设置容器自启动；")]),t._v(" "),n("li",[n("strong",[n("code",[t._v("-v /xxx:/yyy")]),t._v(" 映射命令，把本机的 xxx 目录映射到容器中的 yyy 目录，也就是说改变本机的 xxx 目录下的内容， 容器 yyy 目录中的内容也会改变；")])])]),t._v(" "),n("h2",{attrs:{id:"nginx"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#nginx"}},[t._v("#")]),t._v(" Nginx")]),t._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"https://www.nginxedit.cn/",target:"_blank",rel:"noopener noreferrer"}},[t._v("nginx配置生成工具"),n("OutboundLink")],1),n("Tag")],1),t._v(" "),n("li",[n("RouterLink",{attrs:{to:"/other/万字长文nginx配置详细说明.html"}},[t._v("万字长文nginx配置详细说明")])],1)]),t._v(" "),n("h2",{attrs:{id:"其他"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#其他"}},[t._v("#")]),t._v(" 其他")]),t._v(" "),n("ol",[n("li",[n("RouterLink",{attrs:{to:"/other/vscode.html"}},[t._v("vscode 插件编写")])],1),t._v(" "),n("li",[n("RouterLink",{attrs:{to:"/other/parse-to-css.html"}},[t._v("解析 vue/react 中的 class 到 Less/css 中")])],1),t._v(" "),n("li",[n("RouterLink",{attrs:{to:"/other/git.html"}},[t._v("git 操作")])],1),t._v(" "),n("li",[n("RouterLink",{attrs:{to:"/other/linux.html"}},[t._v("linux 相关操作")])],1)])])}),[],!1,null,null,null);s.default=e.exports}}]);