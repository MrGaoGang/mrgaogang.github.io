(window.webpackJsonp=window.webpackJsonp||[]).push([[211],{886:function(t,s,a){"use strict";a.r(s);var e=a(18),r=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"redux为什么要求数据不可变"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#redux为什么要求数据不可变"}},[t._v("#")]),t._v(" Redux为什么要求数据不可变")]),t._v(" "),a("p",[t._v("不可变数据就是你不能直接修改它的值，而是通过复制它的值，并且产生一个新对象的方式来得到一个新的数据，包含里要修改的部分。")]),t._v(" "),a("h2",{attrs:{id:"redux-为何需要不可变数据"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#redux-为何需要不可变数据"}},[t._v("#")]),t._v(" Redux 为何需要不可变数据")]),t._v(" "),a("h3",{attrs:{id:"_1-性能优化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-性能优化"}},[t._v("#")]),t._v(" 1.性能优化")]),t._v(" "),a("p",[t._v("因为当 store 发生变化的时候，我们需要通知所有的组件进行更新。")]),t._v(" "),a("h4",{attrs:{id:"store-如何发生变化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#store-如何发生变化"}},[t._v("#")]),t._v(" store 如何发生变化？")]),t._v(" "),a("p",[t._v("在 Redux 中，所有的变化都是由 action 触发的，action 触发在原来旧的 state 上，形成一个新的 state。\n这两个新旧 state，是完全不同的对象。\n当旧的 state 和新的 state 不是同一个对象时，我们就知道这个 store 发生了变化，我们不需要比较它其中的值有没有发生变化，我们只需要比较两个引用的状态是不是一样(浅比较)。所以通过这种不可变的机制达到性能优化的目的。")]),t._v(" "),a("h4",{attrs:{id:"redux-中的-store-是不可变的。每个节点都是不可变数据。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#redux-中的-store-是不可变的。每个节点都是不可变数据。"}},[t._v("#")]),t._v(" Redux 中的 store 是不可变的。每个节点都是不可变数据。")]),t._v(" "),a("p",[t._v("这样，当一个组件绑定在一个节点上。我们只要判断前一个状态和后一个状态它们是否相等，就能知道当前的 store 有没有发生变化。从而决定是否更新组件。\n这样就"),a("strong",[t._v("不要去做深层次的遍历每个值是否相等，而只是通过比较引用是否是同一个就可以达到目的")]),t._v("。")]),t._v(" "),a("h3",{attrs:{id:"_2-易于调试和跟踪"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-易于调试和跟踪"}},[t._v("#")]),t._v(" 2.易于调试和跟踪")]),t._v(" "),a("p",[t._v("当你的 store 发生变化的时候，在任何时刻都可以"),a("strong",[t._v("记录之前的状态和之后的状态")]),t._v("。并且计算它们 diff 的值。")]),t._v(" "),a("h3",{attrs:{id:"_3-易于推测"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-易于推测"}},[t._v("#")]),t._v(" 3.易于推测")]),t._v(" "),a("p",[t._v("在任何时刻都可以推测 store 是由什么引起的变化。store 一定是触发了 action 才会变化。\n通过比较 action 之前的状态是什么，之后的状态是什么，可以很容易地判断当前的 action 是否被正确处理。")]),t._v(" "),a("h3",{attrs:{id:"_4-不可变数据的管理极大地提升了数据处理的安全性。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-不可变数据的管理极大地提升了数据处理的安全性。"}},[t._v("#")]),t._v(" 4. 不可变数据的管理极大地提升了数据处理的安全性。")]),t._v(" "),a("h2",{attrs:{id:"react-redux-是如何使用浅比较来决定组件是否需要重新渲染的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#react-redux-是如何使用浅比较来决定组件是否需要重新渲染的"}},[t._v("#")]),t._v(" react-redux 是如何使用浅比较来决定组件是否需要重新渲染的？")]),t._v(" "),a("p",[t._v("每次调用 "),a("code",[t._v("React-Redux")]),t._v(" 提供的 "),a("code",[t._v("connect")]),t._v(" 函数时，"),a("strong",[t._v("它储存的根 state 对象的引用，与当前传递给 "),a("code",[t._v("store")]),t._v(" 的根 "),a("code",[t._v("state")]),t._v(" 对象之间，会进行浅比较")]),t._v("。如果相等，说明根 state 对象没有变化，也就无需重新渲染组件，甚至无需调用 "),a("code",[t._v("mapStateToProps")]),t._v("。")]),t._v(" "),a("p",[t._v("如果发现其不相等，说明根 state 对象"),a("strong",[t._v("已经")]),t._v("被更新了，这时 "),a("code",[t._v("connect")]),t._v(" 会调用 "),a("code",[t._v("mapStateToProps")]),t._v(" 来查看传给包装的组件的 props 是否被更新。")]),t._v(" "),a("p",[t._v("它会对该对象的每一个值各自进行浅比较，如果发现其中有不相等的才会触发重新渲染。")]),t._v(" "),a("p",[t._v("在下例中，调用 "),a("code",[t._v("connect")]),t._v(" 后，如果 "),a("code",[t._v("state.todos")]),t._v(" 以及 "),a("code",[t._v("getVisibleTodos()")]),t._v(" 的返回值没有改变，组件就不会重新渲染。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("mapStateToProps")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("state")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("todos")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" state"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("todos"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// prop value")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("visibleTodos")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getVisibleTodos")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("state"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// selector")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("connect")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("mapStateToProps"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("TodoApp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),a("p",[t._v("与之相反，在下例中，组件"),a("strong",[t._v("总是")]),t._v("重新渲染，因为不管 "),a("code",[t._v("todos")]),t._v(" 的值有没有改变，"),a("code",[t._v("todos")]),t._v(" 本身总是一个新的对象。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// AVOID - will always cause a re-render")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("mapStateToProps")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("state")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// todos always references a newly-created object")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("todos")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("all")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" state"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("todos"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("visibleTodos")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getVisibleTodos")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("state"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("connect")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("mapStateToProps"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("TodoApp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),a("p",[a("code",[t._v("mapStateToProps")]),t._v(" 返回的新值，与 React-Redux 保留的旧值的引用如果不是浅层相等的，组件就会被重新渲染。")])])}),[],!1,null,null,null);s.default=r.exports}}]);