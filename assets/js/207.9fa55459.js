(window.webpackJsonp=window.webpackJsonp||[]).push([[207],{892:function(t,s,a){"use strict";a.r(s);var n=a(18),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"fiber的理解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#fiber的理解"}},[t._v("#")]),t._v(" Fiber的理解")]),t._v(" "),a("h2",{attrs:{id:"前言"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[t._v("#")]),t._v(" 前言")]),t._v(" "),a("p",[t._v("本文作为自己深入学习 "),a("code",[t._v("React Fiber")]),t._v("(React v16.8.6)的理解,本篇仅介绍大致流程,Fiber 详细源码本文不作细节描述。")]),t._v(" "),a("h2",{attrs:{id:"fiber-出现的背景"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#fiber-出现的背景"}},[t._v("#")]),t._v(" "),a("code",[t._v("Fiber")]),t._v(" 出现的背景")]),t._v(" "),a("p",[t._v("首先要知道的是,JavaScript 引擎和页面渲染引擎"),a("strong",[t._v("两个线程是互斥的")]),t._v(",当其中一个线程执行时,另一个线程只能挂起等待。")]),t._v(" "),a("p",[t._v("在这样的机制下,"),a("strong",[t._v("如果 "),a("code",[t._v("JavaScript")]),t._v(" 线程长时间地占用了主线程,那么渲染层面的更新就不得不长时间地等待,界面长时间不更新,会导致页面响应度变差,用户可能会感觉到卡顿")]),t._v("。")]),t._v(" "),a("p",[t._v("而这正是 React 15 的 "),a("code",[t._v("Stack Reconciler")]),t._v(" 所面临的问题,即是 "),a("code",[t._v("JavaScript")]),t._v(" 对主线程的超时占用问题。"),a("code",[t._v("Stack Reconciler")]),t._v(" 是一个同步的递归过程,使用的是 "),a("code",[t._v("JavaScript")]),t._v(" 引擎自身的函数调用栈,它会一直执行到栈空为止,所以当 "),a("code",[t._v("React")]),t._v(" 在渲染组件时,从开始到渲染完成整个过程是一气呵成的。如果渲染的组件比较庞大,js 执行会占据主线程较长时间,会导致页面响应度变差。")]),t._v(" "),a("p",[t._v("而且所有的任务都是按照先后顺序,没有区分优先级,这样就会导致优先级比较高的任务无法被优先执行。")]),t._v(" "),a("h2",{attrs:{id:"fiber-是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#fiber-是什么"}},[t._v("#")]),t._v(" "),a("code",[t._v("Fiber")]),t._v(" 是什么")]),t._v(" "),a("p",[a("code",[t._v("Fiber")]),t._v(" 的中文翻译叫纤程,与进程、线程同为程序执行过程,Fiber 就是比线程还要纤细的一个过程。纤程意在对渲染过程实现进行更加精细的控制。")]),t._v(" "),a("p",[t._v("从架构角度来看,"),a("code",[t._v("Fiber")]),t._v(" 是对 "),a("code",[t._v("React")]),t._v(" 核心算法（即调和过程）的重写。")]),t._v(" "),a("p",[t._v("从编码角度来看,"),a("code",[t._v("Fiber")]),t._v(" 是 "),a("code",[t._v("React")]),t._v(" 内部所定义的一种数据结构,它是 "),a("code",[t._v("Fiber")]),t._v(' 树结构的节点单位,也就是 React 16 新架构下的"虚拟 DOM"。')]),t._v(" "),a("p",[t._v("一个 fiber 就是一个 "),a("code",[t._v("JavaScript")]),t._v(" 对象,Fiber 的数据结构如下：")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("type Fiber "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 用于标记fiber的WorkTag类型,主要表示当前fiber代表的组件类型如FunctionComponent、ClassComponent等")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("tag")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" WorkTag"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ReactElement里面的key")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("key")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" string"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ReactElement.type,调用`createElement`的第一个参数")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("elementType")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" any"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// The resolved function/class/ associated with this fiber.")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 表示当前代表的节点类型")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("type")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" any"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 表示当前FiberNode对应的element组件实例")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("stateNode")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" any"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 指向他在Fiber节点树中的`parent`,用来在处理完这个节点之后向上返回")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Fiber "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 指向自己的第一个子节点")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("child")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Fiber "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 指向自己的兄弟结构,兄弟节点的return指向同一个父节点")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("sibling")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Fiber "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("index")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" number"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("ref")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("handle")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" mixed")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("_stringRef")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v("string "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" RefObject"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 当前处理过程中的组件props对象")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("pendingProps")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" any"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 上一次渲染完成之后的props")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("memoizedProps")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" any"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 该Fiber对应的组件产生的Update会存放在这个队列里面")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("updateQueue")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" UpdateQueue"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("any"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 上一次渲染的时候的state")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("memoizedState")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" any"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 一个列表,存放这个Fiber依赖的context")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("firstContextDependency")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" ContextDependency"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("mixed"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("mode")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" TypeOfMode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Effect")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 用来记录Side Effect")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("effectTag")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" SideEffectTag"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 单链表用来快速查找下一个side effect")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("nextEffect")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Fiber "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 子树中第一个side effect")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("firstEffect")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Fiber "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 子树中最后一个side effect")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("lastEffect")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Fiber "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 代表任务在未来的哪个时间点应该被完成,之后版本改名为 lanes")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("expirationTime")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" ExpirationTime"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 快速确定子树中是否有不在等待的变化")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("childExpirationTime")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" ExpirationTime"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// fiber的版本池,即记录fiber更新过程,便于恢复")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("alternate")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("Fiber")]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),a("blockquote",[a("p",[t._v("在 2020 年 5 月,以 expirationTime 属性为代表的优先级模型被 lanes 取代。")])]),t._v(" "),a("h2",{attrs:{id:"fiber-如何解决问题的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#fiber-如何解决问题的"}},[t._v("#")]),t._v(" "),a("code",[t._v("Fiber")]),t._v(" 如何解决问题的")]),t._v(" "),a("p",[a("code",[t._v("Fiber")]),t._v(" "),a("strong",[t._v("把一个渲染任务分解为多个渲染任务")]),t._v(',而不是一次性完成,把每一个分割得很细的任务视作一个"执行单元",React 就会检查现在还剩多少时间,如果没有时间就将控制权让出去,故任务会被分散到多个帧里面,中间可以返回至主进程控制执行其他任务,最终实现更流畅的用户体验。')]),t._v(" "),a("p",[t._v('即是实现了"增量渲染",实现了可中断与恢复,恢复后也可以复用之前的中间状态,并给不同的任务赋予不同的优先级,其中每个任务更新单元为 React Element 对应的 '),a("code",[t._v("Fiber")]),t._v(" 节点。")]),t._v(" "),a("h2",{attrs:{id:"fiber的核心目标及特性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#fiber的核心目标及特性"}},[t._v("#")]),t._v(" "),a("code",[t._v("Fiber")]),t._v("的核心目标及特性")]),t._v(" "),a("h3",{attrs:{id:"核心目标"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#核心目标"}},[t._v("#")]),t._v(" 核心目标")]),t._v(" "),a("p",[t._v("核心目标："),a("strong",[t._v("扩大其适用性，包括动画，布局和手势")]),t._v("。分为 5 个具体目标:")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("把可中断的工作拆分成小任务")])]),t._v(" "),a("li",[a("p",[t._v("对正在做的工作调整优先次序、重做、复用上次（做了一半的）成果")])]),t._v(" "),a("li",[a("p",[t._v("在父子任务之间从容切换（yield back and forth），以支持 React 执行过程中的布局刷新")])]),t._v(" "),a("li",[a("p",[t._v("支持 render()返回多个元素")])]),t._v(" "),a("li",[a("p",[t._v("更好地支持 error boundary")])])]),t._v(" "),a("h3",{attrs:{id:"关键特性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#关键特性"}},[t._v("#")]),t._v(" 关键特性")]),t._v(" "),a("p",[t._v("Fiber 的关键特性如下：")]),t._v(" "),a("ul",[a("li",[a("p",[a("strong",[t._v("增量渲染（把渲染任务拆分成块，匀到多帧）")])])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("更新时能够暂停，终止，复用渲染任务")])])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("给不同类型的更新赋予优先级")])])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("并发方面新的基础能力")])])])]),t._v(" "),a("p",[t._v("增量渲染用来解决掉帧的问题，渲染任务拆分之后，每次只做一小段，做完一段就把时间控制权交还给主线程，而不像之前长时间占用。这种策略叫做 cooperative scheduling（合作式调度），操作系统的 3 种任务调度策略之一（Firefox 还对真实 DOM 应用了这项技术）")]),t._v(" "),a("p",[t._v("另外，React 自身的"),a("em",[t._v("killer feature")]),t._v("是 virtual DOM，2 个原因：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("coding UI 变简单了（不用关心浏览器应该怎么做，而是把下一刻的 UI 描述给 React 听）")])]),t._v(" "),a("li",[a("p",[t._v("既然 DOM 能 virtual，别的（硬件、VR、native App）也能")])])]),t._v(" "),a("p",[t._v("React 实现上分为 2 部分：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("reconciler 寻找某时刻前后两版 UI 的差异。包括之前的 Stack reconciler 与现在的 Fiber reconciler")])]),t._v(" "),a("li",[a("p",[t._v("renderer 插件式的，平台相关的部分。包括 React DOM、React Native、React ART、ReactHardware、ReactAframe、React-pdf、ReactThreeRenderer、ReactBlessed 等等")])])]),t._v(" "),a("p",[a("strong",[t._v("这一波是对 reconciler 的彻底改造，对 killer feature 的增强")])]),t._v(" "),a("h2",{attrs:{id:"fiber-实现原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#fiber-实现原理"}},[t._v("#")]),t._v(" "),a("code",[t._v("Fiber")]),t._v(" 实现原理")]),t._v(" "),a("p",[t._v("实现的方式是"),a("code",[t._v("requestIdleCallback")]),t._v("这一 API,但 React 团队 polyfill 了这个 API,使其对比原生的浏览器兼容性更好且拓展了特性。")]),t._v(" "),a("blockquote",[a("p",[a("code",[t._v("window.requestIdleCallback()")]),t._v("方法将在浏览器的空闲时段内调用的函数排队。这使开发者能够在主事件循环上执行后台和低优先级工作,而不会影响延迟关键事件,如动画和输入响应。函数一般会按先进先调用的顺序执行,然而,如果回调函数指定了执行超时时间 timeout,则有可能为了在超时前执行函数而打乱执行顺序。")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 一个简单的使用案例")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("requestIdleCallback")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("myWork"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 一个任务队列")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" tasks "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("t1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'执行任务1'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("t2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'执行任务2'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// deadline是requestIdleCallback返回的一个对象")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("myWork")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("deadline")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("当前帧剩余时间: ")]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("deadline"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("timeRemaining")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 方法timeRemaining返回的是当前帧的剩余时间")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("deadline"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("timeRemaining")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" tasks"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 可以在这里做一些事情了")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" task "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" tasks"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("shift")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("task")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果还有任务没有被执行，那就放到下一帧调度中去继续执行，类似递归")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tasks"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("requestIdleCallback")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("myWork"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[a("code",[t._v("requestIdleCallback")]),t._v("回调的执行的前提条件是当前浏览器处于空闲状态。")]),t._v(" "),a("p",[t._v("即"),a("code",[t._v("requestIdleCallback")]),t._v("的作用是在浏览器一帧的剩余空闲时间内执行优先度相对较低的任务。首先 React 中任务切割为多个步骤,分批完成。在完成一部分任务之后,将控制权交回给浏览器,让浏览器有时间再进行页面的渲染。等浏览器忙完之后有剩余时间,再继续之前 React 未完成的任务,是一种合作式调度。")]),t._v(" "),a("p",[t._v("简而言之,由浏览器给我们分配执行时间片,我们要按照约定在这个时间内执行完毕,并将控制权还给浏览器。")]),t._v(" "),a("p",[t._v("React 16 的"),a("code",[t._v("Reconciler")]),t._v("基于 "),a("code",[t._v("Fiber")]),t._v(" 节点实现,被称为 "),a("code",[t._v("Fiber")]),t._v(" Reconciler。")]),t._v(" "),a("p",[t._v("作为静态的数据结构来说,每个 "),a("code",[t._v("Fiber")]),t._v(" 节点对应一个 React element,保存了该组件的类型（函数组件/类组件/原生组件等等）、对应的 DOM 节点等信息。")]),t._v(" "),a("p",[t._v("作为动态的工作单元来说,每个 "),a("code",[t._v("Fiber")]),t._v(" 节点保存了本次更新中该组件改变的状态、要执行的工作。")]),t._v(" "),a("p",[t._v("每个 "),a("code",[t._v("Fiber")]),t._v(" 节点有个对应的 React element,多个 "),a("code",[t._v("Fiber")]),t._v(" 节点是如何连接形成树呢？靠如下三个属性：")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 指向父级Fiber节点")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("return "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 指向子Fiber节点")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("child "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 指向右边第一个兄弟Fiber节点")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sibling "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h2",{attrs:{id:"fiber-架构核心"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#fiber-架构核心"}},[t._v("#")]),t._v(" "),a("code",[t._v("Fiber")]),t._v(" 架构核心")]),t._v(" "),a("p",[a("code",[t._v("Fiber")]),t._v(" 架构可以分为三层：")]),t._v(" "),a("ul",[a("li",[t._v("Scheduler 调度器 —— 调度任务的优先级,高优任务优先进入 Reconciler")]),t._v(" "),a("li",[t._v("Reconciler 协调器 —— 负责找出变化的组件")]),t._v(" "),a("li",[t._v("Renderer 渲染器 —— 负责将变化的组件渲染到页面上")])]),t._v(" "),a("p",[t._v("相比 React15,React16 多了"),a("strong",[t._v("Scheduler（调度器）")]),t._v(",调度器的作用是调度更新的优先级。")]),t._v(" "),a("p",[t._v("在新的架构模式下,工作流如下：")]),t._v(" "),a("ul",[a("li",[t._v("每个更新任务都会被赋予一个优先级。")]),t._v(" "),a("li",[t._v("当更新任务抵达调度器时,高优先级的更新任务（记为 A）会更快地被调度进 Reconciler 层；")]),t._v(" "),a("li",[t._v("此时若有新的更新任务（记为 B）抵达调度器,调度器会检查它的优先级,若发现 B 的优先级高于当前任务 A,那么当前处于 Reconciler 层的 A 任务就会被中断,调度器会将 B 任务推入 Reconciler 层。")]),t._v(" "),a("li",[t._v("当 B 任务完成渲染后,新一轮的调度开始,之前被中断的 A 任务将会被重新推入 Reconciler 层,继续它的渲染之旅,即“可恢复”。")])]),t._v(" "),a("p",[a("strong",[a("code",[t._v("Fiber")]),t._v(' 架构的核心即是"可中断"、"可恢复"、"优先级"')])]),t._v(" "),a("h3",{attrs:{id:"scheduler-调度器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#scheduler-调度器"}},[t._v("#")]),t._v(" Scheduler 调度器")]),t._v(" "),a("p",[t._v("这个需要上面提到的"),a("code",[t._v("requestIdleCallback")]),t._v(",React 团队实现了功能更完备的 "),a("code",[t._v("requestIdleCallback")]),t._v(" polyfill,这就是 Scheduler。除了在空闲时触发回调的功能外,Scheduler 还提供了多种调度优先级供任务设置。")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://juejin.cn/post/6953804914715803678",target:"_blank",rel:"noopener noreferrer"}},[t._v("React Scheduler 为什么使用MessageChannel ？"),a("OutboundLink")],1)])]),t._v(" "),a("p",[t._v("React Scheduler 使用 MessageChannel 的原因为："),a("strong",[t._v("生成宏任务")]),t._v("，实现：")]),t._v(" "),a("ol",[a("li",[t._v("将主线程还给浏览器，以便浏览器更新页面。")]),t._v(" "),a("li",[t._v("浏览器更新页面后继续执行未完成的任务。")])]),t._v(" "),a("p",[a("strong",[t._v("为什么不使用微任务呢？")])]),t._v(" "),a("ol",[a("li",[t._v("微任务将在页面更新前全部执行完，所以达不到「将主线程还给浏览器」的目的。")])]),t._v(" "),a("p",[a("strong",[t._v("为什么不使用 "),a("code",[t._v("setTimeout(fn, 0)")]),t._v(" 呢？")])]),t._v(" "),a("ol",[a("li",[t._v("递归的 "),a("code",[t._v("setTimeout()")]),t._v(" 调用会使调用间隔变为 4ms，导致浪费了 4ms。")])]),t._v(" "),a("p",[a("strong",[t._v("为什么不使用 "),a("code",[t._v("rAF()")]),t._v(" 呢？")])]),t._v(" "),a("blockquote",[a("p",[t._v("不属于微任务也不属于宏任务，是属于任务。是一个在重绘之前执行的一个操作，而重绘操作一般是宏任务之前、微任务之后执行")])]),t._v(" "),a("ol",[a("li",[t._v("如果上次任务调度不是 "),a("code",[t._v("rAF()")]),t._v(" 触发的，将导致在当前帧更新前进行两次任务调度。")]),t._v(" "),a("li",[t._v("页面更新的时间不确定，如果浏览器间隔了 10ms 才更新页面，那么这 10ms 就浪费了。")])]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://juejin.cn/post/7007613737012035592",target:"_blank",rel:"noopener noreferrer"}},[t._v("React源码解析之Scheduler"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/facebook/react/blob/main/packages/scheduler/src/forks/Scheduler.js",target:"_blank",rel:"noopener noreferrer"}},[t._v("Scheduler 源码"),a("OutboundLink")],1)])]),t._v(" "),a("h3",{attrs:{id:"reconciler-协调器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#reconciler-协调器"}},[t._v("#")]),t._v(" Reconciler 协调器")]),t._v(" "),a("p",[t._v("在 React 15 中是递归处理虚拟 DOM 的,React 16 则是变成了可以中断的循环过程,每次循环都会调用"),a("code",[t._v("shouldYield")]),t._v("判断当前是否有剩余时间。")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("workLoopConcurrent")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Perform work until Scheduler asks us to yield")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("workInProgress "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("shouldYield")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// workInProgress表示当前工作进度的树。")]),t._v("\n    workInProgress "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("performUnitOfWork")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("workInProgress"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("React 16 是如何解决中断更新时 DOM 渲染不完全的问题呢？")]),t._v(" "),a("p",[t._v("在 React 16 中,"),a("code",[t._v("Reconciler")]),t._v("与"),a("code",[t._v("Renderer")]),t._v("不再是交替工作。当"),a("code",[t._v("Scheduler")]),t._v("将任务交给"),a("code",[t._v("Reconciler")]),t._v("后,"),a("code",[t._v("Reconciler")]),t._v("会为变化的虚拟 DOM 打上的标记。")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" Placement "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*             */")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0b0000000000010")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" Update "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*                */")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0b0000000000100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" PlacementAndUpdate "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*    */")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0b0000000000110")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" Deletion "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*              */")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0b0000000001000")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("ul",[a("li",[a("code",[t._v("Placement")]),t._v("表示插入操作")]),t._v(" "),a("li",[a("code",[t._v("PlacementAndUpdate")]),t._v("表示替换操作")]),t._v(" "),a("li",[a("code",[t._v("Update")]),t._v("表示更新操作")]),t._v(" "),a("li",[a("code",[t._v("Deletion")]),t._v("表示删除操作")])]),t._v(" "),a("p",[t._v("整个"),a("code",[t._v("Scheduler")]),t._v("与"),a("code",[t._v("Reconciler")]),t._v("的工作都在内存中进行,所以即使反复中断,用户也不会看见更新不完全的 DOM。只有当所有组件都完成"),a("code",[t._v("Reconciler")]),t._v("的工作,才会统一交给"),a("code",[t._v("Renderer")]),t._v("。")]),t._v(" "),a("h3",{attrs:{id:"renderer-渲染器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#renderer-渲染器"}},[t._v("#")]),t._v(" Renderer 渲染器")]),t._v(" "),a("p",[a("code",[t._v("Renderer")]),t._v("根据"),a("code",[t._v("Reconciler")]),t._v("为虚拟 DOM 打的标记,同步执行对应的 DOM 操作。")]),t._v(" "),a("h2",{attrs:{id:"fiber-架构对生命周期的影响"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#fiber-架构对生命周期的影响"}},[t._v("#")]),t._v(" "),a("code",[t._v("Fiber")]),t._v(" 架构对生命周期的影响")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d8eb7f64f3f94a9f8038949001284385~tplv-k3u1fbpfcp-watermark.image",alt:""}})]),t._v(" "),a("ol",[a("li",[t._v("render 阶段：纯净且没有副作用,可能会被 React 暂停、终止或重新启动。")]),t._v(" "),a("li",[t._v("pre-commit 阶段：可以读取 DOM。")]),t._v(" "),a("li",[t._v("commit 阶段：可以使用 DOM,运行副作用,安排更新。")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 第1阶段 render/reconciliation")]),t._v("\ncomponentWillMount"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ncomponentWillReceiveProps"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nshouldComponentUpdate"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ncomponentWillUpdate"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 第2阶段 commit")]),t._v("\ncomponentDidMount"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ncomponentDidUpdate"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ncomponentWillUnmount"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("其中 pre-commit 和 commit 从大阶段上来看都属于 commit 阶段。")]),t._v(" "),a("p",[t._v("在 render 阶段,React 主要是在内存中做计算,明确 DOM 树的更新点；而 commit 阶段,则负责把 render 阶段生成的更新真正地执行掉。")]),t._v(" "),a("p",[t._v("新老两种架构对 React 生命周期的影响主要在 render 这个阶段,这个影响是通过增加 Scheduler 层和改写 Reconciler 层来实现的。")]),t._v(" "),a("p",[t._v("在 render 阶段,一个庞大的更新任务被分解为了一个个的工作单元,这些工作单元有着不同的优先级,React 可以根据优先级的高低去实现工作单元的打断和恢复。")]),t._v(" "),a("p",[t._v("之前写过一篇文章关于为什么 React 一些旧生命周期函数打算废弃的原因："),a("a",{attrs:{href:"https://juejin.cn/post/6900703477480685582",target:"_blank",rel:"noopener noreferrer"}},[t._v("谈谈对 React 新旧生命周期的理解"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("而这次从 Firber 机制 render 阶段的角度看这三个生命周期,这三个生命周期的共同特点是都处于 render 阶段：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("componentWillMount\ncomponentWillUpdate\ncomponentWillReceiveProps\n\n")])])]),a("p",[t._v("由于 render 阶段是允许暂停、终止和重启的,这就导致 render 阶段的生命周期都有可能被重复执行,故也是废弃他们的原因之一。")]),t._v(" "),a("h2",{attrs:{id:"fiber-更新过程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#fiber-更新过程"}},[t._v("#")]),t._v(" "),a("code",[t._v("Fiber")]),t._v(" 更新过程")]),t._v(" "),a("p",[t._v("虚拟 DOM 更新过程分为 2 个阶段：")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("render/reconciliation 协调阶段(可中断/异步)")]),t._v("：通过 Diff 算法找出所有节点变更,例如节点新增、删除、属性变更等等, 获得需要更新的节点信息,对应早期版本的 Diff 过程。")]),t._v(" "),a("li",[a("strong",[t._v("commit 提交阶段(不可中断/同步)")]),t._v("：将需要更新的节点一次过批量更新,对应早期版本的 patch 过程。")])]),t._v(" "),a("h3",{attrs:{id:"协调阶段-reconciliation-render"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#协调阶段-reconciliation-render"}},[t._v("#")]),t._v(" 协调阶段 reconciliation/render")]),t._v(" "),a("p",[t._v("在协调阶段: 以 fiber tree 为蓝本，把每个 fiber 作为一个工作单元，自顶向下逐节点构造"),a("strong",[t._v("workInProgress tree")]),t._v("（构建中的新 fiber tree）")]),t._v(" "),a("p",[t._v("该阶段开始于"),a("code",[t._v("performSyncWorkOnRoot")]),t._v("或"),a("code",[t._v("performConcurrentWorkOnRoot")]),t._v("方法的调用。这取决于本次更新是同步更新还是异步更新。")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// performSyncWorkOnRoot会调用该方法")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("workLoopSync")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("workInProgress "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("performUnitOfWork")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("workInProgress"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// performConcurrentWorkOnRoot会调用该方法")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("workLoopConcurrent")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("workInProgress "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("shouldYield")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("performUnitOfWork")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("workInProgress"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("它们唯一的区别是是否调用"),a("code",[t._v("shouldYield")]),t._v("。如果当前浏览器帧没有剩余时间,"),a("code",[t._v("shouldYield")]),t._v("会中止循环,直到浏览器有空闲时间后再继续遍历。")]),t._v(" "),a("p",[a("code",[t._v("workInProgress")]),t._v("代表当前已创建的 workInProgress fiber。")]),t._v(" "),a("p",[a("code",[t._v("performUnitOfWork")]),t._v("方法将触发对 "),a("code",[t._v("beginWork")]),t._v(" 的调用,进而实现对新 "),a("code",[t._v("Fiber")]),t._v(" 节点的创建。若 "),a("code",[t._v("beginWork")]),t._v(" 所创建的 "),a("code",[t._v("Fiber")]),t._v(" 节点不为空,则 "),a("code",[t._v("performUniOfWork")]),t._v(" 会用这个新的 "),a("code",[t._v("Fiber")]),t._v(" 节点来更新 "),a("code",[t._v("workInProgress")]),t._v(" 的值,为下一次循环做准备。")]),t._v(" "),a("p",[t._v("通过循环调用 "),a("code",[t._v("performUnitOfWork")]),t._v(" 来触发 "),a("code",[t._v("beginWork")]),t._v(",新的 "),a("code",[t._v("Fiber")]),t._v(" 节点就会被不断地创建。当 "),a("code",[t._v("workInProgress")]),t._v(" 终于为空时,说明没有新的节点可以创建了,也就意味着已经完成对整棵 "),a("code",[t._v("Fiber")]),t._v(" 树的构建。")]),t._v(" "),a("p",[t._v("我们知道 "),a("code",[t._v("Fiber")]),t._v(" Reconciler 是从 Stack Reconciler 重构而来,通过遍历的方式实现可中断的递归,所以"),a("code",[t._v("performUnitOfWork")]),t._v('的工作可以分为两部分："递"和"归"。')]),t._v(" "),a("p",[a("strong",[t._v('"递阶段"')])]),t._v(" "),a("p",[t._v("首先从 rootFiber 开始向下深度优先遍历。为遍历到的每个 "),a("code",[t._v("Fiber")]),t._v(" 节点调用"),a("code",[t._v("beginWork")]),t._v("方法。")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("beginWork")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("current")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("Fiber")]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 当前组件对应的Fiber节点在上一次更新时的Fiber节点")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("workInProgress")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("Fiber")]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 当前组件对应的Fiber节点")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("renderExpirationTime")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" ExpirationTime "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 优先级相关")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("Fiber")]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...省略函数体")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),a("p",[t._v("该方法会根据传入的 "),a("code",[t._v("Fiber")]),t._v(" 节点创建子 "),a("code",[t._v("Fiber")]),t._v(" 节点,并将这两个 "),a("code",[t._v("Fiber")]),t._v(" 节点连接起来。")]),t._v(" "),a("p",[t._v('当遍历到叶子节点（即没有子组件的组件）时就会进入"归"阶段。')]),t._v(" "),a("p",[a("strong",[t._v('"归阶段"')])]),t._v(" "),a("p",[t._v('在"归"阶段会调用'),a("code",[t._v("completeWork")]),t._v("处理 "),a("code",[t._v("Fiber")]),t._v(" 节点。")]),t._v(" "),a("blockquote",[a("p",[t._v("completeWork 将根据 workInProgress 节点的 tag 属性的不同,进入不同的 DOM 节点的创建、处理逻辑。")])]),t._v(" "),a("p",[t._v("completeWork 内部有 3 个关键动作：")]),t._v(" "),a("ul",[a("li",[t._v("创建 DOM 节点（CreateInstance）")]),t._v(" "),a("li",[t._v("将 DOM 节点插入到 DOM 树中（AppendAllChildren）")]),t._v(" "),a("li",[t._v("为 DOM 节点设置属性（FinalizeInitialChildren）")])]),t._v(" "),a("p",[t._v("当某个 "),a("code",[t._v("Fiber")]),t._v(" 节点执行完"),a("code",[t._v("completeWork")]),t._v(",如果其存在兄弟 "),a("code",[t._v("Fiber")]),t._v(" 节点（即"),a("code",[t._v("fiber.sibling !== null")]),t._v("）,会进入其兄弟 "),a("code",[t._v("Fiber")]),t._v(' 的"递"阶段。')]),t._v(" "),a("p",[t._v("如果不存在兄弟 Fiber,会进入父级 "),a("code",[t._v("Fiber")]),t._v(' 的"归"阶段。')]),t._v(" "),a("p",[t._v('"递"和"归"阶段会交错执行直到"归"到 rootFiber。至此,协调阶段的工作就结束了。')]),t._v(" "),a("h3",{attrs:{id:"commit-提交阶段"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#commit-提交阶段"}},[t._v("#")]),t._v(" commit 提交阶段")]),t._v(" "),a("p",[t._v("commit 阶段的主要工作（即 Renderer 的工作流程）分为三部分：")]),t._v(" "),a("ul",[a("li",[t._v("before mutation 阶段,这个阶段 DOM 节点还没有被渲染到界面上去,过程中会触发 "),a("code",[t._v("getSnapshotBeforeUpdate")]),t._v(",也会处理 "),a("code",[t._v("useEffect")]),t._v(" 钩子相关的调度逻辑。")]),t._v(" "),a("li",[t._v("mutation 阶段,这个阶段负责 DOM 节点的渲染。在渲染过程中,会遍历 effectList,根据 flags（effectTag）的不同,执行不同的 DOM 操作。")]),t._v(" "),a("li",[t._v("layout 阶段,这个阶段处理 DOM 渲染完毕之后的收尾逻辑。比如调用 "),a("code",[t._v("componentDidMount/componentDidUpdate")]),t._v(",调用 "),a("code",[t._v("useLayoutEffect")]),t._v(" 钩子函数的回调等。除了这些之外,它还会把 fiberRoot 的 current 指针指向 workInProgress "),a("code",[t._v("Fiber")]),t._v(" 树。")])]),t._v(" "),a("h2",{attrs:{id:"fiber-tree-与-workinprogress-tree"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#fiber-tree-与-workinprogress-tree"}},[t._v("#")]),t._v(" Fiber tree 与 workInProgress tree")]),t._v(" "),a("p",[t._v("双缓冲技术（double buffering），就像"),a("a",{attrs:{href:"http://www.ayqy.net/blog/redux%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/#articleHeader7",target:"_blank",rel:"noopener noreferrer"}},[t._v("redux 里的"),a("code",[t._v("nextListeners")]),a("OutboundLink")],1),t._v("，以 fiber tree 为主，workInProgress tree 为辅")]),t._v(" "),a("p",[t._v("双缓冲具体指的是"),a("code",[t._v("workInProgress tree")]),t._v("构造完毕，得到的就是新的"),a("code",[t._v("fiber tree")]),t._v("，然后喜新厌旧（把 current 指针指向 workInProgress tree，丢掉旧的 fiber tree）就好了")]),t._v(" "),a("p",[t._v("这样做的好处：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("能够复用内部对象（fiber）")])]),t._v(" "),a("li",[a("p",[t._v("节省内存分配、GC 的时间开销")])])]),t._v(" "),a("p",[t._v("每个 fiber 上都有个"),a("code",[t._v("alternate")]),t._v("属性，也指向一个 fiber，创建 "),a("code",[t._v("workInProgress")]),t._v(" 节点时优先取"),a("code",[t._v("alternate")]),t._v("，没有的话就创建一个：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" workInProgress "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" current"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("alternate"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("workInProgress "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//...这里很有意思")]),t._v("\n  workInProgress"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("alternate "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" current"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  current"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("alternate "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" workInProgress"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// We already have an alternate.")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Reset the effect tag.")]),t._v("\n  workInProgress"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("effectTag "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" NoEffect"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// The effect list is no longer valid.")]),t._v("\n  workInProgress"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("nextEffect "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  workInProgress"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("firstEffect "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  workInProgress"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lastEffect "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("如注释指出的，fiber 与 workInProgress 互相持有引用，“喜新厌旧”之后，旧 fiber 就作为新 fiber 更新的"),a("em",[t._v("预留空间")]),t._v("，达到复用 fiber 实例的目的")]),t._v(" "),a("p",[t._v("P.S.源码里还有一些有意思的技巧，比如"),a("a",{attrs:{href:"http://makersden.io/blog/look-inside-fiber/#side-effect-tags-types-of-side-effects",target:"_blank",rel:"noopener noreferrer"}},[t._v("tag 的位运算"),a("OutboundLink")],1)]),t._v(" "),a("h2",{attrs:{id:"优先级策略"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#优先级策略"}},[t._v("#")]),t._v(" 优先级策略")]),t._v(" "),a("p",[t._v("每个工作单元运行时有 6 种优先级：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("synchronous 与之前的 Stack reconciler 操作一样，同步执行")])]),t._v(" "),a("li",[a("p",[t._v("task 在 next tick 之前执行")])]),t._v(" "),a("li",[a("p",[t._v("animation 下一帧之前执行")])]),t._v(" "),a("li",[a("p",[t._v("high 在不久的将来立即执行")])]),t._v(" "),a("li",[a("p",[t._v("low 稍微延迟（"),a("code",[t._v("100-200ms")]),t._v("）执行也没关系")])]),t._v(" "),a("li",[a("p",[t._v("offscreen 下一次 render 时或 scroll 时才执行")])])]),t._v(" "),a("p",[t._v("synchronous 首屏（首次渲染）用，要求尽量快，不管会不会阻塞 UI 线程。"),a("strong",[t._v("animation 通过"),a("code",[t._v("requestAnimationFrame")]),t._v("来调度")]),t._v("，这样在下一帧就能立即开始动画过程；后 3 个都是由"),a("code",[t._v("requestIdleCallback")]),t._v("回调执行的；offscreen 指的是当前隐藏的、屏幕外的（看不见的）元素")]),t._v(" "),a("p",[t._v("高优先级的比如键盘输入（希望立即得到反馈），低优先级的比如网络请求，让评论显示出来等等。另外，"),a("em",[t._v("紧急的事件允许插队")])]),t._v(" "),a("p",[t._v("这样的优先级机制存在"),a("em",[t._v("2 个问题")]),t._v("：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("生命周期函数怎么执行（可能被频频中断）：触发顺序、次数没有保证了")])]),t._v(" "),a("li",[a("p",[t._v("starvation（低优先级饿死）：如果高优先级任务很多，那么低优先级任务根本没机会执行（就饿死了）")])])]),t._v(" "),a("p",[t._v("生命周期函数的问题有一个官方例子：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("low "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("A")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("componentWillUpdate")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("\nhigh "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("B")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("componentWillUpdate")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("componentDidUpdate")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("\nrestart low "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("A")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("componentWillUpdate")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("componentDidUpdate")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),a("p",[t._v("第 1 个问题正在解决（还没解决），生命周期的问题会破坏一些现有 App，给平滑升级带来困难，Fiber 团队正在努力寻找优雅的升级途径")]),t._v(" "),a("p",[t._v("第 2 个问题通过尽量复用已完成的操作（reusing work where it can）来缓解，听起来也是正在想办法解决")]),t._v(" "),a("p",[t._v("这两个问题本身不太好解决，只是解决到什么程度的问题。比如第一个问题，如果组件生命周期函数掺杂副作用太多，就没有办法无伤解决。这些问题虽然会给升级 Fiber 带来一定阻力，但绝不是不可解的（退一步讲，如果新特性有足够的吸引力，第一个问题大家自己想办法就解决了）")]),t._v(" "),a("h2",{attrs:{id:"fiber-reconciliation-阶段中的-diff-算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#fiber-reconciliation-阶段中的-diff-算法"}},[t._v("#")]),t._v(" "),a("code",[t._v("Fiber")]),t._v(" reconciliation 阶段中的 diff 算法")]),t._v(" "),a("p",[t._v("React16 的 diff 策略采用从链表头部开始比较的算法，是"),a("strong",[t._v("层次遍历")]),t._v("，算法是建立在一个节点的插入、删除、移动等操作都是在节点树的"),a("strong",[t._v("同一层级")]),t._v("中进行的。")]),t._v(" "),a("p",[t._v("对于 Diff， 新老节点的对比，我们以新节点为标准，然后来构建整个"),a("code",[t._v("currentInWorkProgress")]),t._v("，对于新的 children 会有四种情况:")]),t._v(" "),a("ul",[a("li",[t._v("TextNode(包含字符串和数字)")]),t._v(" "),a("li",[t._v("单个 React Element(通过该节点是否有 "),a("code",[t._v("$$typeof")]),t._v(" 区分)")]),t._v(" "),a("li",[t._v("数组")]),t._v(" "),a("li",[t._v("可迭代的 children，跟数组的处理方式差不多")])]),t._v(" "),a("h3",{attrs:{id:"代码部分"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#代码部分"}},[t._v("#")]),t._v(" 代码部分")]),t._v(" "),a("p",[a("code",[t._v("reconcileChildFibers")]),t._v(" 就是 Diff 部分的主体代码，这个函数超级长，是一个包装函数，下面所有的 diff 代码都在这里面;")]),t._v(" "),a("p",[a("strong",[t._v("参数介绍")])]),t._v(" "),a("ul",[a("li",[a("code",[t._v("returnFiber")]),t._v(" 是即将 Diff 的这层的父节点。")]),t._v(" "),a("li",[a("code",[t._v("currentFirstChild")]),t._v("是当前层的第一个 Fiber 节点。")]),t._v(" "),a("li",[a("code",[t._v("newChild")]),t._v(" 是即将更新的 vdom 节点(可能是 TextNode、可能是 ReactElement，可能是数组)，不是 Fiber 节点")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("reconcileChildFibers")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token parameter"}},[a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("returnFiber")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Fiber"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("currentFirstChild")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Fiber "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("newChild")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" any"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("lanes")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Lanes")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Fiber "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" isUnkeyedTopLevelFragment "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" newChild "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"object"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v("\n    newChild "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v("\n    newChild"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("type "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("REACT_FRAGMENT_TYPE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v("\n    newChild"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("isUnkeyedTopLevelFragment"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    newChild "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" newChild"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("props"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("children"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Handle object types")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" isObject "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" newChild "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"object"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" newChild "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("isObject"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 省略，此处为React Elementlei'x")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果是文本类型的则进行文本节点的diff")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" newChild "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"string"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" newChild "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"number"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("placeSingleChild")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("reconcileSingleTextNode")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n        returnFiber"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        currentFirstChild"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" newChild"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        lanes\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如 果是十足类型的")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("isArray")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("newChild"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("reconcileChildrenArray")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n      returnFiber"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      currentFirstChild"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      newChild"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      lanes\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getIteratorFn")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("newChild"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("reconcileChildrenIterator")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n      returnFiber"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      currentFirstChild"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      newChild"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      lanes\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 更新删除掉了所有节点，执行删除")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("deleteRemainingChildren")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("returnFiber"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" currentFirstChild"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h4",{attrs:{id:"针对文本节点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#针对文本节点"}},[t._v("#")]),t._v(" 针对文本节点")]),t._v(" "),a("ol",[a("li",[a("p",[a("strong",[t._v("第一种情况。xxx 是一个 TextNode，那么就代表这这个节点可以复用，有复用的节点，对性能优化很有帮助")]),t._v("。既然新的 child 只有一个 TextNode，那么复用节点之后，就把剩下的 节点就可以删掉了，那么 div 的 child 就可以添加到 workInProgress 中去了;")])]),t._v(" "),a("li",[a("p",[t._v("第二种情况。当前节点 不是一个 TextNode，那么就代表这个节点不能复用，所以就从 currentFirstChild 开始删掉剩余的节点;")])])]),t._v(" "),a("blockquote",[a("p",[t._v("注意：删除节点不会真的从链表里面把节点删除，只是打一个 delete 的 tag，当 commit 的时候才会真正的去删除。")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("reconcileSingleTextNode")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Fiber "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//旧的节点也是一个 text节点 则可以复用")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("currentFirstChild "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" currentFirstChild"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("tag "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" HostText"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//删除兄弟")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("deleteRemainingChildren")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("returnFiber"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" currentFirstChild"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sibling"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//复用")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" existing "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("useFiber")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("currentFirstChild"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" textContent"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    existing"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("return "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" returnFiber"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" existing"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 否则创建新的fiber节点，将旧的节点和旧节点的兄弟都删除")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("deleteRemainingChildren")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("returnFiber"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" currentFirstChild"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" created "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("createFiberFromText")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  created"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("return "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" returnFiber"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" created"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),a("h4",{attrs:{id:"针对-react-element"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#针对-react-element"}},[t._v("#")]),t._v(" 针对 React Element")]),t._v(" "),a("p",[t._v("**如何判断这个节点是否可以复用呢？**从哪个下面的代码可以看出:")]),t._v(" "),a("ol",[a("li",[t._v("key 相同。")]),t._v(" "),a("li",[t._v("节点的类型相同。")])]),t._v(" "),a("p",[t._v("如果以上两点相同，就代表这个节点只是变化了内容，不需要创建新的节点，可以复用的。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("reconcileSingleElement")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token parameter"}},[a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("returnFiber")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Fiber"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("currentFirstChild")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Fiber "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("element")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" ReactElement"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("lanes")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Lanes")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Fiber "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" key "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" element"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" child "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" currentFirstChild"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//初始渲染这个currentFirstChild直接传的null，所以更新时候才会diff")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("child "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// TODO: If key === null and child.key === null, then this only applies to")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// the first item in the list.")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("child"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" elementType "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" element"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("type"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("elementType "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("REACT_FRAGMENT_TYPE")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("child"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("tag "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" Fragment"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 相同的老的节点的兄弟节点清空  为了本次可以复用")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("deleteRemainingChildren")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("returnFiber"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" child"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sibling"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果是fragment复用的是children,对于 Fragment 节点和一般的 Element 节点创建的方式不同，因为 Fragment 本来就是一个无意义的节点，他真正需要创建 Fiber 的是它的 children，而不是它自己")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" existing "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("useFiber")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("child"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" element"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("props"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("children"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n          existing"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("return "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" returnFiber"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" existing"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果类型相同")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n          child"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("elementType "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" elementType "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("enableLazyElements "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" elementType "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"object"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v("\n            elementType "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v("\n            elementType"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("$$"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("REACT_LAZY_TYPE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("resolveLazy")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("elementType"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" child"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("type"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 相同的老的节点的兄弟节点清空  为了本次可以复用")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("deleteRemainingChildren")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("returnFiber"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" child"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sibling"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" existing "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("useFiber")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("child"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" element"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("props"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n          existing"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ref "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("coerceRef")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("returnFiber"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" child"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" element"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n          existing"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("return "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" returnFiber"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" existing"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// key相同但是节点类型不同，无法复用并且兄弟节点也不可复用，全部删除")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("deleteRemainingChildren")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("returnFiber"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" child"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// key都不相同 则无法服用，但是其兄弟可能还会复用上次的")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("deleteChild")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("returnFiber"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" child"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//既然是单个节点的调和  为何还用while遍历所有兄弟节点呢？")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n     * old: a b\n     * new: b\n     * 如果老节点存在兄弟节点（老节点和新节点不一致），刚好和现在的节点类型一致，这样也可复用\n     */")]),t._v("\n    child "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" child"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sibling"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//上面如果执行完没有可复用的 则进入这里进行创建,对于 Fragment 节点和一般的 Element 节点创建的方式不同，因为 Fragment 本来就是一个无意义的节点，他真正需要创建 Fiber 的是它的 children，而不是它自己，所以 createFiberFromFragment 传递的不是 element，而是 element.props.children")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("type "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("REACT_FRAGMENT_TYPE")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" created "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("createFiberFromFragment")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n      element"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("props"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("children"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      returnFiber"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("mode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      lanes"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      element"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    created"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("return "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" returnFiber"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" created"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" created "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("createFiberFromElement")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" returnFiber"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("mode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" lanes"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    created"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ref "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("coerceRef")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("returnFiber"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" currentFirstChild"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" element"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    created"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("return "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" returnFiber"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" created"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("单个节点的复用逻辑比较清晰，初次渲染直接 "),a("code",[t._v("created")]),t._v("，"),a("strong",[t._v("更新时判断 "),a("code",[t._v("key")]),t._v(" 是否一致，再判断节点类型是否一致，如果条件满足则复用旧的节点")]),t._v("。不满足时稍微复杂一些，有如下三个注意点：")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("key 相同但 type 不同")]),t._v("代表更新的单个节点和旧的节点（以及旧节点的兄弟节点）肯定无法复用了，所以执行的方式是删除旧的和兄弟节点("),a("code",[t._v("deleteRemainingChildren")]),t._v(")。")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("old")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("    div "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" p p p\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("    div "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" span\n\n")])])]),a("ul",[a("li",[a("strong",[t._v("key 不同")]),t._v(" :代表更新的单个节点和旧的某个节点无法复用，但是有可能旧的兄弟节点可被复用，所以执行的方式是只删除旧的节点("),a("code",[t._v("deleteChild")]),t._v(")。")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("old")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" p1  p2  p3\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" p2\n\n")])])]),a("ul",[a("li",[a("strong",[t._v("while 循环")]),t._v(": 通过上面整个例子可以知道为何单个节点还要遍历，这就是 "),a("code",[t._v("react")]),t._v(" 的一种优化措施，"),a("code",[t._v("key")]),t._v(" 不同，但是有可能兄弟节点还是可复用的，所以继续 "),a("code",[t._v("child.sibling")])])]),t._v(" "),a("h4",{attrs:{id:"diff-array-的比较"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#diff-array-的比较"}},[t._v("#")]),t._v(" Diff Array 的比较")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://ask.qcloudimg.com/http-save/yehe-1210525/wuayf36g9t.jpeg?imageView2/2/w/1620",alt:""}})]),t._v(" "),a("p",[a("strong",[t._v("1. 第一次循环: 相同位置(index)进行比较")])]),t._v(" "),a("p",[t._v("这是第一次遍历新数组，通过调用 "),a("code",[t._v("updateSlot")]),t._v(" 来对比新老元素，对比新老节点的代码都是在这个函数里。这个循环会把所有的从前面开始能复用的节点，都复用到。比如上面我们画的图，如果两个链表里面的 **？？？**节点，不相同，那么 newFiber 为 null，这个循环就会跳出。")]),t._v(" "),a("p",[t._v("跳出来了，就会有两种情况。")]),t._v(" "),a("ul",[a("li",[t._v("新节点已经遍历完毕")]),t._v(" "),a("li",[t._v("老节点已经遍历完毕")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 第一次遍历的代码:")]),t._v("\n\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//第一次遍历  同位置的比较")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" oldFiber "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" newIdx "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" newChildren"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" newIdx"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("oldFiber"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("index "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" newIdx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// oldFiber在本循环的最下面会被赋值为 nextOldFiber，不断的寻找兄弟节点")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//[null, a] => [b, a]")]),t._v("\n    nextOldFiber "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" oldFiber"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    oldFiber "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//正常的情况下 为了下轮循环，拿到兄弟节点下面赋值给oldFiber")]),t._v("\n    nextOldFiber "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" oldFiber"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sibling"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//这里面根据key 判断是否可以复用节点（准确的说，有可能节点类型会不同，其他属性和值相同）")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" newFiber "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("updateSlot")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//节点无法复用 跳出循环 下方详解")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("newFiber "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("oldFiber "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      oldFiber "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" nextOldFiber"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//更新")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("shouldTrackSideEffects"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("oldFiber "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" newFiber"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("alternate "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//删除，下方详解")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("deleteChild")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("returnFiber"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" oldFiber"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//本次遍历会给新增的节点打 插入的标记")]),t._v("\n  lastPlacedIndex "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("placeChild")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("newFiber"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" lastPlacedIndex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" newIdx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//重新给 oldFiber 赋值继续遍历")]),t._v("\n  oldFiber "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" nextOldFiber"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n\n")])])]),a("p",[a("strong",[t._v("2. 新节点已经遍历完毕(节点删除情况)")])]),t._v(" "),a("p",[t._v("如果新节点已经遍历完毕的话，也就是没有要更新的了，这种情况一般就是从原来的数组里面删除了元素，那么直接把剩下的老节点删除了就行了。还是拿上面的图的例子举例，老的链表里？？？还有很多节点，而新的链表？？？已经没有节点了，所以老的链表？？？不管是有多少节点，都不能复用了，所以没用了，直接删除。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("newIdx "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" newChildren"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 新的 children 长度已经够了，所以把剩下的删除掉")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("deleteRemainingChildren")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("returnFiber"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" oldFiber"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" resultingFirstChild"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("注意这里是直接 "),a("code",[t._v("return")]),t._v(" 了哦，没有继续往下执行了。")]),t._v(" "),a("p",[a("strong",[t._v("3. 老节点已经遍历完毕(节点新增情况)")])]),t._v(" "),a("p",[t._v("如果老的节点在第一次循环的时候就被复用完了，新的节点还有，很有可能就是新增了节点的情况。那么这个时候只需要根据把剩余新的节点直接创建 "),a("strong",[t._v("Fiber")]),t._v(" 就行了。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("oldFiber "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果老的节点已经被复用完了，对剩下的新节点进行操作")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" newIdx "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" newChildren"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" newIdx"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" newFiber "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("createChild")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("returnFiber"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" newChildren"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("newIdx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" lanes"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" resultingFirstChild"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[a("code",[t._v("oldFiber === null")]),t._v(" 就是用来判断老的 Fiber 节点变量完了的代码，Fiber 链表是一个单向链表，所以为 null 的时候代表已经结束了。所以就直接把剩余的 newChild 通过循环创建 Fiber。")]),t._v(" "),a("p",[t._v("到这里，目前简单的对数组进行增、删节点的对比还是比较简单，接下来就是移动的情况是如何进行复用的呢")]),t._v(" "),a("p",[a("strong",[t._v("4. 移动的情况如何进行节点复用(节点修改)")])]),t._v(" "),a("p",[t._v("对于移动的情况，首先要思考，怎么能判断数组是否发生过移动操作呢？")]),t._v(" "),a("p",[t._v("如果给你两个数组，你是否能判断出来数组是否发生过移动。")]),t._v(" "),a("p",[t._v("答案是：老的数组和新的数组里面都有这个元素，而且位置不相同。")]),t._v(" "),a("p",[t._v("从两个数组中找到相同元素(是指可复用的节点)，方法有很多种，来看看 React 是如何高效的找出来的。")]),t._v(" "),a("p",[a("strong",[t._v("把所有老数组元素按 key 或者是 index 放 Map 里，然后遍历新数组，根据新数组的 key 或者 index 看看是否存在相同的 key 或者 index 标识的旧节点")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("mapRemainingChildren")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token parameter"}},[a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("returnFiber")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Fiber"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("currentFirstChild")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Fiber")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Map"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("string "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" number"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Fiber"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("existingChildren")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Map"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("string "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" number"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Fiber"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Map")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" existingChild "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" currentFirstChild"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// currentFirstChild 是老数组链表的第一个元素")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("existingChild "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 看到这里可能会疑惑怎么在 Map 里面的key 是 fiber 的key 还是 fiber 的 index 呢？")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 我觉得是根据数据类型，fiber 的key 是字符串，而 index 是数字，这样就能区分了")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 所以这里是用的 map，而不是对象，如果是对象的key 就不能区分 字符串类型和数字类型了。")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("existingChild"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      existingChildren"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("set")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("existingChild"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" existingChild"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      existingChildren"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("set")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("existingChild"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("index"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" existingChild"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 兄弟节点挨个遍历")]),t._v("\n    existingChild "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" existingChild"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sibling"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" existingChildren"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("这个 "),a("code",[t._v("mapRemainingChildren")]),t._v(" 就是将老数组存放到 Map 里面。元素有 key 就 Map 的键就存 key，没有 key 就存 index，key 一定是字符串，index 一定是 number，所以取的时候是能区分的，所以这里用的是 Map，而不是对象，如果是对象，属性是字符串，就没办法区别是 key 还是 index 了。")]),t._v(" "),a("p",[t._v("现在有了这个 Map，剩下的就是循环新数组，找到 Map 里面可以复用的节点，如果找不到就创建，这个逻辑基本上跟 "),a("code",[t._v("updateSlot")]),t._v(" 的复用逻辑很像，一个是从老数组链表中获取节点对比，一个是从 Map 里获取节点对比。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果前面的算法有复用，那么 newIdx 就不从 0 开始")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" newIdx "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" newChildren"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" newIdx"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" newFiber "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("updateFromMap")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这里正常情况下会返回值  复用或新创建 和updateSlot不同")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("newFiber "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("shouldTrackSideEffects"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("newFiber"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("alternate "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 新的节点是复用老节点  从Map对象中删除旧节点值")]),t._v("\n        existingChildren"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("delete")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n          newFiber"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" newIdx "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" newFiber"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 更新index 判定哪些节点需要被标记 插入effectTag")]),t._v("\n    lastPlacedIndex "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("placeChild")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("newFiber"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" lastPlacedIndex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" newIdx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("previousNewFiber "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//返回时候只需要返回自己   因为兄弟节点都挂载到自己身上了")]),t._v("\n      resultingFirstChild "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" newFiber"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//不停的给自己追加兄弟 a---\x3eb---\x3ec---\x3ed")]),t._v("\n      previousNewFiber"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sibling "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" newFiber"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    previousNewFiber "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" newFiber"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("shouldTrackSideEffects"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//旧节点中还存在，没法被复用  这里需要遍历删除")]),t._v("\n  existingChildren"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("forEach")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("child")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("deleteChild")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("returnFiber"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" child"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 只需要返回第一个节点即可   后面兄弟通过 slibling连接")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" resultingFirstChild"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n")])])]),a("p",[t._v("到这里新数组遍历完毕，也就是"),a("strong",[t._v("同一层")]),t._v("的 Diff 过程完毕，接下来进行总结一下:")]),t._v(" "),a("p",[t._v("对于数组的 diff 策略，相对比较复杂，最后来梳理一下这个策略，其实还是很简单，只是看源码的时候比较难懂。")]),t._v(" "),a("p",[t._v("我们可以把整个过程分为三个阶段：")]),t._v(" "),a("ol",[a("li",[t._v("第一遍历新数组，新老数组相同 index 进行对比，通过 "),a("code",[t._v("updateSlot")]),t._v("方法找到可以复用的节点，直到找到不可以复用的节点就退出循环。")]),t._v(" "),a("li",[t._v("第一遍历完之后，删除剩余的老节点，追加剩余的新节点的过程: "),a("strong",[t._v("如果是新节点已遍历完成，就将剩余的老节点批量删除；如果是老节点遍历完成仍有新节点剩余，则将新节点直接插入")]),t._v("。如果有删除/新增则直接返回，不进行下一个步骤.")]),t._v(" "),a("li",[t._v("(非新增/删除的情况)即移动的情况: 把所有老数组元素按 key 或 index 放 Map 里，然后遍历新数组，插入老数组的元素，这是移动的情况。")])]),t._v(" "),a("h3",{attrs:{id:"diff-总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#diff-总结"}},[t._v("#")]),t._v(" diff 总结")]),t._v(" "),a("ol",[a("li",[a("strong",[t._v("针对文本节点")])])]),t._v(" "),a("ul",[a("li",[a("p",[a("strong",[t._v("第一种情况。旧节点是一个 TextNode，那么就代表这这个节点可以复用，有复用的节点，对性能优化很有帮助")]),t._v("。既然新的 child 只有一个 TextNode，那么复用节点之后，就把剩下的 节点就可以删掉了，那么 div 的 child 就可以添加到 workInProgress 中去了;")])]),t._v(" "),a("li",[a("p",[t._v("第二种情况: 旧节点 不是一个 TextNode，那么就代表这个节点不能复用，所以就从 currentFirstChild 开始删掉剩余的节点;")])])]),t._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[a("strong",[t._v("针对 React 节点")])])]),t._v(" "),a("ul",[a("li",[a("p",[t._v("初次渲染直接 "),a("code",[t._v("created")]),t._v("，"),a("strong",[t._v("更新时判断 "),a("code",[t._v("key")]),t._v(" 是否一致，再判断节点类型是否一致，如果条件满足则复用旧的节点")]),t._v("。不满足时稍微复杂一些;")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("key 相同但 type 不同")]),t._v("代表更新的单个节点和旧的节点（以及旧节点的兄弟节点）肯定无法复用了，所以执行的方式是删除旧的和兄弟节点("),a("code",[t._v("deleteRemainingChildren")]),t._v(")。")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("key 不同")]),t._v(" :代表更新的单个节点和旧的某个节点无法复用，但是有可能旧的兄弟节点可被复用，所以执行的方式是只删除旧的节点("),a("code",[t._v("deleteChild")]),t._v(")。")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("while 循环")]),t._v(": 查看兄弟节点是否可以复用;")])])]),t._v(" "),a("ol",{attrs:{start:"3"}},[a("li",[a("strong",[t._v("针对列表")])])]),t._v(" "),a("ul",[a("li",[t._v("第一遍历新数组，新老数组相同 index 进行对比，通过 "),a("code",[t._v("updateSlot")]),t._v("方法找到可以复用的节点，直到找到不可以复用的节点就退出循环。")]),t._v(" "),a("li",[t._v("第一遍历完之后，删除剩余的老节点，追加剩余的新节点的过程: "),a("strong",[t._v("如果是新节点已遍历完成，就将剩余的老节点批量删除；如果是老节点遍历完成仍有新节点剩余，则将新节点直接插入")]),t._v("。如果有删除/新增则直接返回，不进行下一个步骤.")]),t._v(" "),a("li",[t._v("(非新增/删除的情况)即移动的情况: 把所有老数组元素按 key 或 index 放 Map 里，然后遍历新数组，插入老数组的元素，这是移动的情况。")])]),t._v(" "),a("h2",{attrs:{id:"fiber总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#fiber总结"}},[t._v("#")]),t._v(" "),a("code",[t._v("Fiber")]),t._v("总结")]),t._v(" "),a("h3",{attrs:{id:"如何解决主线程长时间占用问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何解决主线程长时间占用问题"}},[t._v("#")]),t._v(" 如何解决主线程长时间占用问题?")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("问题描述:\nReact 在一些响应体验要求较高的场景不适用，比如动画，布局和手势;根本原因是渲染/更新过程一旦开始无法中断，持续占用主线程，主线程忙于执行 JS，无暇他顾（布局、动画），造成掉帧、延迟响应（甚至无响应）等不佳体验")])]),t._v(" "),a("p",[t._v("求: 一种能够彻底解决主线程长时间占用问题的机制，不仅能够应对眼前的问题，还要有长远意义")]),t._v(" "),a("blockquote",[a("p",[t._v("The “fiber” reconciler is a new effort aiming to resolve the problems inherent in the stack reconciler and fix a few long-standing issues.")])]),t._v(" "),a("p",[a("strong",[t._v("解决方案")])]),t._v(" "),a("p",[a("strong",[t._v("把渲染/更新过程拆分为小块任务，通过合理的调度机制来控制时间（更细粒度、更强的控制力）")])]),t._v(" "),a("p",[t._v("那么，面临 5 个子问题：")]),t._v(" "),a("h3",{attrs:{id:"_1-拆什么-什么不能拆"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-拆什么-什么不能拆"}},[t._v("#")]),t._v(" 1. 拆什么？什么不能拆？")]),t._v(" "),a("p",[t._v("把渲染/更新过程分为 2 个阶段（diff + patch）：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("diff "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("~")]),t._v(" render"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("reconciliation\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("patch "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("~")]),t._v(" commit\n\n")])])]),a("p",[a("code",[t._v("diff")]),t._v(" 的实际工作是对比"),a("code",[t._v("prevInstance")]),t._v("和"),a("code",[t._v("nextInstance")]),t._v("的状态，找出差异及其对应的 DOM change。diff 本质上是一些计算（遍历、比较），是可拆分的（算一半待会儿接着算）")]),t._v(" "),a("p",[a("code",[t._v("patch")]),t._v(" 阶段把本次更新中的所有 "),a("code",[t._v("DOM change")]),t._v(" 应用到 DOM 树，是一连串的 DOM 操作。这些 DOM 操作虽然看起来也可以拆分（按照 change list 一段一段做），但这样做一方面可能造成 DOM 实际状态与维护的内部状态不一致，另外还会影响体验。而且，一般场景下，DOM 更新的耗时比起 diff 及生命周期函数耗时不算什么，拆分的意义不很大")]),t._v(" "),a("p",[t._v("所以，"),a("strong",[a("code",[t._v("render/reconciliation")]),t._v(" "),a("code",[t._v("阶段的工作（diff）可以拆分，commit")]),t._v(" 阶段的工作（patch）不可拆分")])]),t._v(" "),a("p",[a("strong",[t._v("P.S.")]),t._v(" diff 与 reconciliation 只是对应关系，并不等价，如果非要区分的话，reconciliation 包括 diff：")]),t._v(" "),a("blockquote",[a("p",[t._v("This is a part of the process that React calls reconciliation which starts when you call ReactDOM.render() or setState(). By the end of the reconciliation, React knows the result DOM tree, and a renderer like react-dom or react-native applies the minimal set of changes necessary to update the DOM nodes (or the platform-specific views in case of React Native).")])]),t._v(" "),a("p",[t._v("（引自"),a("a",{attrs:{href:"https://reactjs.org/blog/2015/12/18/react-components-elements-and-instances.html#top-down-reconciliation",target:"_blank",rel:"noopener noreferrer"}},[t._v("Top-Down Reconciliation"),a("OutboundLink")],1),t._v("）")]),t._v(" "),a("h3",{attrs:{id:"_2-怎么拆"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-怎么拆"}},[t._v("#")]),t._v(" 2. 怎么拆？")]),t._v(" "),a("p",[t._v("先凭空乱来几种 diff 工作拆分方案：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("按组件结构拆。不好分，无法预估各组件更新的工作量")])]),t._v(" "),a("li",[a("p",[t._v("按实际工序拆。比如分为"),a("code",[t._v("getNextState(), shouldUpdate(), updateState(), checkChildren()")]),t._v("再穿插一些生命周期函数")])])]),t._v(" "),a("p",[t._v("按组件拆太粗，显然对大组件不太公平。按工序拆太细，任务太多，频繁调度不划算。那么有没有合适的拆分单位？")]),t._v(" "),a("p",[t._v("有。Fiber 的拆分单位是 fiber（fiber tree 上的一个节点），实际上就是"),a("em",[t._v("按虚拟 DOM 节点拆")]),t._v("，因为 fiber tree 是根据 vDOM tree 构造出来的，树结构一模一样，只是节点携带的信息有差异")]),t._v(" "),a("p",[t._v("所以，实际上是 vDOM node 粒度的拆分（以 fiber 为工作单元），每个组件实例和每个 DOM 节点抽象表示的实例都是一个工作单元。工作循环中，每次处理一个 fiber，处理完可以中断/挂起整个工作循环")]),t._v(" "),a("h3",{attrs:{id:"_3-如何调度任务"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-如何调度任务"}},[t._v("#")]),t._v(" 3. 如何调度任务？")]),t._v(" "),a("p",[t._v("分 2 部分：")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("工作循环")])]),t._v(" "),a("li",[a("strong",[t._v("优先级机制")])])]),t._v(" "),a("p",[t._v("工作循环是"),a("em",[t._v("基本的任务调度机制")]),t._v("，工作循环中每次处理一个任务（工作单元），处理完毕有一次喘息的机会：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Flush asynchronous work until the deadline runs out of time.")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nextUnitOfWork "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("shouldYield")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  nextUnitOfWork "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("performUnitOfWork")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nextUnitOfWork"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[a("code",[t._v("shouldYield")]),t._v("就是看时间用完了没（"),a("code",[t._v("idleDeadline.timeRemaining()")]),t._v("），没用完的话继续处理下一个任务，用完了就结束，把时间控制权还给主线程，等下一次"),a("code",[t._v("requestIdleCallback")]),t._v("回调再接着做：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// If there's work left over, schedule a new callback.")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nextFlushedExpirationTime "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!==")]),t._v(" NoWork"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("scheduleCallbackWithExpiration")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nextFlushedExpirationTime"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("也就是说，（不考虑突发事件的）正常调度是由工作循环来完成的，基本"),a("em",[t._v("规则")]),t._v("是："),a("strong",[t._v("每个工作单元结束检查是否还有时间做下一个，没时间了就先“挂起”")])]),t._v(" "),a("p",[t._v("优先级机制用来处理突发事件与优化次序，例如：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("到 commit 阶段了，提高优先级")])]),t._v(" "),a("li",[a("p",[t._v("高优任务做一半出错了，给降一下优先级")])]),t._v(" "),a("li",[a("p",[t._v("抽空关注一下低优任务，别给饿死了")])]),t._v(" "),a("li",[a("p",[t._v("如果对应 DOM 节点此刻不可见，给降到最低优先级")])])]),t._v(" "),a("p",[t._v("这些策略用来动态调整任务调度，是工作循环的"),a("em",[t._v("辅助机制")]),t._v("，最先做最重要的事情")]),t._v(" "),a("h3",{attrs:{id:"_4-如何中断-断点恢复"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-如何中断-断点恢复"}},[t._v("#")]),t._v(" 4. 如何中断/断点恢复？")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("中断：检查当前正在处理的工作单元，保存当前成果（"),a("code",[t._v("firstEffect, lastEffect")]),t._v("），修改 tag 标记一下，迅速收尾并再开一个"),a("code",[t._v("requestIdleCallback")]),t._v("，下次有机会再做;")])]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("断点恢复：下次再处理到该工作单元时，看 tag 是被打断的任务，接着做未完成的部分或者重做")])]),t._v(" "),a("p",[t._v("P.S.无论是时间用尽“自然”中断，还是被高优任务粗暴打断，对中断机制来说都一样")]),t._v(" "),a("h3",{attrs:{id:"_5-如何收集任务结果"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-如何收集任务结果"}},[t._v("#")]),t._v(" 5. 如何收集任务结果？")]),t._v(" "),a("p",[t._v("Fiber "),a("code",[t._v("reconciliation")]),t._v(" 的工作循环具体如下：")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("找到根节点优先级最高的 "),a("code",[t._v("workInProgress tree")]),t._v("，取其待处理的节点（代表组件或 DOM 节点）")])]),t._v(" "),a("li",[a("p",[t._v("检查当前节点"),a("em",[t._v("是否需要更新")]),t._v("，不需要的话，直接到 4")])]),t._v(" "),a("li",[a("p",[t._v("标记一下（打个 tag），更新自己（组件更新"),a("code",[t._v("props")]),t._v("，"),a("code",[t._v("context")]),t._v("等，DOM 节点记下 DOM change），并为孩子生成 "),a("code",[t._v("workInProgress node")])])]),t._v(" "),a("li",[a("p",[t._v("如果没有产生子节点，归并 "),a("code",[t._v("effect list")]),t._v("（包含 DOM change）到父级")])]),t._v(" "),a("li",[a("p",[t._v("把孩子或兄弟作为待处理节点，准备进入下一个工作循环。如果没有待处理节点（回到了 workInProgress tree 的根节点），工作循环结束")])])]),t._v(" "),a("p",[t._v("通过每个节点更新结束时"),a("em",[t._v("向上归并 effect list")]),a("code",[t._v("来收集任务结果，reconciliation")]),t._v(" 结束后，根节点的 "),a("code",[t._v("effect list")]),t._v("里记录了包括 "),a("code",[t._v("DOM change")]),t._v(" 在内的所有 "),a("code",[t._v("side effect")])]),t._v(" "),a("h3",{attrs:{id:"举一反三"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#举一反三"}},[t._v("#")]),t._v(" 举一反三")]),t._v(" "),a("p",[t._v("既然任务可拆分（只要最终得到完整 effect list 就行），那就允许"),a("em",[t._v("并行执行")]),t._v("（多个 Fiber reconciler + 多个 worker），首屏也更容易分块加载/渲染（vDOM 森林）")]),t._v(" "),a("p",[t._v("并行渲染的话，据说 Firefox 测试结果显示，130ms 的页面，只需要 30ms 就能搞定，所以在这方面是值得期待的，而 React 已经做好准备了，这也就是在 React Fiber 上下文经常听到的待"),a("em",[t._v("unlock")]),t._v("的更多特性之一")]),t._v(" "),a("h2",{attrs:{id:"源码简析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#源码简析"}},[t._v("#")]),t._v(" 源码简析")]),t._v(" "),a("h2",{attrs:{id:"参考"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[t._v("#")]),t._v(" 参考")]),t._v(" "),a("p",[t._v("文章整合自:")]),t._v(" "),a("ol",[a("li",[a("a",{attrs:{href:"https://juejin.cn/post/6926432527980691470",target:"_blank",rel:"noopener noreferrer"}},[t._v("浅谈对 React Fiber 的理解"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"http://www.ayqy.net/blog/dive-into-react-fiber/",target:"_blank",rel:"noopener noreferrer"}},[t._v("完全理解 React Fiber"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://cloud.tencent.com/developer/article/1477707",target:"_blank",rel:"noopener noreferrer"}},[t._v("详解 React 16 的 Diff 策略"),a("OutboundLink")],1)])])])}),[],!1,null,null,null);s.default=e.exports}}]);