(window.webpackJsonp=window.webpackJsonp||[]).push([[210],{897:function(t,s,a){"use strict";a.r(s);var n=a(18),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"nginx-最全操作总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#nginx-最全操作总结"}},[t._v("#")]),t._v(" nginx 最全操作总结")]),t._v(" "),a("p",[t._v("在复习 nginx 的知识的时候把常用的 nginx 操作整合出来，方便查阅，这里分享给大家：")]),t._v(" "),a("p",[t._v("本文将会从：安装 -> 全局配置 -> 常用的各种配置 来书写，其中常用配置写的炒鸡详细，需要的童鞋可以直接滑倒相应的位置查看。")]),t._v(" "),a("h2",{attrs:{id:"安装-nginx"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#安装-nginx"}},[t._v("#")]),t._v(" 安装 nginx")]),t._v(" "),a("p",[a("strong",[t._v("下载 nginx 的压缩包文件到根目录，官网下载地址：nginx.org/download/nginx-x.xx.xx.tar.gz")])]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("yum update "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#更新系统软件")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("cd")]),t._v(" /\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("wget")]),t._v(" nginx.org/download/nginx-1.17.2.tar.gz\n\n")])])]),a("p",[a("strong",[t._v("解压 tar.gz 压缩包文件，进去 nginx-1.17.2")])]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("tar")]),t._v(" -xzvf nginx-1.17.2.tar.gz\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("cd")]),t._v(" nginx-1.17.2\n\n")])])]),a("p",[a("strong",[t._v("进入文件夹后进行配置检查")])]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("./configure\n\n")])])]),a("p",[a("strong",[t._v("通过安装前的配置检查，发现有报错。检查中发现一些依赖库没有找到，这时候需要先安装 nginx 的一些依赖库")])]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("yum -y "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" pcre* "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#安装使nginx支持rewrite")]),t._v("\nyum -y "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" gcc-c++\nyum -y "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" zlib*\nyum -y "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" openssl openssl-devel\n\n")])])]),a("p",[a("strong",[t._v("再次进行检查操作 ./configure 没发现报错显示，接下来进行编译并安装的操作")])]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v(" // 检查模块支持\n  ./configure  --prefix"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("/usr/local/nginx  --with-http_ssl_module --with-http_v2_module --with-http_realip_module --with-http_addition_module --with-http_sub_module --with-http_dav_module --with-http_flv_module --with-http_mp4_module --with-http_gunzip_module --with-http_gzip_static_module --with-http_auth_request_module --with-http_random_index_module --with-http_secure_link_module --with-http_degradation_module --with-http_slice_module --with-http_stub_status_module --with-mail --with-mail_ssl_module --with-stream --with-stream_ssl_module --with-stream_realip_module --with-stream_ssl_preread_module --with-threads --user"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("www --group"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("www\n\n")])])]),a("p",[t._v("这里得特别注意下，你以后需要用到的功能模块是否存在，不然以后添加新的包会比较麻烦。")]),t._v(" "),a("p",[a("strong",[t._v("查看默认安装的模块支持")])]),t._v(" "),a("p",[t._v("命令 "),a("code",[t._v("ls nginx-1.17.2")]),t._v(" 查看 nginx 的文件列表，可以发现里面有一个 auto 的目录。")]),t._v(" "),a("p",[t._v("在这个 auto 目录中有一个 options 文件，这个文件里面保存的就是 nginx 编译过程中的所有选项配置。")]),t._v(" "),a("p",[t._v("通过命令："),a("code",[t._v("cat nginx-1.17.2/auto/options | grep YES")]),t._v("就可以查看")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://jingyan.baidu.com/article/454316ab354edcf7a7c03a81.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("nginx 编译安装时，怎么查看安装模块"),a("OutboundLink")],1)]),t._v(" "),a("p",[a("strong",[t._v("编译并安装")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("make && make install\n\n")])])]),a("p",[t._v("这里需要注意，模块的支持跟后续的 nginx 配置有关，比如 SSL，gzip 压缩等等，编译安装前最好检查需要配置的模块存不存在。")]),t._v(" "),a("p",[a("strong",[t._v("查看 nginx 安装后在的目录，可以看到已经安装到 /usr/local/nginx 目录了")])]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("whereis")]),t._v(" nginx\n"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$nginx")]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" /usr/local/nginx\n\n")])])]),a("p",[a("strong",[t._v("启动 nginx 服务")])]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("cd")]),t._v(" /usr/local/nginx/sbin/\n./nginx\n\n")])])]),a("p",[t._v("服务启动的时候报错了："),a("code",[t._v("nginx: [emerg] bind() to 0.0.0.0:80 failed (98: Address already in use)")]),t._v(" ，通过命令查看本机网络地址和端口等一些信息，找到被占用的 80 端口 "),a("code",[t._v("netstat -ntpl")]),t._v(" 的 tcp 连接，并杀死进程(kill 进程 pid)")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("netstat")]),t._v(" -ntpl\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("kill")]),t._v(" 进程PID\n\n")])])]),a("p",[t._v("继续启动 nginx 服务，启动成功")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("./nginx\n\n")])])]),a("p",[t._v("在浏览器直接访问 ip 地址，页面出现 Welcome to Nginx! 则安装成功。")]),t._v(" "),a("h2",{attrs:{id:"nginx-配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#nginx-配置"}},[t._v("#")]),t._v(" nginx 配置")]),t._v(" "),a("h3",{attrs:{id:"基本结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基本结构"}},[t._v("#")]),t._v(" 基本结构")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("main        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 全局配置，对全局生效")]),t._v("\n├── events  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 配置影响 nginx 服务器或与用户的网络连接")]),t._v("\n├── http    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 配置代理，缓存，日志定义等绝大多数功能和第三方模块的配置")]),t._v("\n│   ├── upstream "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 配置后端服务器具体地址，负载均衡配置不可或缺的部分")]),t._v("\n│   ├── server   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 配置虚拟主机的相关参数，一个 http 块中可以有多个 server 块")]),t._v("\n│   ├── server\n│   │   ├── location  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# server 块可以包含多个 location 块，location 指令用于匹配 uri")]),t._v("\n│   │   ├── location\n│   │   └── "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n│   └── "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n└── "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n\n")])])]),a("h3",{attrs:{id:"主要配置含义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#主要配置含义"}},[t._v("#")]),t._v(" 主要配置含义")]),t._v(" "),a("ul",[a("li",[t._v("main:nginx 的全局配置，对全局生效。")]),t._v(" "),a("li",[t._v("events:配置影响 nginx 服务器或与用户的网络连接。")]),t._v(" "),a("li",[t._v("http：可以嵌套多个 server，配置代理，缓存，日志定义等绝大多数功能和第三方模块的配置。")]),t._v(" "),a("li",[t._v("server：配置虚拟主机的相关参数，一个 http 中可以有多个 server。")]),t._v(" "),a("li",[t._v("location：配置请求的路由，以及各种页面的处理情况。")]),t._v(" "),a("li",[t._v("upstream：配置后端服务器具体地址，负载均衡配置不可或缺的部分。")])]),t._v(" "),a("h3",{attrs:{id:"nginx-conf-配置文件的语法规则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#nginx-conf-配置文件的语法规则"}},[t._v("#")]),t._v(" nginx.conf 配置文件的语法规则")]),t._v(" "),a("ol",[a("li",[t._v("配置文件由指令与指令块构成")]),t._v(" "),a("li",[t._v("每条指令以 “;” 分号结尾，指令与参数间以空格符号分隔")]),t._v(" "),a("li",[t._v("指令块以 {} 大括号将多条指令组织在一起")]),t._v(" "),a("li",[t._v("include 语句允许组合多个配置文件以提升可维护性")]),t._v(" "),a("li",[t._v("通过 # 符号添加注释，提高可读性")]),t._v(" "),a("li",[t._v("通过 $ 符号使用变量")]),t._v(" "),a("li",[t._v("部分指令的参数支持正则表达式，例如常用的 location 指令")])]),t._v(" "),a("h3",{attrs:{id:"内置变量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#内置变量"}},[t._v("#")]),t._v(" 内置变量")]),t._v(" "),a("p",[t._v("nginx 常用的内置全局变量，你可以在配置中随意使用：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"center"}},[t._v("TCP")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("UDP")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("$host")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("请求信息中的 Host，如果请求中没有 Host 行，则等于设置的服务器名")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("$request_method")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("客户端请求类型，如 GET、POST")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("$remote_addr")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("客户端的 IP 地址")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("$args")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("请求中的参数")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("$content_length")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("请求头中的 Content-length 字段")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("$http_user_agent")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("客户端 agent 信息")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("$http_cookie")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("客户端 cookie 信息")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("$remote_port")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("客户端的端口")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("$server_protocol")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("请求使用的协议，如 HTTP/1.1")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("$server_addr")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("服务器地址")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("$server_name")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("服务器名称")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("$server_port")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("服务器的端口号")])])])]),t._v(" "),a("h3",{attrs:{id:"常用命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常用命令"}},[t._v("#")]),t._v(" 常用命令")]),t._v(" "),a("p",[t._v("这里列举几个常用的命令：")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("nginx -s reload  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 向主进程发送信号，重新加载配置文件，热重启")]),t._v("\nnginx -s reopen\t "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 重启 Nginx")]),t._v("\nnginx -s stop    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 快速关闭")]),t._v("\nnginx -s quit    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 等待工作进程处理完成后关闭")]),t._v("\nnginx -T         "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看当前 Nginx 最终的配置")]),t._v("\nnginx -t -c "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("配置路径"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 检查配置是否有问题，如果已经在配置目录，则不需要 -c")]),t._v("\n\n")])])]),a("p",[t._v("以上命令通过 "),a("code",[t._v("nginx -h")]),t._v(" 就可以查看到，还有其它不常用这里未列出。")]),t._v(" "),a("p",[t._v("Linux 系统应用管理工具 systemd 关于 nginx 的常用命令：")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("systemctl start nginx    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 启动 Nginx")]),t._v("\nsystemctl stop nginx     "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 停止 Nginx")]),t._v("\nsystemctl restart nginx  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 重启 Nginx")]),t._v("\nsystemctl reload nginx   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 重新加载 Nginx，用于修改配置后")]),t._v("\nsystemctl "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("enable")]),t._v(" nginx   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 设置开机启动 Nginx")]),t._v("\nsystemctl disable nginx  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 关闭开机启动 Nginx")]),t._v("\nsystemctl status nginx   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看 Nginx 运行状态")]),t._v("\n\n")])])]),a("h3",{attrs:{id:"配置-nginx-开机自启"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#配置-nginx-开机自启"}},[t._v("#")]),t._v(" 配置 nginx 开机自启")]),t._v(" "),a("p",[a("strong",[t._v("利用 systemctl 命令")]),t._v("：")]),t._v(" "),a("p",[t._v("如果用 yum install 命令安装的 nginx，yum 命令会自动创建 nginx.service 文件，直接用命令:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("systemctl enable nginx   # 设置开机启动 Nginx\nsystemctl disable nginx  # 关闭开机启动 Nginx\n\n")])])]),a("p",[t._v("就可以设置开机自启，否则需要在系统服务目录里创建 nginx.service 文件。")]),t._v(" "),a("p",[t._v("创建并打开 nginx.service 文件：")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("vi")]),t._v(" /lib/systemd/system/nginx.service\n\n")])])]),a("p",[t._v("内容如下：")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Unit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("Description")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("nginx\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("After")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("network.target\n\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Service"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("Type")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("forking\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("ExecStart")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("/usr/local/nginx/sbin/nginx\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("ExecReload")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("/usr/local/nginx/sbin/nginx -s reload\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("ExecStop")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("/usr/local/nginx/sbin/nginx -s quit\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("PrivateTmp")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("true\n\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Install"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("WantedBy")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("multi-user.target\n\n")])])]),a("p",[a("code",[t._v(":wq")]),t._v(" 保存退出，运行 "),a("code",[t._v("systemctl daemon-reload")]),t._v(" 使文件生效。")]),t._v(" "),a("p",[t._v("这样便可以通过以下命令操作 nginx 了：")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("systemctl start nginx.service "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 启动nginx服务")]),t._v("\nsystemctl "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("enable")]),t._v(" nginx.service "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 设置开机启动")]),t._v("\nsystemctl disable nginx.service "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 停止开机自启动")]),t._v("\nsystemctl status nginx.service　"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看服务当前状态")]),t._v("\nsystemctl restart nginx.service "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 重新启动服务")]),t._v("\nsystemctl is-enabled nginx.service "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#查询服务是否开机启动")]),t._v("\n\n")])])]),a("p",[a("strong",[t._v("通过开机启动命令脚本实现开机自启")])]),t._v(" "),a("p",[t._v("创建开机启动命令脚本文件：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("vi")]),t._v(" /etc/init.d/nginx\n\n")])])]),a("p",[t._v("在这个 nginx 文件中插入一下启动脚本代码，启动脚本代码来源网络复制，实测有效：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token shebang important"}},[t._v("#! /bin/bash")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# chkconfig: - 85 15")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a("span",{pre:!0,attrs:{class:"token environment constant"}},[t._v("PATH")])]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("/usr/local/nginx\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("DESC")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"nginx daemon"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("NAME")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("nginx\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("DAEMON")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token environment constant"}},[t._v("$PATH")]),t._v("/sbin/"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$NAME")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("CONFIGFILE")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token environment constant"}},[t._v("$PATH")]),t._v("/conf/"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$NAME")]),t._v(".conf\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("PIDFILE")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token environment constant"}},[t._v("$PATH")]),t._v("/logs/"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$NAME")]),t._v(".pid\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("scriptNAME")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("/etc/init.d/"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$NAME")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("set")]),t._v(" -e\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" -x "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"'),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$DAEMON")]),t._v('"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("exit")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function-name function"}},[t._v("do_start")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$DAEMON")]),t._v(" -c "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$CONFIGFILE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" -n "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"nginx already running"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function-name function"}},[t._v("do_stop")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$DAEMON")]),t._v(" -s stop "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" -n "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"nginx not running"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function-name function"}},[t._v("do_reload")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$DAEMON")]),t._v(" -s reload "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" -n "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"nginx can\'t reload"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"'),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$1")]),t._v('"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v("\nstart"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" -n "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Starting '),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$DESC")]),t._v(": "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$NAME")]),t._v('"')]),t._v("\ndo_start\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"."')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nstop"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" -n "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Stopping '),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$DESC")]),t._v(": "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$NAME")]),t._v('"')]),t._v("\ndo_stop\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"."')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nreload"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("graceful"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" -n "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Reloading '),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$DESC")]),t._v(' configuration..."')]),t._v("\ndo_reload\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"."')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nrestart"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" -n "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Restarting '),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$DESC")]),t._v(": "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$NAME")]),t._v('"')]),t._v("\ndo_stop\ndo_start\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"."')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n*"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Usage: '),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$scriptNAME")]),t._v(' {start|stop|reload|restart}"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[t._v("&2")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("exit")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("esac")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("exit")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n\n")])])]),a("p",[t._v("设置所有人都有对这个启动脚本 nginx 文件的执行权限：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("chmod")]),t._v(" a+x /etc/init.d/nginx\n\n")])])]),a("p",[t._v("把 nginx 加入系统服务中：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("chkconfig")]),t._v(" --add nginx\n\n")])])]),a("p",[t._v("把服务设置为开机启动：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("chkconfig")]),t._v(" nginx on\n\n")])])]),a("p",[t._v("reboot 重启系统生效，可以使用上面 systemctl 方法相同的命令：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("systemctl start nginx.service "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 启动nginx服务")]),t._v("\nsystemctl "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("enable")]),t._v(" nginx.service "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 设置开机启动")]),t._v("\nsystemctl disable nginx.service "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 停止开机自启动")]),t._v("\nsystemctl status nginx.service　"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看服务当前状态")]),t._v("\nsystemctl restart nginx.service "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 重新启动服务")]),t._v("\nsystemctl is-enabled nginx.service "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#查询服务是否开机启动")]),t._v("\n\n")])])]),a("p",[t._v("如果服务启动的时候出现 "),a("code",[t._v('Restarting nginx daemon: nginxnginx: [error] open() "/usr/local/nginx/logs/nginx.pid" failed (2: No such file or directory) nginx not running')]),t._v(" 的错误，通过 nginx -c 参数指定配置文件即可解决")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("/usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf\n\n")])])]),a("p",[t._v("如果服务启动中出现 "),a("code",[t._v("nginx: [emerg] bind() to 0.0.0.0:80 failed (98: Address already in use)")]),t._v(" 的错误，可以先通过 "),a("code",[t._v("service nginx stop")]),t._v(" 停止服务，再启动就好。")]),t._v(" "),a("h3",{attrs:{id:"配置-nginx-全局可用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#配置-nginx-全局可用"}},[t._v("#")]),t._v(" 配置 nginx 全局可用")]),t._v(" "),a("p",[t._v("当你每次改了 "),a("code",[t._v("nginx.conf")]),t._v(" 配置文件的内容都需要重新到 nginx 启动目录去执行命令，或者通过 -p 参数指向特定目录，会不会感觉很麻烦？")]),t._v(" "),a("p",[t._v("例如： 直接执行 "),a("code",[t._v("nginx -s reload")]),t._v(" 会报错 "),a("code",[t._v("-bash: nginx: command not found")]),t._v("，需要到 "),a("code",[t._v("/usr/local/nginx/sbin")]),t._v(" 目录下面去执行，并且是执行 "),a("code",[t._v("./nginx -s reload")]),t._v("。")]),t._v(" "),a("p",[t._v("这里有两种方式可以解决，一种是通过脚本对 nginx 命令包装，这里介绍另外一种比较简单：通过把 nginx 配置到环境变量里，用 nginx 执行指令即可。步骤如下：")]),t._v(" "),a("p",[t._v("1、编辑 /etc/profile")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("vi")]),t._v(" /etc/profile\n\n")])])]),a("p",[t._v("2、在最后一行添加配置，:wq 保存")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("export")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a("span",{pre:!0,attrs:{class:"token environment constant"}},[t._v("PATH")])]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token environment constant"}},[t._v("$PATH")]),t._v(":/usr/local/nginx/sbin\n\n")])])]),a("p",[t._v("3、使配置立即生效")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("source")]),t._v(" /etc/profile\n\n")])])]),a("p",[t._v("这样就可以愉快的直接在全局使用 nginx 命令了。")]),t._v(" "),a("h2",{attrs:{id:"nginx-常用功能"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#nginx-常用功能"}},[t._v("#")]),t._v(" nginx 常用功能")]),t._v(" "),a("h3",{attrs:{id:"反向代理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#反向代理"}},[t._v("#")]),t._v(" 反向代理")]),t._v(" "),a("p",[t._v("我们最常说的反向代理的是通过反向代理解决跨域问题。")]),t._v(" "),a("p",[t._v("其实反向代理还可以用来控制缓存（代理缓存 proxy cache），进行访问控制等等，以及后面说的负载均衡其实都是通过反向代理来实现的。")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("server "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    listen    "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8080")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 用户访问 ip:8080/test 下的所有路径代理到 github")]),t._v("\n        location /test "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        \tproxy_pass   https://github.com"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 所有 /api 下的接口访问都代理到本地的 8888 端口")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 例如你本地运行的 java 服务的端口是 8888，接口都是以 /api 开头")]),t._v("\n        location /api "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            proxy_pass   http://127.0.0.1:8888"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),a("h3",{attrs:{id:"访问控制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#访问控制"}},[t._v("#")]),t._v(" 访问控制")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("server "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   location ~ ^/index.html "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n       "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 匹配 index.html 页面 除了 127.0.0.1 以外都可以访问")]),t._v("\n       deny "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("192.168")]),t._v(".1.1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n       deny "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("192.168")]),t._v(".1.2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n       allow all"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),a("p",[t._v("上面的命令表示禁止 192.168.1.1 和 192.168.1.2 两个 ip 访问，其它全部允许。从上到下的顺序，匹配到了便跳出，可以按你的需求设置。")]),t._v(" "),a("h3",{attrs:{id:"负载均衡"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#负载均衡"}},[t._v("#")]),t._v(" 负载均衡")]),t._v(" "),a("p",[t._v("通过负载均衡充利用服务器资源，nginx 目前支持自带 4 种负载均衡策略，还有 2 种常用的第三方策略。")]),t._v(" "),a("p",[a("strong",[t._v("轮询策略（默认）")])]),t._v(" "),a("p",[t._v("每个请求按时间顺序逐一分配到不同的后端服务器，如果有后端服务器挂掉，能自动剔除。但是如果其中某一台服务器压力太大，出现延迟，会影响所有分配在这台服务器下的用户。")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("http "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    upstream test.com "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        server "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("192.168")]),t._v(".1.12:8887"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        server "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("192.168")]),t._v(".1.13:8888"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    server "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        location /api "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            proxy_pass  http://test.com"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),a("p",[a("strong",[t._v("根据服务器权重")])]),t._v(" "),a("p",[t._v("例如要配置：10 次请求中大概 1 次访问到 8888 端口，9 次访问到 8887 端口：")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("http "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    upstream test.com "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        server "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("192.168")]),t._v(".1.12:8887 "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("weight")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        server "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("192.168")]),t._v(".1.13:8888 "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("weight")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    server "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        location /api "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            proxy_pass  http://test.com"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),a("p",[a("strong",[t._v("客户端 ip 绑定（ip_hash）")])]),t._v(" "),a("p",[t._v("来自同一个 ip 的请求永远只分配一台服务器，有效解决了动态网页存在的 session 共享问题。例如：比如把登录信息保存到了 session 中，那么跳转到另外一台服务器的时候就需要重新登录了。")]),t._v(" "),a("p",[t._v("所以很多时候我们需要一个客户只访问一个服务器，那么就需要用 ip_hash 了。")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("http "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    upstream test.com "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    \tip_hash"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        server "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("192.168")]),t._v(".1.12:8887"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        server "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("192.168")]),t._v(".1.13:8888"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    server "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        location /api "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            proxy_pass  http://test.com"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),a("p",[a("strong",[t._v("最小连接数策略")])]),t._v(" "),a("p",[t._v("将请求优先分配给压力较小的服务器，它可以平衡每个队列的长度，并避免向压力大的服务器添加更多的请求。")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("http "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    upstream test.com "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    \tleast_conn"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        server "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("192.168")]),t._v(".1.12:8887"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        server "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("192.168")]),t._v(".1.13:8888"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    server "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        location /api "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            proxy_pass  http://test.com"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),a("p",[a("strong",[t._v("最快响应时间策略（依赖于第三方 NGINX Plus）")])]),t._v(" "),a("p",[t._v("依赖于 NGINX Plus，优先分配给响应时间最短的服务器。")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("http "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    upstream test.com "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    \tfair"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        server "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("192.168")]),t._v(".1.12:8887"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        server "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("192.168")]),t._v(".1.13:8888"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    server "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        location /api "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            proxy_pass  http://test.com"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),a("p",[a("strong",[t._v("按访问 url 的 hash 结果（第三方）")])]),t._v(" "),a("p",[t._v("按访问 url 的 hash 结果来分配请求，使每个 url 定向到同一个后端服务器，后端服务器为缓存时比较有效。 在 upstream 中加入 hash 语句，server 语句中不能写入 weight 等其他的参数，hash_method 是使用的 hash 算法")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("\nhttp "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    upstream test.com "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    \t"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("hash")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$request_uri")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    \thash_method crc32"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    \tserver "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("192.168")]),t._v(".1.12:8887"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    \tserver "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("192.168")]),t._v(".1.13:8888"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    server "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        location /api "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            proxy_pass  http://test.com"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),a("p",[t._v("采用 HAproxy 的 loadbalance uri 或者 nginx 的 upstream_hash 模块，都可以做到针对 url 进行哈希算法式的负载均衡转发。")]),t._v(" "),a("h3",{attrs:{id:"gzip-压缩"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#gzip-压缩"}},[t._v("#")]),t._v(" gzip 压缩")]),t._v(" "),a("p",[t._v("开启 gzip 压缩可以大幅减少 http 传输过程中文件的大小，可以极大的提高网站的访问速度，基本是必不可少的优化操作：")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("gzip")]),t._v("  on"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 开启gzip 压缩")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# gzip_types")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# gzip_static on;")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# gzip_proxied expired no-cache no-store private auth;")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# gzip_buffers 16 8k;")]),t._v("\ngzip_min_length 1k"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ngzip_comp_level "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ngzip_http_version "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ngzip_vary off"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ngzip_disable "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"MSIE [1-6]\\."')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n")])])]),a("p",[t._v("解释一下：")]),t._v(" "),a("ol",[a("li",[t._v("gzip_types：要采用 gzip 压缩的 MIME 文件类型，其中 text/html 被系统强制启用；")]),t._v(" "),a("li",[t._v("gzip_static：默认 off，该模块启用后，Nginx 首先检查是否存在请求静态文件的 gz 结尾的文件，如果有则直接返回该 .gz 文件内容；")]),t._v(" "),a("li",[t._v("gzip_proxied：默认 off，nginx 做为反向代理时启用，用于设置启用或禁用从代理服务器上收到相应内容 gzip 压缩；")]),t._v(" "),a("li",[t._v("gzip_buffers：获取多少内存用于缓存压缩结果，16 8k 表示以 8k*16 为单位获得；")]),t._v(" "),a("li",[t._v("gzip_min_length：允许压缩的页面最小字节数，页面字节数从 header 头中的 Content-Length 中进行获取。默认值是 0，不管页面多大都压缩。建议设置成大于 1k 的字节数，小于 1k 可能会越压越大；")]),t._v(" "),a("li",[t._v("gzip_comp_level：gzip 压缩比，压缩级别是 1-9，1 压缩级别最低，9 最高，级别越高压缩率越大，压缩时间越长，建议 4-6；")]),t._v(" "),a("li",[t._v("gzip_http_version：默认 1.1，启用 gzip 所需的 HTTP 最低版本；")]),t._v(" "),a("li",[t._v("gzip_vary：用于在响应消息头中添加 Vary：Accept-Encoding，使代理服务器根据请求头中的 Accept-Encoding 识别是否启用 gzip 压缩；")]),t._v(" "),a("li",[t._v("gzip_disable 指定哪些不需要 gzip 压缩的浏览器")])]),t._v(" "),a("p",[t._v("其中第 2 点，普遍是结合前端打包的时候打包成 gzip 文件后部署到服务器上，这样服务器就可以直接使用 gzip 的文件了，并且可以把压缩比例提高，这样 nginx 就不用压缩，也就不会影响速度。一般不追求极致的情况下，前端不用做任何配置就可以使用啦~")]),t._v(" "),a("p",[t._v("附前端 webpack 开启 gzip 压缩配置，在 vue-cli3 的 vue.config.js 配置文件中：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" CompressionWebpackPlugin "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'compression-webpack-plugin'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nmodule"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("exports "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// gzip 配置")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("configureWebpack")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("config")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("process"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("env"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NODE_ENV")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'production'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 生产环境")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("plugins")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CompressionWebpackPlugin")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("test")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("\\.js$|\\.html$|\\.css")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 匹配文件名")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("threshold")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1024")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("               "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 文件压缩阈值，对超过 1k 的进行压缩")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("deleteOriginalAssets")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("     "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 是否删除源文件")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),a("h3",{attrs:{id:"http-服务器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http-服务器"}},[t._v("#")]),t._v(" HTTP 服务器")]),t._v(" "),a("p",[t._v("nginx 本身也是一个静态资源的服务器，当只有静态资源的时候，就可以使用 nginx 来做服务器：")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("server "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  listen       "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("80")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  server_name  localhost"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  location / "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      root   /usr/local/app"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      index  index.html"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),a("p",[t._v("这样如果访问 http://ip 就会默认访问到 /usr/local/app 目录下面的 index.html，如果一个网站只是静态页面的话，那么就可以通过这种方式来实现部署，比如一个静态官网。")]),t._v(" "),a("h3",{attrs:{id:"动静分离"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#动静分离"}},[t._v("#")]),t._v(" 动静分离")]),t._v(" "),a("p",[t._v("就是把动态和静态的请求分开。方式主要有两种：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("一种是纯粹把静态文件独立成单独的域名，放在独立的服务器上，也是目前主流推崇的方案")])]),t._v(" "),a("li",[a("p",[t._v("一种方法就是动态跟静态文件混合在一起发布， 通过 nginx 配置来分开")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("# 所有静态请求都由nginx处理，存放目录为\thtml\nlocation ~ \\.(gif|jpg|jpeg|png|bmp|swf|css|js)$ {\n    root    /usr/local/resource;\n    expires     10h; # 设置过期时间为10小时\n}\n\n# 所有动态请求都转发给 tomcat 处理\nlocation ~ \\.(jsp|do)$ {\n    proxy_pass  127.0.0.1:8888;\n}\n\n")])])])])]),t._v(" "),a("p",[t._v("注意上面设置了 expires，当 nginx 设置了 expires 后，例如设置为：expires 10d; 那么，所在的 location 或 if 的内容，用户在 10 天内请求的时候，都只会访问浏览器中的缓存，而不会去请求 nginx 。")]),t._v(" "),a("h3",{attrs:{id:"请求限制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#请求限制"}},[t._v("#")]),t._v(" 请求限制")]),t._v(" "),a("p",[t._v("对于大流量恶意的访问，会造成带宽的浪费，给服务器增加压力。可以通过 nginx 对于同一 IP 的连接数以及并发数进行限制。合理的控制还可以用来防止 DDos 和 CC 攻击。")]),t._v(" "),a("p",[t._v("关于请求限制主要使用 nginx 默认集成的 2 个模块：")]),t._v(" "),a("ul",[a("li",[t._v("limit_conn_module 连接频率限制模块")]),t._v(" "),a("li",[t._v("limit_req_module 请求频率限制模块")])]),t._v(" "),a("p",[t._v("涉及到的配置主要是：")]),t._v(" "),a("ul",[a("li",[t._v("limit_req_zone 限制请求数")]),t._v(" "),a("li",[t._v("limit_conn_zone 限制并发连接数")])]),t._v(" "),a("p",[a("strong",[t._v("通过 limit_req_zone 限制请求数")])]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("http"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    limit_conn_zone "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$binary_remote_addrzone")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("limit:10m"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" // 设置共享内存空间大\n    server"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    \tlocation /"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            limit_conn addr "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 同一用户地址同一时间只允许有5个连接。")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),a("p",[t._v("如果共享内存空间被耗尽，服务器将会对后续所有的请求返回 503 (Service Temporarily Unavailable) 错误。")]),t._v(" "),a("p",[t._v("当多个 limit_conn_zone 指令被配置时，所有的连接数限制都会生效。比如，下面配置不仅会限制单一 IP 来源的连接数，同时也会限制单一虚拟服务器的总连接数：")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("limit_conn_zone "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$binary_remote_addr")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("zone")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("perip:10m"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nlimit_conn_zone "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$server_name")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("zone")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("perserver:10m"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nserver "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    limit_conn perip "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 限制每个 ip 连接到服务器的数量")]),t._v("\n    limit_conn perserver "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2000")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 限制连接到服务器的总数")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),a("p",[a("strong",[t._v("通过 limit_conn_zone 限制并发连接数")])]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("limit_req_zone "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$binary_remote_addr")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("zone")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("creq:10 "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("mrate")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("10r/s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nserver"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    location /"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        limit_req "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("zone")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("creq "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("burst")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),a("p",[t._v("限制平均每秒不超过一个请求，同时允许超过频率限制的请求数不多于 5 个。\n如果不希望超过的请求被延迟，可以用 nodelay 参数,如：")]),t._v(" "),a("p",[a("code",[t._v("limit_req zone=creq burst=5 nodelay;")])]),t._v(" "),a("p",[t._v("这里只是简单讲讲，让大家有这个概念，配置的时候可以深入去找找资料。")]),t._v(" "),a("h3",{attrs:{id:"正向代理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#正向代理"}},[t._v("#")]),t._v(" 正向代理")]),t._v(" "),a("p",[t._v("正向代理，意思是一个位于客户端和原始服务器(origin server)之间的服务器，为了从原始服务器取得内容，客户端向代理发送一个请求并指定目标(原始服务器)，然后代理向原始服务器转交请求并将获得的内容返回给客户端。客户端才能使用正向代理，比如我们使用的 VPN 服务就是正向代理，直观区别：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn-1252273386.cos.ap-guangzhou.myqcloud.com/images/db1a80715418ce13a5dd9aece69d671b.png",alt:""}})]),t._v(" "),a("p",[t._v("配置正向代理：")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("resolver "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8.8")]),t._v(".8.8 "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 谷歌的域名解析地址")]),t._v("\nserver "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    resolver_timeout 5s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" // 设超时时间\n    location / "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 当客户端请求我的时候，我会把请求转发给它")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# $host 要访问的主机名 $request_uri 请求路径")]),t._v("\n        proxy_pass http://"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$host")]),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$request_uri")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),a("p",[t._v("正向代理的对象是客户端，服务器端看不到真正的客户端。")]),t._v(" "),a("h3",{attrs:{id:"图片防盗链"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#图片防盗链"}},[t._v("#")]),t._v(" 图片防盗链")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("server "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    listen       "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("80")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    server_name  *.test"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 图片防盗链")]),t._v("\n    location ~* "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("."),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("gif"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("jpg"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("jpeg"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("png"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("bmp"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("swf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("$ "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        valid_referers none blocked server_names ~"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v(".google"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v(". ~"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v(".baidu"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v(". *.qq.com"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 只允许本机 IP 外链引用，将百度和谷歌也加入白名单有利于 SEO")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$invalid_referer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("403")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),a("p",[t._v("以上设置就能防止其它网站利用外链访问我们的图片，有利于节省流量")]),t._v(" "),a("h3",{attrs:{id:"适配-pc-或移动设备"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#适配-pc-或移动设备"}},[t._v("#")]),t._v(" 适配 PC 或移动设备")]),t._v(" "),a("p",[t._v("根据用户设备不同返回不同样式的站点，以前经常使用的是纯前端的自适应布局，但是复杂的网站并不适合响应式，无论是复杂性和易用性上面还是不如分开编写的好，比如我们常见的淘宝、京东。")]),t._v(" "),a("p",[t._v("根据用户请求的 user-agent 来判断是返回 PC 还是 H5 站点：")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("server "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    listen "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("80")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    server_name test.com"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    location / "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    \troot  /usr/local/app/pc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# pc 的 html 路径")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$http_user_agent")]),t._v(" ~* "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'(Android|webOS|iPhone|iPod|BlackBerry)'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            root /usr/local/app/mobile"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# mobile 的 html 路径")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        index index.html"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),a("h3",{attrs:{id:"设置二级域名"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#设置二级域名"}},[t._v("#")]),t._v(" 设置二级域名")]),t._v(" "),a("p",[t._v("新建一个 server 即可：")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("server "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    listen "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("80")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    server_name admin.test.com"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" // 二级域名\n\n    location / "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        root  /usr/local/app/admin"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 二级域名的 html 路径")]),t._v("\n        index index.html"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),a("h3",{attrs:{id:"配置-https"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#配置-https"}},[t._v("#")]),t._v(" 配置 HTTPS")]),t._v(" "),a("p",[t._v("这里我使用的是 certbot 免费证书，但申请一次有效期只有 3 个月（好像可以用 crontab 尝试配置自动续期，我暂时没试过）：")]),t._v(" "),a("p",[t._v("先安装 certbot")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("wget")]),t._v(" https://dl.eff.org/certbot-auto\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("chmod")]),t._v(" a+x certbot-auto\n\n")])])]),a("p",[t._v("申请证书（注意：需要把要申请证书的域名先解析到这台服务器上，才能申请）:")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" ./certbot-auto certonly --standalone --email admin@abc.com -d test.com -d www.test.com\n\n")])])]),a("p",[t._v("执行上面指令，按提示操作。")]),t._v(" "),a("p",[t._v("Certbot 会启动一个临时服务器来完成验证（会占用 80 端口或 443 端口，因此需要暂时关闭 Web 服务器），然后 Certbot 会把证书以文件的形式保存，包括完整的证书链文件和私钥文件。")]),t._v(" "),a("p",[t._v("文件保存在 etc/letsencrypt/live 下面的域名目录下。")]),t._v(" "),a("p",[t._v("修改 nginx 配置：")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("server"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    listen "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("443")]),t._v(" ssl http2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" // 这里还启用了 http/2.0\n\n    ssl_certificate /etc/letsencrypt/live/test.com/fullchain.pem"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 证书文件地址")]),t._v("\n    ssl_certificate_key /etc/letsencrypt/live/test.com/privkey.pem"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 私钥文件地址")]),t._v("\n\n    server_name test.com www.test.com"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" // 证书绑定的域名\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),a("h3",{attrs:{id:"配置-http-转-https"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#配置-http-转-https"}},[t._v("#")]),t._v(" 配置 HTTP 转 HTTPS")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("server "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    listen      "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("80")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    server_name test.com www.test.com"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 单域名重定向")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$host")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'www.sherlocked93.club'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("301")]),t._v(" https://www.sherlocked93.club"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$request_uri")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 全局非 https 协议时重定向")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$scheme")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'https'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("301")]),t._v(" https://"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$server_name")]),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$request_uri")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 或者全部重定向")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("301")]),t._v(" https://"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$server_name")]),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$request_uri")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),a("p",[t._v("以上配置选择自己需要的一条即可，不用全部加。")]),t._v(" "),a("h3",{attrs:{id:"页面项目-history-路由配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#页面项目-history-路由配置"}},[t._v("#")]),t._v(" 页面项目 history 路由配置")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("server "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    listen       "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("80")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    server_name  fe.sherlocked93.club"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    location / "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        root       /usr/local/app/dist"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# vue 打包后的文件夹")]),t._v("\n        index      index.html index.htm"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        try_files  "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$uri")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$uri")]),t._v("/ /index.html @rewrites"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 默认目录下的 index.html，如果都不存在则重定向")]),t._v("\n\n        expires -1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("                          "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 首页一般没有强制缓存")]),t._v("\n        add_header Cache-Control no-cache"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    location @rewrites "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" // 重定向设置\n        rewrite ^"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(".+"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("$ /index.html "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("break")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),a("p",[a("a",{attrs:{href:"https://router.vuejs.org/zh/guide/essentials/history-mode.html#%E5%90%8E%E7%AB%AF%E9%85%8D%E7%BD%AE%E4%BE%8B%E5%AD%90",target:"_blank",rel:"noopener noreferrer"}},[t._v("vue-router"),a("OutboundLink")],1),t._v(" 官网只有一句话 "),a("code",[t._v("try_files $uri $uri/ /index.html;")]),t._v("，而上面做了一些重定向处理。")]),t._v(" "),a("h3",{attrs:{id:"配置高可用集群-双机热备"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#配置高可用集群-双机热备"}},[t._v("#")]),t._v(" 配置高可用集群（双机热备）")]),t._v(" "),a("p",[t._v("当主 nginx 服务器宕机之后，切换到备份的 nginx 服务器")]),t._v(" "),a("p",[t._v("首先安装 keepalived:")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("yum "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" keepalived -y\n\n")])])]),a("p",[t._v("然后编辑 "),a("code",[t._v("/etc/keepalived/keepalived.conf")]),t._v(" 配置文件，并在配置文件中增加 "),a("code",[t._v("vrrp_script")]),t._v(" 定义一个外围检测机制，并在 "),a("code",[t._v("vrrp_instance")]),t._v(" 中通过定义 "),a("code",[t._v("track_script")]),t._v(" 来追踪脚本执行过程，实现节点转移：")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("global_defs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   notification_email "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        cchroot@gmail.com\n   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n   notification_email_from test@firewall.loc\n   smtp_server "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("127.0")]),t._v(".0.1\n   smtp_connect_timeout "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("30")]),t._v(" // 上面都是邮件配置\n   router_id LVS_DEVEL     // 当前服务器名字，用 "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("hostname")]),t._v(" 命令来查看\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nvrrp_script chk_maintainace "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" // 检测机制的脚本名称为chk_maintainace\n    script "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"[[ -e/etc/keepalived/down ]] && exit 1 || exit 0"')]),t._v(" // 可以是脚本路径或脚本命令\n    // script "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/etc/keepalived/nginx_check.sh"')]),t._v("    // 比如这样的脚本路径\n    interval "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("  // 每隔2秒检测一次\n    weight -20  // 当脚本执行成立，那么把当前服务器优先级改为-20\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nvrrp_instanceVI_1 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("   // 每一个vrrp_instance就是定义一个虚拟路由器\n    state MASTER      // 主机为MASTER，备用机为BACKUP\n    interface eth0    // 网卡名字，可以从ifconfig中查找\n    virtual_router_id "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("51")]),t._v(" // 虚拟路由的id号，一般小于255，主备机id需要一样\n    priority "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),t._v("      // 优先级，master的优先级比backup的大\n    advert_int "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("      // 默认心跳间隔\n    authentication "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("  // 认证机制\n        auth_type PASS\n        auth_pass "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1111")]),t._v("   // 密码\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    virtual_ipaddress "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("  // 虚拟地址vip\n       "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("172.16")]),t._v(".2.8\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),a("p",[t._v("其中检测脚本 "),a("code",[t._v("nginx_check.sh")]),t._v("，这里提供一个：")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token shebang important"}},[t._v("#!/bin/bash")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("A")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ps")]),t._v(" -C nginx --no-header "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("wc")]),t._v(" -l"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$A")]),t._v(" -eq "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("then")]),t._v("\n    /usr/sbin/nginx "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 尝试重新启动nginx")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sleep")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("         "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 睡眠2秒")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ps")]),t._v(" -C nginx --no-header "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("wc")]),t._v(" -l"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")])]),t._v(" -eq "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("then")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("killall")]),t._v(" keepalived "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 启动失败，将keepalived服务杀死。将vip漂移到其它备份节点")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fi")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fi")]),t._v("\n\n")])])]),a("p",[t._v("复制一份到备份服务器，备份 nginx 的配置要将 "),a("code",[t._v("state")]),t._v(" 后改为 "),a("code",[t._v("BACKUP")]),t._v("，"),a("code",[t._v("priority")]),t._v(" 改为比主机小。\n设置完毕后各自 "),a("code",[t._v("service keepalived start")]),t._v(" 启动，经过访问成功之后，可以把 Master 机的 keepalived 停掉，此时 Master 机就不再是主机了 "),a("code",[t._v("service keepalived stop")]),t._v("，看访问虚拟 IP 时是否能够自动切换到备机 ip addr。")]),t._v(" "),a("p",[t._v("再次启动 Master 的 keepalived，此时 vip 又变到了主机上。")]),t._v(" "),a("p",[t._v("配置高可用集群的内容来源于："),a("a",{attrs:{href:"https://juejin.im/post/6844904144235413512#heading-11",target:"_blank",rel:"noopener noreferrer"}},[t._v("Nginx 从入门到实践，万字详解！"),a("OutboundLink")],1)]),t._v(" "),a("h2",{attrs:{id:"其它功能和技巧"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#其它功能和技巧"}},[t._v("#")]),t._v(" 其它功能和技巧")]),t._v(" "),a("h3",{attrs:{id:"代理缓存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#代理缓存"}},[t._v("#")]),t._v(" 代理缓存")]),t._v(" "),a("p",[t._v("nginx 的 http_proxy 模块，提供类似于 Squid 的缓存功能，使用 proxy_cache_path 来配置。")]),t._v(" "),a("p",[t._v("nginx 可以对访问过的内容在 nginx 服务器本地建立副本，这样在一段时间内再次访问该数据，就不需要通过 nginx 服务器再次向后端服务器发出请求，减小数据传输延迟，提高访问速度：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("proxy_cache_path usr/local/cache levels=1:2 keys_zone=my_cache:10m;\n\nserver {\n  listen       80;\n  server_name  test.com;\n\n  location / {\n      proxy_cache my_cache;\n      proxy_pass http://127.0.0.1:8888;\n      proxy_set_header Host $host;\n  }\n}\n\n")])])]),a("p",[t._v("上面的配置表示： nginx 提供一块 10 M 的内存用于缓存，名字为 my_cache, levels 等级为 1:2，缓存存放的路径为 "),a("code",[t._v("usr/local/cache")]),t._v("。")]),t._v(" "),a("h3",{attrs:{id:"访问日志"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#访问日志"}},[t._v("#")]),t._v(" 访问日志")]),t._v(" "),a("p",[t._v("访问日志默认是注释的状态，需要可以打开和进行更详细的配置，一下是 nginx 的默认配置：")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("http "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    log_format  main  "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'$remote_addr - $remote_user [$time_local] \"$request\" '")]),t._v("\n                      "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'$status $body_bytes_sent \"$http_referer\" '")]),t._v("\n                      "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('\'"$http_user_agent" "$http_x_forwarded_for"\'')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    access_log  logs/access.log  main"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),a("h3",{attrs:{id:"错误日志"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#错误日志"}},[t._v("#")]),t._v(" 错误日志")]),t._v(" "),a("p",[t._v("错误日志放在 main 全局区块中，童鞋们打开 nginx.conf 就可以看见在配置文件中和下面一样的代码了：")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#error_log  logs/error.log;")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#error_log  logs/error.log  notice;")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#error_log  logs/error.log  info;")]),t._v("\n\n")])])]),a("p",[t._v("nginx 错误日志默认配置为：")]),t._v(" "),a("p",[a("code",[t._v("error_log logs/error.log error;")])]),t._v(" "),a("h3",{attrs:{id:"静态资源服务器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#静态资源服务器"}},[t._v("#")]),t._v(" 静态资源服务器")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("server {\n    listen       80;\n    server_name  static.bin;\n    charset utf-8;    # 防止中文文件名乱码\n\n    location /download {\n        alias\t          /usr/share/nginx/static;  # 静态资源目录\n\n        autoindex               on;    # 开启静态资源列目录，浏览目录权限\n        autoindex_exact_size    off;   # on(默认)显示文件的确切大小，单位是byte；off显示文件大概大小，单位KB、MB、GB\n        autoindex_localtime     off;   # off(默认)时显示的文件时间为GMT时间；on显示的文件时间为服务器时间\n    }\n}\n\n")])])]),a("h3",{attrs:{id:"禁止指定-user-agent"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#禁止指定-user-agent"}},[t._v("#")]),t._v(" 禁止指定 user_agent")]),t._v(" "),a("p",[t._v("nginx 可以禁止指定的浏览器和爬虫框架访问：")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# http_user_agent 为浏览器标识")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 禁止 user_agent 为baidu、360和sohu，~*表示不区分大小写匹配")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$http_user_agent")]),t._v(" ~* "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'baidu|360|sohu'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("404")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 禁止 Scrapy 等工具的抓取")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$http_user_agent")]),t._v(" ~* "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Scrapy"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("Curl"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("HttpClient"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("))")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("403")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n")])])]),a("h3",{attrs:{id:"请求过滤"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#请求过滤"}},[t._v("#")]),t._v(" 请求过滤")]),t._v(" "),a("p",[a("strong",[t._v("根据请求类型过滤")])]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 非指定请求全返回 403")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$request_method")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("~ ^"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("GET"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("POST"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("HEAD"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("$ "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("403")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),a("p",[a("strong",[t._v("根据状态码过滤")])]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("error_page "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("502")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("503")]),t._v(" /50x.html"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nlocation "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" /50x.html "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    root /usr/share/nginx/html"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),a("p",[t._v("这样实际上是一个内部跳转，当访问出现 502、503 的时候就能返回 50x.html 中的内容，这里需要注意是否可以找到 50x.html 页面，所以加了个 location 保证找到你自定义的 50x 页面。")]),t._v(" "),a("p",[a("strong",[t._v("根据 URL 名称过滤")])]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$host")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" zy.com' "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n     "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#其中$1是取自regex部分()里的内容,匹配成功后跳转到的URL。")]),t._v("\n     rewrite ^/"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(".*"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("$  http://www.zy.com/"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$1")]),t._v("  permanent；\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\nlocation /test "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    // /test 全部重定向到首页\n    rewrite  ^"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(".*"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("$ /index.html  redirect"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),a("h3",{attrs:{id:"ab-命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ab-命令"}},[t._v("#")]),t._v(" ab 命令")]),t._v(" "),a("p",[t._v("ab 命令全称为：Apache bench，是 Apache 自带的压力测试工具，也可以测试 Nginx、IIS 等其他 Web 服务器:")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("-n 总共的请求数")])]),t._v(" "),a("li",[a("p",[t._v("-c 并发的请求数")])]),t._v(" "),a("li",[a("p",[t._v("-t 测试所进行的最大秒数，默认值 为 50000")])]),t._v(" "),a("li",[a("p",[t._v("-p 包含了需要的 POST 的数据文件")])]),t._v(" "),a("li",[a("p",[t._v("-T POST 数据所使用的 Content-type 头信息")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("ab -n "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),t._v(" -c "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5000")]),t._v(" http://127.0.0.1/ "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 每次发送1000并发的请求数，请求数总数为5000。")]),t._v("\n\n")])])])])]),t._v(" "),a("p",[t._v("测试前需要安装 httpd-tools： "),a("code",[t._v("yum install httpd-tools")])]),t._v(" "),a("h3",{attrs:{id:"泛域名路径分离"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#泛域名路径分离"}},[t._v("#")]),t._v(" 泛域名路径分离")]),t._v(" "),a("p",[t._v("这是一个非常实用的技能，经常有时候我们可能需要配置一些二级或者三级域名，希望通过 nginx 自动指向对应目录，比如：")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("test1.doc.test.club 自动指向 /usr/local/html/doc/test1 服务器地址；")])]),t._v(" "),a("li",[a("p",[t._v("test2.doc.test.club 自动指向 /usr/local/html/doc/test2 服务器地址；")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("server "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    listen       "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("80")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    server_name  ~^"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("w-"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("+"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v(".doc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v(".test"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v(".club$"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    root /usr/local/html/doc/"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])])])]),t._v(" "),a("h3",{attrs:{id:"泛域名转发"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#泛域名转发"}},[t._v("#")]),t._v(" 泛域名转发")]),t._v(" "),a("p",[t._v("和之前的功能类似，有时候我们希望把二级或者三级域名链接重写到我们希望的路径，让后端就可以根据路由解析不同的规则：")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("test1.serv.test.club/api?name=a 自动转发到 127.0.0.1:8080/test1/api?name=a")])]),t._v(" "),a("li",[a("p",[t._v("test2.serv.test.club/api?name=a 自动转发到 127.0.0.1:8080/test2/api?name=a")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("server "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    listen       "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("80")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    server_name ~^"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("w-"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("+"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v(".serv"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v(".test"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v(".club$"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    location / "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        proxy_set_header        X-Real-IP "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$remote_addr")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        proxy_set_header        X-Forwarded-For "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$proxy_add_x_forwarded_for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        proxy_set_header        Host "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$http_host")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        proxy_set_header        X-NginX-Proxy "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        proxy_pass              http://127.0.0.1:8080/"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$1")]),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$request_uri")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])])])]),t._v(" "),a("h2",{attrs:{id:"常见问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常见问题"}},[t._v("#")]),t._v(" 常见问题")]),t._v(" "),a("h3",{attrs:{id:"nginx-中怎么设置变量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#nginx-中怎么设置变量"}},[t._v("#")]),t._v(" nginx 中怎么设置变量")]),t._v(" "),a("p",[t._v("或许你不知道，nginx 的配置文件使用的是一门微型的编程语言。既然是编程语言，一般也就少不了“变量”这种东西，但是在 nginx 配置中，变量只能存放一种类型的值，因为也只存在一种类型的值，那就是字符串。")]),t._v(" "),a("p",[t._v("例如我们在 nginx.conf 中有这样一行配置：")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("set")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$name")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"chroot"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n")])])]),a("p",[t._v("上面使用了 set 配置指令对变量 "),a("code",[t._v("$name")]),t._v('进行了赋值操作，把 "chroot" 赋值给了 '),a("code",[t._v("$name")]),t._v("。nginx 变量名前面有一个 "),a("code",[t._v("$")]),t._v(" 符号，这是记法上的要求。所有的 Nginx 变量在 Nginx 配置文件中引用时都须带上 "),a("code",[t._v("$")]),t._v(" 前缀。这种表示方法和 Perl、PHP 这些语言是相似的。")]),t._v(" "),a("p",[t._v("这种表示方法的用处在哪里呢，那就是可以直接把变量嵌入到字符串常量中以构造出新的字符串，例如你需要进行一个字符串拼接：")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("server "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  listen       "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("80")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  server_name  test.com"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  location / "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n     "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("set")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$temp")]),t._v(" hello"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n     "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"'),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$temp")]),t._v(' world"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),a("p",[t._v('以上当匹配成功的时候就会返回字符串 "hello world" 了。需要注意的是，当引用的变量名之后紧跟着变量名的构成字符时（比如后跟字母、数字以及下划线），我们就需要使用特别的记法来消除歧义，例如：')]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("server "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  listen       "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("80")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  server_name  test.com"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  location / "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n     "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("set")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$temp")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello "')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n     "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"'),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("${temp}")]),t._v('world"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),a("p",[t._v("这里，我们在配置指令的参数值中引用变量 "),a("code",[t._v("$temp")]),t._v(" 的时候，后面紧跟着 "),a("code",[t._v("world")]),t._v(" 这个单词，所以如果直接写作 "),a("code",[t._v('"$tempworld"')]),t._v(" 则 nginx 的计算引擎会将之识别为引用了变量 "),a("code",[t._v("$tempworld")]),t._v(". 为了解决这个问题，nginx 的字符串支持使用花括号在 "),a("code",[t._v("$")]),t._v(" 之后把变量名围起来，比如这里的 "),a("code",[t._v("${temp}")]),t._v('，所以 上面这个例子返回的还是 "hello world"：')]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("curl")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'http://test.com/'")]),t._v("\n    hello world\n\n")])])]),a("p",[t._v("还需要注意的是，若是想输出 "),a("code",[t._v("$")]),t._v(" 符号本身，可以这样做：")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("geo "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$dollar")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    default "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"$"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nserver "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    listen       "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("80")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    server_name  test.com"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    location / "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("set")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$temp")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello "')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"'),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("${temp}")]),t._v("world: "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$dollar")]),t._v('"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),a("p",[t._v("上面用到了标准模块 ngx_geo 提供的配置指令 geo 来为变量 "),a("code",[t._v("$dollar")]),t._v(" 赋予字符串 "),a("code",[t._v('"$"')]),t._v(' ，这样，这里的返回值就是 "hello world: $" 了。')]),t._v(" "),a("h2",{attrs:{id:"附-nginx-内置预定义变量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#附-nginx-内置预定义变量"}},[t._v("#")]),t._v(" 附 nginx 内置预定义变量")]),t._v(" "),a("p",[t._v("按字母顺序，变量名与对应定义：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("$arg_PARAMETER")]),t._v(" #GET 请求中变量名 PARAMETER 参数的值")]),t._v(" "),a("li",[a("code",[t._v("$args")]),t._v(" #这个变量等于 GET 请求中的参数，例如，foo=123&bar=blahblah;这个变量可以被修改")]),t._v(" "),a("li",[a("code",[t._v("$binary_remote_addr")]),t._v(" #二进制码形式的客户端地址")]),t._v(" "),a("li",[a("code",[t._v("$body_bytes_sent")]),t._v(" #传送页面的字节数")]),t._v(" "),a("li",[a("code",[t._v("$content_length")]),t._v(" #请求头中的 Content-length 字段")]),t._v(" "),a("li",[a("code",[t._v("$content_type")]),t._v(" #请求头中的 Content-Type 字段")]),t._v(" "),a("li",[a("code",[t._v("$cookie_COOKIE")]),t._v(" #cookie COOKIE 的值")]),t._v(" "),a("li",[a("code",[t._v("$document_root")]),t._v(" #当前请求在 root 指令中指定的值")]),t._v(" "),a("li",[a("code",[t._v("$document_uri")]),t._v(" #与 $uri 相同")]),t._v(" "),a("li",[a("code",[t._v("$host")]),t._v(" #请求中的主机头(Host)字段，如果请求中的主机头不可用或者空，则为处理请求的 server 名称(处理请求的 server 的 server_name 指令的值)。值为小写，不包含端口")]),t._v(" "),a("li",[a("code",[t._v("$hostname")]),t._v(" #机器名使用 gethostname 系统调用的值")]),t._v(" "),a("li",[a("code",[t._v("$http_HEADER")]),t._v(" #HTTP 请求头中的内容，HEADER 为 HTTP 请求中的内容转为小写，-变为_(破折号变为下划线)，例如：$http_user_agent(Uaer-Agent 的值)")]),t._v(" "),a("li",[a("code",[t._v("$sent_http_HEADER")]),t._v(" #HTTP 响应头中的内容，HEADER 为 HTTP 响应中的内容转为小写，-变为_(破折号变为下划线)，例如： 、 s e n t h t t p c a c h e c o n t r o l 、 sent_http_content_type…")]),t._v(" "),a("li",[a("code",[t._v("$is_args")]),t._v(' #如果 $args 设置，值为"?"，否则为""')]),t._v(" "),a("li",[a("code",[t._v("$limit_rate")]),t._v(" #这个变量可以限制连接速率")]),t._v(" "),a("li",[a("code",[t._v("$nginx_version")]),t._v(" #当前运行的 nginx 版本号")]),t._v(" "),a("li",[a("code",[t._v("$query_string")]),t._v(" #与 $args 相同")]),t._v(" "),a("li",[a("code",[t._v("$remote_addr")]),t._v(" #客户端的 IP 地址")]),t._v(" "),a("li",[a("code",[t._v("$remote_port")]),t._v(" #客户端的端口")]),t._v(" "),a("li",[a("code",[t._v("$remote_port")]),t._v(" #已经经过 Auth Basic Module 验证的用户名")]),t._v(" "),a("li",[a("code",[t._v("$request_filename")]),t._v(" #当前连接请求的文件路径，由 root 或 alias 指令与 URI 请求生成")]),t._v(" "),a("li",[a("code",[t._v("$request_body")]),t._v(" #这个变量（0.7.58+）包含请求的主要信息。在使用 proxy_pass 或 fastcgi_pass 指令的 location 中比较有意义")]),t._v(" "),a("li",[a("code",[t._v("$request_body_file")]),t._v(" #客户端请求主体信息的临时文件名")]),t._v(" "),a("li",[a("code",[t._v("$request_completion")]),t._v(' #如果请求成功，设为"OK"；如果请求未完成或者不是一系列请求中最后一部分则设为空')]),t._v(" "),a("li",[a("code",[t._v("$request_method")]),t._v(" #这个变量是客户端请求的动作，通常为 GET 或 POST。包括 0.8.20 及之前的版本中，这个变量总为 main request 中的动作，如果当前请求是一个子请求，并不使用这个当前请求的动作")]),t._v(" "),a("li",[a("code",[t._v("$request_uri")]),t._v(" #这个变量等于包含一些客户端请求参数的原始 URI，它无法修改，请查看 $uri 更改或重写 URI")]),t._v(" "),a("li",[a("code",[t._v("$scheme")]),t._v(" #所用的协议，例如 http 或者是 https，例如 "),a("code",[t._v("rewrite ^(.+)$$scheme://example.com$1 redirect")])]),t._v(" "),a("li",[a("code",[t._v("$server_addr")]),t._v(" #服务器地址，在完成一次系统调用后可以确定这个值，如果要绕开系统调用，则必须在 listen 中指定地址并且使用 bind 参数")]),t._v(" "),a("li",[a("code",[t._v("$server_name")]),t._v(" #服务器名称")]),t._v(" "),a("li",[a("code",[t._v("$server_port")]),t._v(" #请求到达服务器的端口号")]),t._v(" "),a("li",[a("code",[t._v("$server_protocol")]),t._v(" #请求使用的协议，通常是 HTTP/1.0、HTTP/1.1 或 HTTP/2")]),t._v(" "),a("li",[a("code",[t._v("$uri")]),t._v(" #请求中的当前 URI(不带请求参数，参数位于 args ) ， 不 同 于 浏 览 器 传 递 的 args)，不同于浏览器传递的 args)，不同于浏览器传递的 request_uri 的值，它可以通过内部重定向，或者使用 index 指令进行修改。不包括协议和主机名，例如 /foo/bar.html")])]),t._v(" "),a("h2",{attrs:{id:"附-nginx-模块"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#附-nginx-模块"}},[t._v("#")]),t._v(" 附 nginx 模块")]),t._v(" "),a("h3",{attrs:{id:"nginx-模块分类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#nginx-模块分类"}},[t._v("#")]),t._v(" nginx 模块分类")]),t._v(" "),a("ul",[a("li",[t._v("核心模块：nginx 最基本最核心的服务，如进程管理、权限控制、日志记录；")]),t._v(" "),a("li",[t._v("标准 HTTP 模块：nginx 服务器的标准 HTTP 功能；")]),t._v(" "),a("li",[t._v("可选 HTTP 模块：处理特殊的 HTTP 请求")]),t._v(" "),a("li",[t._v("邮件服务模块：邮件服务")]),t._v(" "),a("li",[t._v("第三方模块：作为扩展，完成特殊功能")])]),t._v(" "),a("h3",{attrs:{id:"模块清单"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#模块清单"}},[t._v("#")]),t._v(" 模块清单")]),t._v(" "),a("p",[a("strong",[t._v("核心模块")]),t._v("：")]),t._v(" "),a("ul",[a("li",[t._v("ngx_core")]),t._v(" "),a("li",[t._v("ngx_errlog")]),t._v(" "),a("li",[t._v("ngx_conf")]),t._v(" "),a("li",[t._v("ngx_events")]),t._v(" "),a("li",[t._v("ngx_event_core")]),t._v(" "),a("li",[t._v("ngx_epll")]),t._v(" "),a("li",[t._v("ngx_regex")])]),t._v(" "),a("p",[a("strong",[t._v("标准 HTTP 模块")]),t._v("：")]),t._v(" "),a("ul",[a("li",[t._v("ngx_http")]),t._v(" "),a("li",[t._v("ngx_http_core #配置端口，URI 分析，服务器相应错误处理，别名控制 (alias) 等")]),t._v(" "),a("li",[t._v("ngx_http_log #自定义 access 日志")]),t._v(" "),a("li",[t._v("ngx_http_upstream #定义一组服务器，可以接受来自 proxy, Fastcgi,Memcache 的重定向；主要用作负载均衡")]),t._v(" "),a("li",[t._v("ngx_http_static")]),t._v(" "),a("li",[t._v("ngx_http_autoindex #自动生成目录列表")]),t._v(" "),a("li",[t._v("ngx_http_index #处理以/结尾的请求，如果没有找到 index 页，则看是否开启了 random_index；如开启，则用之，否则用 autoindex")]),t._v(" "),a("li",[t._v("ngx_http_auth_basic #基于 http 的身份认证 (auth_basic)")]),t._v(" "),a("li",[t._v("ngx_http_access #基于 IP 地址的访问控制 (deny,allow)")]),t._v(" "),a("li",[t._v("ngx_http_limit_conn #限制来自客户端的连接的响应和处理速率")]),t._v(" "),a("li",[t._v("ngx_http_limit_req #限制来自客户端的请求的响应和处理速率")]),t._v(" "),a("li",[t._v("ngx_http_geo")]),t._v(" "),a("li",[t._v("ngx_http_map #创建任意的键值对变量")]),t._v(" "),a("li",[t._v("ngx_http_split_clients")]),t._v(" "),a("li",[t._v("ngx_http_referer #过滤 HTTP 头中 Referer 为空的对象")]),t._v(" "),a("li",[t._v("ngx_http_rewrite #通过正则表达式重定向请求")]),t._v(" "),a("li",[t._v("ngx_http_proxy")]),t._v(" "),a("li",[t._v("ngx_http_fastcgi #支持 fastcgi")]),t._v(" "),a("li",[t._v("ngx_http_uwsgi")]),t._v(" "),a("li",[t._v("ngx_http_scgi")]),t._v(" "),a("li",[t._v("ngx_http_memcached")]),t._v(" "),a("li",[t._v("ngx_http_empty_gif #从内存创建一个 1×1 的透明 gif 图片，可以快速调用")]),t._v(" "),a("li",[t._v("ngx_http_browser #解析 http 请求头部的 User-Agent 值")]),t._v(" "),a("li",[t._v("ngx_http_charset #指定网页编码")]),t._v(" "),a("li",[t._v("ngx_http_upstream_ip_hash")]),t._v(" "),a("li",[t._v("ngx_http_upstream_least_conn")]),t._v(" "),a("li",[t._v("ngx_http_upstream_keepalive")]),t._v(" "),a("li",[t._v("ngx_http_write_filter")]),t._v(" "),a("li",[t._v("ngx_http_header_filter")]),t._v(" "),a("li",[t._v("ngx_http_chunked_filter")]),t._v(" "),a("li",[t._v("ngx_http_range_header")]),t._v(" "),a("li",[t._v("ngx_http_gzip_filter")]),t._v(" "),a("li",[t._v("ngx_http_postpone_filter")]),t._v(" "),a("li",[t._v("ngx_http_ssi_filter")]),t._v(" "),a("li",[t._v("ngx_http_charset_filter")]),t._v(" "),a("li",[t._v("ngx_http_userid_filter")]),t._v(" "),a("li",[t._v("ngx_http_headers_filter #设置 http 响应头")]),t._v(" "),a("li",[t._v("ngx_http_copy_filter")]),t._v(" "),a("li",[t._v("ngx_http_range_body_filter")]),t._v(" "),a("li",[t._v("ngx_http_not_modified_filter")])]),t._v(" "),a("p",[a("strong",[t._v("可选 HTTP 模块")]),t._v(":")]),t._v(" "),a("ul",[a("li",[t._v("ngx_http_addition #在响应请求的页面开始或者结尾添加文本信息")]),t._v(" "),a("li",[t._v("ngx_http_degradation #在低内存的情况下允许服务器返回 444 或者 204 错误")]),t._v(" "),a("li",[t._v("ngx_http_perl")]),t._v(" "),a("li",[t._v("ngx_http_flv #支持将 Flash 多媒体信息按照流文件传输，可以根据客户端指定的开始位置返回 Flash")]),t._v(" "),a("li",[t._v("ngx_http_geoip #支持解析基于 GeoIP 数据库的客户端请求")]),t._v(" "),a("li",[t._v("ngx_google_perftools")]),t._v(" "),a("li",[t._v("ngx_http_gzip #gzip 压缩请求的响应")]),t._v(" "),a("li",[t._v("ngx_http_gzip_static #搜索并使用预压缩的以.gz 为后缀的文件代替一般文件响应客户端请求")]),t._v(" "),a("li",[t._v("ngx_http_image_filter #支持改变 png，jpeg，gif 图片的尺寸和旋转方向")]),t._v(" "),a("li",[t._v("ngx_http_mp4 #支持.mp4,.m4v,.m4a 等多媒体信息按照流文件传输，常与 ngx_http_flv 一起使用")]),t._v(" "),a("li",[t._v("ngx_http_random_index #当收到 / 结尾的请求时，在指定目录下随机选择一个文件作为 index")]),t._v(" "),a("li",[t._v("ngx_http_secure_link #支持对请求链接的有效性检查")]),t._v(" "),a("li",[t._v("ngx_http_ssl #支持 https")]),t._v(" "),a("li",[t._v("ngx_http_stub_status")]),t._v(" "),a("li",[t._v("ngx_http_sub_module #使用指定的字符串替换响应中的信息")]),t._v(" "),a("li",[t._v("ngx_http_dav #支持 HTTP 和 WebDAV 协议中的 PUT/DELETE/MKCOL/COPY/MOVE 方法")]),t._v(" "),a("li",[t._v("ngx_http_xslt #将 XML 响应信息使用 XSLT 进行转换")])]),t._v(" "),a("p",[a("strong",[t._v("邮件服务模块")]),t._v(":")]),t._v(" "),a("ul",[a("li",[t._v("ngx_mail_core")]),t._v(" "),a("li",[t._v("ngx_mail_pop3")]),t._v(" "),a("li",[t._v("ngx_mail_imap")]),t._v(" "),a("li",[t._v("ngx_mail_smtp")]),t._v(" "),a("li",[t._v("ngx_mail_auth_http")]),t._v(" "),a("li",[t._v("ngx_mail_proxy")]),t._v(" "),a("li",[t._v("ngx_mail_ssl")])]),t._v(" "),a("p",[a("strong",[t._v("第三方模块")]),t._v("：")]),t._v(" "),a("ul",[a("li",[t._v("echo-nginx-module #支持在 nginx 配置文件中使用 echo/sleep/time/exec 等类 Shell 命令")]),t._v(" "),a("li",[t._v("memc-nginx-module")]),t._v(" "),a("li",[t._v("rds-json-nginx-module #使 nginx 支持 json 数据的处理")]),t._v(" "),a("li",[t._v("lua-nginx-module")])]),t._v(" "),a("p",[t._v("感谢阅读~")])])}),[],!1,null,null,null);s.default=e.exports}}]);