(window.webpackJsonp=window.webpackJsonp||[]).push([[61],{646:function(s,t,a){s.exports=a.p+"assets/img/v8.ff908eb4.png"},647:function(s,t,a){s.exports=a.p+"assets/img/clinic.61e8bab2.png"},871:function(s,t,a){"use strict";a.r(t);var e=a(18),n=Object(e.a)({},(function(){var s=this,t=s.$createElement,e=s._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h1",{attrs:{id:"web服务高并发与压测"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#web服务高并发与压测"}},[s._v("#")]),s._v(" Web服务高并发与压测")]),s._v(" "),e("h2",{attrs:{id:"高并发"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#高并发"}},[s._v("#")]),s._v(" 高并发")]),s._v(" "),e("p",[s._v("高并发（High Concurrency）是互联网分布式系统架构设计中必须考虑的因素之一，它通常是指，通过设计保证"),e("strong",[s._v("系统能够同时并行处理很多请求")]),s._v("。 高并发相关常用的一些指标有"),e("strong",[s._v("响应时间 RT")]),s._v("（Response Time）、"),e("strong",[s._v("吞吐量")]),s._v("（Throughput）、"),e("strong",[s._v("每秒查询率")]),s._v(" QPS（Query Per Second）、"),e("strong",[s._v("每秒事务处理率")]),s._v(" TPS （Transactions Per Second）、"),e("strong",[s._v("并发用户数")]),s._v("等。")]),s._v(" "),e("ul",[e("li",[e("strong",[s._v("响应时间")]),s._v("：系统对请求做出响应的时间。例如系统处理一个 HTTP 请求需要 200ms，这个 200ms 就是系统的响应时间。")]),s._v(" "),e("li",[e("strong",[s._v("吞吐量")]),s._v("：单位时间内处理的请求数量。")]),s._v(" "),e("li",[e("strong",[s._v("QPS")]),s._v("：每秒响应请求数。在互联网领域，这个指标和吞吐量区分的没有这么明显。")]),s._v(" "),e("li",[e("strong",[s._v("TPS")]),s._v(": 每秒事务数，它是软件测试结果的测量单位。一个事务是指一个客户机向服务器发送请求然后服务器做出反应的过程。")]),s._v(" "),e("li",[e("strong",[s._v("RT")]),s._v(": 响应时间，执行一个请求从开始到最后收到响应数据所花费的总体时间，即从客户端发起请求到收到服务器响应结果的时间。")]),s._v(" "),e("li",[e("strong",[s._v("并发用户数")]),s._v("：同时承载正常使用系统功能的用户数量。例如一个即时通讯系统，同时在线量一定程度上代表了系统的并发用户数。")])]),s._v(" "),e("p",[s._v("从服务端视角看高并发服务端处理请求需要耗费服务端的资源，比如能同时开启的进程数、能同时运行的线程数、网络连接数、CPU、I/O、内存等，由于服务端资源是有限的，那么服务端能同时处理的请求也是有限的。")]),s._v(" "),e("p",[s._v("高并发问题的本质就是：资源的有限性")]),s._v(" "),e("h3",{attrs:{id:"高并发带来的问题"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#高并发带来的问题"}},[s._v("#")]),s._v(" 高并发带来的问题")]),s._v(" "),e("p",[s._v("服务端的处理和响应会越来越慢，甚至会丢弃部分请求不予处理，更严重的会导致服务端崩溃。高并发问题并不是互联网应用独有。")]),s._v(" "),e("p",[s._v("高并发问题的层面比如：前端请求、Web 服务器、Web 应用、数据库等。")]),s._v(" "),e("h3",{attrs:{id:"优化高并发的基本思路"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#优化高并发的基本思路"}},[s._v("#")]),s._v(" 优化高并发的基本思路")]),s._v(" "),e("p",[e("strong",[s._v("客户端处理的基本原则是能不访问服务端就不要访问")])]),s._v(" "),e("ul",[e("li",[s._v("尽量减少请求数量，比如：依靠客户端自身的缓存或处理能力")]),s._v(" "),e("li",[s._v("尽量减少对服务端资源的不必要耗费，比如：重复使用某些资源，如连接池")])]),s._v(" "),e("p",[e("strong",[s._v("服务端的处理基本原则是分而治之，并提高单个请求的处理速度")])]),s._v(" "),e("ul",[e("li",[e("p",[s._v("增加资源供给")]),s._v(" "),e("ul",[e("li",[s._v("更大的网络带宽")]),s._v(" "),e("li",[s._v("使用更高配置的服务器")]),s._v(" "),e("li",[s._v("使用高性能的 Web 服务器")]),s._v(" "),e("li",[s._v("使用高性能的数据库")])])]),s._v(" "),e("li",[e("p",[s._v("请求分流")]),s._v(" "),e("ul",[e("li",[e("p",[s._v("使用集群")])]),s._v(" "),e("li",[e("p",[s._v("分布式的系统架构")])])])]),s._v(" "),e("li",[e("p",[s._v("应用优化")]),s._v(" "),e("ul",[e("li",[s._v("使用更高效的编程语言")]),s._v(" "),e("li",[s._v("优化处理业务逻辑的算法")]),s._v(" "),e("li",[s._v("优化访问数据库的 SQL")])])])]),s._v(" "),e("h2",{attrs:{id:"web-压力测试"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#web-压力测试"}},[s._v("#")]),s._v(" Web 压力测试")]),s._v(" "),e("p",[s._v("压力测试（Stress Test），也称为强度测试、负载测试，通过加压测试，确定一个系统的瓶颈或者应用不能服务的性能点，来获得应用系统能提供的最大的服务级别的测试。目的是验证软件是否符合客户需求，提高应用系统可用性，减少系统的宕机时间和因此带来的损失。最终产物是包括测试环境，方法和结果的测试报告。")]),s._v(" "),e("blockquote",[e("p",[s._v("通俗点说压力测试的目标，是搞死服务器，从而找到瓶颈点")])]),s._v(" "),e("h3",{attrs:{id:"测试工具"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#测试工具"}},[s._v("#")]),s._v(" 测试工具")]),s._v(" "),e("p",[e("strong",[e("a",{attrs:{href:"https://github.com/mcollina/autocannon#usage",target:"_blank",rel:"noopener noreferrer"}},[s._v("autocannon"),e("OutboundLink")],1)])]),s._v(" "),e("p",[s._v("一款用 Node.js 编写的快速 HTTP / 1.1 基准测试工具。")]),s._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[s._v("npm")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("install")]),s._v(" -g autocannon\n")])])]),e("p",[e("strong",[s._v("使用方式")])]),s._v(" "),e("p",[s._v("提供两种使用方式")]),s._v(" "),e("ol",[e("li",[s._v("命令行 "),e("code",[s._v("autocannon -c 100 -d 5 -p 2 http://127.0.0.1:3000/test")]),s._v(" 简单快速")]),s._v(" "),e("li",[s._v("api 调用 "),e("code",[s._v("autocannon(opts[, cb])")]),s._v(" 便于编写脚本")])]),s._v(" "),e("p",[s._v("关键参数有这么几个")]),s._v(" "),e("ul",[e("li",[e("code",[s._v("-c/--connections NUM")]),s._v(" 并发连接的数量，默认 10")]),s._v(" "),e("li",[e("code",[s._v("-p/--pipelining NUM")]),s._v(" 每个连接的流水线请求请求数。默认 1")]),s._v(" "),e("li",[e("code",[s._v("-d/--duration SEC")]),s._v(" 执行的时间，单位秒")]),s._v(" "),e("li",[e("code",[s._v("-m/--method METHOD")]),s._v(" 请求类型 默认 GET")]),s._v(" "),e("li",[e("code",[s._v("-b/--body BODY")]),s._v(" 请求报文体")])]),s._v(" "),e("p",[e("strong",[s._v("使用样例")])]),s._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 第一步 启动服务")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("node")]),s._v(" server.js\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 第二步，运行压测命令")]),s._v("\nmrgaogang@mrgaogang-MB0 autocannon % "),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")]),s._v("autocannon -c "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),s._v(" -p "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v(" -d "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v(" http://127.0.0.1:3000"),e("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")])]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 生成的报告如下")]),s._v("\nRunning 10s "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("test")]),s._v(" @ http://127.0.0.1:3000\n"),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),s._v(" connections with "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v(" pipelining factor\n\n┌─────────┬──────┬──────┬───────┬───────┬─────────┬─────────┬───────┐\n│ Stat    │ "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.5")]),s._v("% │ "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("50")]),s._v("%  │ "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("97.5")]),s._v("% │ "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("99")]),s._v("%   │ Avg     │ Stdev   │ Max   │\n├─────────┼──────┼──────┼───────┼───────┼─────────┼─────────┼───────┤\n│ Latency │ "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v(" ms │ "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),s._v(" ms │ "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),s._v(" ms  │ "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("11")]),s._v(" ms │ "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("6.38")]),s._v(" ms │ "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.85")]),s._v(" ms │ "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("62")]),s._v(" ms │\n└─────────┴──────┴──────┴───────┴───────┴─────────┴─────────┴───────┘\n┌───────────┬─────────┬─────────┬─────────┬─────────┬─────────┬─────────┬─────────┐\n│ Stat      │ "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("%      │ "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.5")]),s._v("%    │ "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("50")]),s._v("%     │ "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("97.5")]),s._v("%   │ Avg     │ Stdev   │ Min     │\n├───────────┼─────────┼─────────┼─────────┼─────────┼─────────┼─────────┼─────────┤\n│ Req/Sec   │ "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("58335")]),s._v("   │ "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("58335")]),s._v("   │ "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("73791")]),s._v("   │ "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("75391")]),s._v("   │ "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("72094.4")]),s._v(" │ "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("4736.85")]),s._v(" │ "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("58324")]),s._v("   │\n├───────────┼─────────┼─────────┼─────────┼─────────┼─────────┼─────────┼─────────┤\n│ Bytes/Sec │ "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("6.48")]),s._v(" MB │ "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("6.48")]),s._v(" MB │ "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("8.19")]),s._v(" MB │ "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("8.37")]),s._v(" MB │ "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),s._v(" MB    │ "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("525")]),s._v(" kB  │ "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("6.47")]),s._v(" MB │\n└───────────┴─────────┴─────────┴─────────┴─────────┴─────────┴─────────┴─────────┘\n\nReq/Bytes counts sampled once per second.\n\n721k requests "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v(".02s, "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("80")]),s._v(" MB "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("read")]),s._v("\n")])])]),e("ul",[e("li",[s._v("Latency:"),e("strong",[s._v("接口的延迟程度")])]),s._v(" "),e("li",[s._v("Req/Sec: "),e("strong",[s._v("每秒能处理的请求数 TPS")])]),s._v(" "),e("li",[s._v("Bytes/Sec: "),e("strong",[s._v("每秒返回的字节数")])])]),s._v(" "),e("h3",{attrs:{id:"方法一-性能文件与分析"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#方法一-性能文件与分析"}},[s._v("#")]),s._v(" 方法一: 性能文件与分析")]),s._v(" "),e("p",[s._v("通过压测工具可帮助我们快速找到有问题的接口或方法（出现阻塞/内存泄漏），对接口或方法进行剖析并不可视化，可能很多时候需要一份性能报告，进行更好的剖析。")]),s._v(" "),e("h4",{attrs:{id:"v8-profiler"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#v8-profiler"}},[s._v("#")]),s._v(" V8 Profiler")]),s._v(" "),e("p",[s._v("V8 官方提供了"),e("a",{attrs:{href:"https://github.com/v8/v8/wiki/V8-Profiler",target:"_blank",rel:"noopener noreferrer"}},[s._v("Profiler 工具"),e("OutboundLink")],1),s._v(" 使用快速收集性能数据")]),s._v(" "),e("ul",[e("li",[e("ol",[e("li",[e("strong",[s._v("生成报告")])])]),s._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[s._v("node "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),s._v("prof server"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("js "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// server.js 服务入口文件")]),s._v("\n")])])]),e("p",[s._v("在启动命令中加上 "),e("code",[s._v("--prof")]),s._v(" ,在项目根目录会生成 "),e("code",[s._v("isolate-xxxxxxx-v8.log")]),s._v(" 格式的文件，用来记录运行期间的调用栈和时间等信息。")])]),s._v(" "),e("li",[e("ol",{attrs:{start:"2"}},[e("li",[e("strong",[s._v("分析报告")])])]),s._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[s._v("node")]),s._v(" --prof-process --preprocess isolate-xxxxxxxx-v8.log "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" v8.json\n")])])]),e("p",[s._v("生成的 log 文件分析，生成报告包含六部分：Shared libraries、JavaScript、C++、Summary、C++ entry points 和 Bottom up (heavy) profile，JavaScript 部分列出了 JavaScript 代码执行所占用的 CPU ticks（CPU 时钟周期），C++ 部分列出了 C++ 代码执行所占用的 CPU ticks，Summary 列出了各个部分的占比，Bottom up 列出了所有 CPU 占用时间从大到小的函数及堆栈信息。")])]),s._v(" "),e("li",[e("p",[e("strong",[s._v("检查性能")])])])]),s._v(" "),e("p",[s._v("文件的方式不直观，那我们换个 UI 界面的，步骤如下")]),s._v(" "),e("ul",[e("li",[s._v("先 clone v8 的仓库下来 "),e("code",[s._v("git clone https://github.com/v8/v8.git")])]),s._v(" "),e("li",[s._v("将日志文件转换成 json 格式 "),e("code",[s._v("node --prof-process --preprocess isolate-xxxxxxxxxx-v8.log > v8.json")])]),s._v(" "),e("li",[s._v("打开 "),e("code",[s._v("v8/tools/profview/index.html")]),s._v(" 文件，是个静态界面，在界面中心选择刚生成的 v8.json 文件，文件解析成功后，界面如下")])]),s._v(" "),e("p",[e("img",{attrs:{src:a(646),alt:""}})]),s._v(" "),e("h3",{attrs:{id:"方法一-clinic"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#方法一-clinic"}},[s._v("#")]),s._v(" 方法一: clinic")]),s._v(" "),e("p",[s._v("我们需要用一些方法去诊断我们的程序。一个很不错的诊断性能问题的工具便是 "),e("a",{attrs:{href:"https://link.zhihu.com/?target=https%3A//github.com/nearform/node-clinic",target:"_blank",rel:"noopener noreferrer"}},[s._v("Node Clinic"),e("OutboundLink")],1),s._v("。它也可以用 npm 安装:")]),s._v(" "),e("ol",[e("li",[s._v("安装依赖")])]),s._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[s._v("npm")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("install")]),s._v(" -g clinic\n")])])]),e("ol",{attrs:{start:"2"}},[e("li",[s._v("运行压测检测命令:")])]),s._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[s._v(" clinic doctor -- "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("node")]),s._v(" server.js  "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# server.js为node入口文件")]),s._v("\n")])])]),e("ol",{attrs:{start:"3"}},[e("li",[s._v("运行压测命令:")])]),s._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[s._v("autocannon -c "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),s._v(" -p "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v(" -d "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v(" http://127.0.0.1:3000\nRunning 10s "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("test")]),s._v(" @ http://127.0.0.1:3000\n")])])]),e("p",[s._v("效果如下:")]),s._v(" "),e("p",[e("img",{attrs:{src:a(647),alt:""}})]),s._v(" "),e("h2",{attrs:{id:"参考"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[s._v("#")]),s._v(" 参考")]),s._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"https://juejin.cn/post/6844903665166188551#heading-4",target:"_blank",rel:"noopener noreferrer"}},[s._v("对 node 工程进行压力测试与性能分析"),e("OutboundLink")],1)])])])}),[],!1,null,null,null);t.default=n.exports}}]);