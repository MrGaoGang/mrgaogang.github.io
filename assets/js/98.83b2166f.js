(window.webpackJsonp=window.webpackJsonp||[]).push([[98],{395:function(e,t,n){"use strict";n.r(t);var a=n(1),r=Object(a.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"javascript-设计模式核⼼原理与应⽤实践"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#javascript-设计模式核⼼原理与应⽤实践","aria-hidden":"true"}},[e._v("#")]),e._v(" JavaScript 设计模式核⼼原理与应⽤实践")]),e._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"#javascript-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%A0%B8%E2%BC%BC%E5%8E%9F%E7%90%86%E4%B8%8E%E5%BA%94%E2%BD%A4%E5%AE%9E%E8%B7%B5"}},[e._v("JavaScript 设计模式核⼼原理与应⽤实践")]),e._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"#-0-%E5%BC%80%E7%AF%87%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%B8%88%E7%9A%84%E6%88%90%E9%95%BF%E8%AE%BA"}},[e._v("# 0. 开篇：前端工程师的成长论")]),e._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"#-01-%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%B8%88%E9%A6%96%E5%85%88%E6%98%AF%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%B8%88"}},[e._v("# 0.1 前端工程师，首先是软件工程师")])])])]),e._v(" "),n("li",[n("a",{attrs:{href:"#-1-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%9A%84%E9%81%93%E4%B8%8E%E6%9C%AF"}},[e._v("# 1. 设计模式的“道”与“术”")]),e._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"#-11-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%A9%B6%E7%AB%9F%E6%9C%89%E7%9D%80%E6%80%8E%E6%A0%B7%E7%9A%84%E5%8A%9B%E9%87%8F"}},[e._v("# 1.1 设计模式，究竟有着怎样的力量？")])]),e._v(" "),n("li",[n("a",{attrs:{href:"#-12-solid%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99"}},[e._v("# 1.2 SOLID设计原则")])]),e._v(" "),n("li",[n("a",{attrs:{href:"#-13-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%9A%84%E6%A0%B8%E5%BF%83%E6%80%9D%E6%83%B3%E5%B0%81%E8%A3%85%E5%8F%98%E5%8C%96"}},[e._v("# 1.3 设计模式的核心思想——封装变化")])]),e._v(" "),n("li",[n("a",{attrs:{href:"#-14-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%9A%84%E6%9C%AF"}},[e._v("# 1.4 设计模式的“术”")])]),e._v(" "),n("li",[n("a",{attrs:{href:"#-15-%E4%BB%8E-javac-%E5%88%B0-javascript-%E7%9A%84%E8%BF%81%E7%A7%BB"}},[e._v("# 1.5 从 Java/C++ 到 JavaScript 的迁移")])])])]),e._v(" "),n("li",[n("a",{attrs:{href:"#-2-%E5%88%9B%E5%BB%BA%E5%9E%8B%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F%C2%B7%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E5%8C%BA%E5%88%86%E5%8F%98%E4%B8%8E%E4%B8%8D%E5%8F%98"}},[e._v("# 2. 创建型：工厂模式·简单工厂——区分“变与不变”")]),e._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"#-21-%E5%85%88%E6%9D%A5%E8%AF%B4%E8%AF%B4%E6%9E%84%E9%80%A0%E5%99%A8"}},[e._v("# 2.1 先来说说构造器")])]),e._v(" "),n("li",[n("a",{attrs:{href:"#-21-%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F"}},[e._v("# 2.1 简单工厂模式")])]),e._v(" "),n("li",[n("a",{attrs:{href:"#-23-%E5%B0%8F%E7%BB%93"}},[e._v("# 2.3 小结")])])])]),e._v(" "),n("li",[n("a",{attrs:{href:"#-3-%E5%88%9B%E5%BB%BA%E5%9E%8B%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F%C2%B7%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E7%90%86%E8%A7%A3%E5%BC%80%E6%94%BE%E5%B0%81%E9%97%AD"}},[e._v("# 3. 创建型：工厂模式·抽象工厂——理解“开放封闭”")]),e._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"#-31-%E4%B8%80%E4%B8%AA%E4%B8%8D%E7%AE%80%E5%8D%95%E7%9A%84%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E5%BC%95%E5%8F%91%E7%9A%84%E5%91%BD%E6%A1%88"}},[e._v("# 3.1 一个不简单的简单工厂引发的命案")])]),e._v(" "),n("li",[n("a",{attrs:{href:"#-32-%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F"}},[e._v("# 3.2 抽象工厂模式")])]),e._v(" "),n("li",[n("a",{attrs:{href:"#-33-%E6%80%BB%E7%BB%93"}},[e._v("# 3.3 总结")])])])]),e._v(" "),n("li",[n("a",{attrs:{href:"#-4-%E5%88%9B%E5%BB%BA%E5%9E%8B%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8Fvuex%E7%9A%84%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86%E5%93%B2%E5%AD%A6"}},[e._v("# 4. 创建型：单例模式——Vuex的数据管理哲学")]),e._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"#-41-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%80%9D%E8%B7%AF"}},[e._v("# 4.1 单例模式的实现思路")])]),e._v(" "),n("li",[n("a",{attrs:{href:"#-42-%E7%94%9F%E4%BA%A7%E5%AE%9E%E8%B7%B5vuex%E4%B8%AD%E7%9A%84%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F"}},[e._v("# 4.2 生产实践：Vuex中的单例模式")]),e._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"#-421-%E7%90%86%E8%A7%A3-vuex-%E4%B8%AD%E7%9A%84-store"}},[e._v("# 4.2.1 理解 Vuex 中的 Store")])]),e._v(" "),n("li",[n("a",{attrs:{href:"#-422-vuex%E5%A6%82%E4%BD%95%E7%A1%AE%E4%BF%9Dstore%E7%9A%84%E5%94%AF%E4%B8%80%E6%80%A7"}},[e._v("# 4.2.2 Vuex如何确保Store的唯一性")])])])]),e._v(" "),n("li",[n("a",{attrs:{href:"#-43-%E5%B0%8F%E7%BB%93"}},[e._v("# 4.3 小结")])])])]),e._v(" "),n("li",[n("a",{attrs:{href:"#-5-%E5%88%9B%E5%BB%BA%E5%9E%8B%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E9%9D%A2%E8%AF%95%E7%9C%9F%E9%A2%98%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E5%AD%A6"}},[e._v("# 5. 创建型：单例模式——面试真题手把手教学")]),e._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"#-51-%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA-storage"}},[e._v("# 5.1 实现一个 Storage")])]),e._v(" "),n("li",[n("a",{attrs:{href:"#-52-%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E5%85%A8%E5%B1%80%E7%9A%84%E6%A8%A1%E6%80%81%E6%A1%86"}},[e._v("# 5.2 实现一个全局的模态框")])])])]),e._v(" "),n("li",[n("a",{attrs:{href:"#-6-%E5%88%9B%E5%BB%BA%E5%9E%8B%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F%E8%B0%88prototype%E6%97%A0%E5%B0%8F%E4%BA%8B"}},[e._v("# 6. 创建型：原型模式——谈Prototype无小事")]),e._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"#-61-%E4%BB%A5%E7%B1%BB%E4%B8%BA%E4%B8%AD%E5%BF%83%E7%9A%84%E8%AF%AD%E8%A8%80%E5%92%8C%E4%BB%A5%E5%8E%9F%E5%9E%8B%E4%B8%BA%E4%B8%AD%E5%BF%83%E7%9A%84%E8%AF%AD%E8%A8%80"}},[e._v("# 6.1 以类为中心的语言和以原型为中心的语言")]),e._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"#-611-java-%E4%B8%AD%E7%9A%84%E7%B1%BB"}},[e._v("# 6.1.1 Java 中的类")])]),e._v(" "),n("li",[n("a",{attrs:{href:"#-612-javascript-%E4%B8%AD%E7%9A%84%E7%B1%BB"}},[e._v("# 6.1.2 JavaScript 中的“类”")])])])]),e._v(" "),n("li",[n("a",{attrs:{href:"#-62-%E8%B0%88%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F%E5%85%B6%E5%AE%9E%E6%98%AF%E8%B0%88%E5%8E%9F%E5%9E%8B%E8%8C%83%E5%BC%8F"}},[e._v("# 6.2 谈原型模式，其实是谈原型范式")]),e._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"#-621-%E5%8E%9F%E5%9E%8B"}},[e._v("# 6.2.1 原型")])]),e._v(" "),n("li",[n("a",{attrs:{href:"#-621-%E5%8E%9F%E5%9E%8B%E9%93%BE"}},[e._v("# 6.2.1 "),n("strong",[e._v("原型链")])])])])]),e._v(" "),n("li",[n("a",{attrs:{href:"#-63-%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%B7%B1%E6%8B%B7%E8%B4%9D"}},[e._v("# 6.3 对象的深拷贝")])])])]),e._v(" "),n("li",[n("a",{attrs:{href:"#-7-%E7%BB%93%E6%9E%84%E5%9E%8B%E8%A3%85%E9%A5%B0%E5%99%A8%E6%A8%A1%E5%BC%8F%E5%AF%B9%E8%B1%A1%E8%A3%85%E4%B8%8A%E5%AE%83%E5%B0%B1%E5%83%8F%E5%BC%80%E4%BA%86%E6%8C%82"}},[e._v("# 7. 结构型：装饰器模式——对象装上它，就像开了挂")]),e._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"#-71-%E7%94%9F%E6%B4%BB%E4%B8%AD%E7%9A%84%E8%A3%85%E9%A5%B0%E5%99%A8"}},[e._v("# 7.1 生活中的装饰器")]),e._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"#-712-%E8%A3%85%E9%A5%B0%E5%99%A8%E7%9A%84%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF"}},[e._v("# 7.1.2 装饰器的应用场景")])])])]),e._v(" "),n("li",[n("a",{attrs:{href:"#-72-%E8%A3%85%E9%A5%B0%E5%99%A8%E6%A8%A1%E5%BC%8F%E5%88%9D%E7%9B%B8%E8%A7%81"}},[e._v("# 7.2 装饰器模式初相见")])]),e._v(" "),n("li",[n("a",{attrs:{href:"#-73-%E5%80%BC%E5%BE%97%E5%85%B3%E6%B3%A8%E7%9A%84%E7%BB%86%E8%8A%82"}},[e._v("# 7.3 值得关注的细节")]),e._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"#-731-%E5%8D%95%E4%B8%80%E8%81%8C%E8%B4%A3%E5%8E%9F%E5%88%99"}},[e._v("# 7.3.1 单一职责原则")])])])])])]),e._v(" "),n("li",[n("a",{attrs:{href:"#-8-%E7%BB%93%E6%9E%84%E5%9E%8B%E8%A3%85%E9%A5%B0%E5%99%A8%E6%A8%A1%E5%BC%8F%E6%B7%B1%E5%85%A5%E8%A3%85%E9%A5%B0%E5%99%A8%E5%8E%9F%E7%90%86%E4%B8%8E%E4%BC%98%E7%A7%80%E6%A1%88%E4%BE%8B"}},[e._v("# 8. 结构型：装饰器模式——深入装饰器原理与优秀案例")]),e._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"#-81-%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86es7-%E4%B8%AD%E7%9A%84%E8%A3%85%E9%A5%B0%E5%99%A8"}},[e._v("# 8.1 前置知识：ES7 中的装饰器")])]),e._v(" "),n("li",[n("a",{attrs:{href:"#-82-%E8%A3%85%E9%A5%B0%E5%99%A8%E8%AF%AD%E6%B3%95%E7%B3%96%E8%83%8C%E5%90%8E%E7%9A%84%E6%95%85%E4%BA%8B"}},[e._v("# 8.2 装饰器语法糖背后的故事")]),e._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"#-821-part1%E5%87%BD%E6%95%B0%E4%BC%A0%E5%8F%82%E8%B0%83%E7%94%A8"}},[e._v("# 8.2.1 Part1：函数传参&调用")])]),e._v(" "),n("li",[n("a",{attrs:{href:"#-822-part2%E5%B0%86%E5%B1%9E%E6%80%A7%E6%8F%8F%E8%BF%B0%E5%AF%B9%E8%B1%A1%E4%BA%A4%E5%88%B0%E4%BD%A0%E6%89%8B%E9%87%8C"}},[e._v("# 8.2.2 Part2：将“属性描述对象”交到你手里")])])])]),e._v(" "),n("li",[n("a",{attrs:{href:"#-83-%E7%94%9F%E4%BA%A7%E5%AE%9E%E8%B7%B5"}},[e._v("# 8.3 生产实践")]),e._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"#-831-react%E4%B8%AD%E7%9A%84%E8%A3%85%E9%A5%B0%E5%99%A8hoc"}},[e._v("# 8.3.1 React中的装饰器：HOC")])]),e._v(" "),n("li",[n("a",{attrs:{href:"#-832-%E4%BD%BF%E7%94%A8%E8%A3%85%E9%A5%B0%E5%99%A8%E6%94%B9%E5%86%99-redux-connect"}},[e._v("# 8.3.2 使用装饰器改写 Redux connect")])]),e._v(" "),n("li",[n("a",{attrs:{href:"#-833-%E4%BC%98%E8%B4%A8%E7%9A%84%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E6%9D%90%E6%96%99core%5C-decorators"}},[e._v("# 8.3.3 优质的源码阅读材料——core-decorators")])])])])])]),e._v(" "),n("li",[n("a",{attrs:{href:"#-9-%E7%BB%93%E6%9E%84%E5%9E%8B%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F%E5%85%BC%E5%AE%B9%E4%BB%A3%E7%A0%81%E5%B0%B1%E6%98%AF%E4%B8%80%E6%8A%8A%E6%A2%AD"}},[e._v("# 9. 结构型：适配器模式——兼容代码就是一把梭")]),e._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"#-91-%E7%94%9F%E6%B4%BB%E4%B8%AD%E7%9A%84%E9%80%82%E9%85%8D%E5%99%A8"}},[e._v("# 9.1 生活中的适配器")])]),e._v(" "),n("li",[n("a",{attrs:{href:"#-92-%E5%85%BC%E5%AE%B9%E6%8E%A5%E5%8F%A3%E5%B0%B1%E6%98%AF%E4%B8%80%E6%8A%8A%E6%A2%AD%E9%80%82%E9%85%8D%E5%99%A8%E7%9A%84%E4%B8%9A%E5%8A%A1%E5%9C%BA%E6%99%AF"}},[e._v("# 9.2 兼容接口就是一把梭——适配器的业务场景")])])])]),e._v(" "),n("li",[n("a",{attrs:{href:"#-93-%E7%94%9F%E4%BA%A7%E5%AE%9E%E8%B7%B5axios%E4%B8%AD%E7%9A%84%E9%80%82%E9%85%8D%E5%99%A8"}},[e._v("# 9.3 生产实践：axios中的适配器")]),e._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"#-94-%E5%B0%8F%E7%BB%93"}},[e._v("# 9.4 小结")])])])]),e._v(" "),n("li",[n("a",{attrs:{href:"#-10-%E7%BB%93%E6%9E%84%E5%9E%8B%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F%E4%B8%80%E5%AE%B6%E5%B0%8F%E5%9E%8B%E5%A9%9A%E4%BB%8B%E6%89%80%E7%9A%84%E5%8F%91%E5%AE%B6%E8%87%B4%E5%AF%8C%E4%B9%8B%E8%B7%AF"}},[e._v("# 10 结构型：代理模式——一家小型婚介所的发家致富之路")]),e._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"#-101-%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%E8%83%8C%E5%90%8E%E7%9A%84%E6%95%85%E4%BA%8B"}},[e._v("# 10.1 科学上网背后的故事")])]),e._v(" "),n("li",[n("a",{attrs:{href:"#-102-%E7%94%A8%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F%E5%BC%80%E4%B8%80%E5%AE%B6%E5%A9%9A%E5%A7%BB%E4%BB%8B%E7%BB%8D%E6%89%80%E5%90%A7"}},[e._v("# 10.2 用代理模式开一家婚姻介绍所吧")]),e._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"#-1021-%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86-es6%E4%B8%AD%E7%9A%84proxy"}},[e._v("# 10.2.1 前置知识： ES6中的Proxy")])]),e._v(" "),n("li",[n("a",{attrs:{href:"#-1022-%E5%A9%9A%E4%BB%8B%E6%89%80%E7%9A%84%E5%AE%9E%E7%8E%B0"}},[e._v("# 10.2.2 “婚介所”的实现")])])])])])]),e._v(" "),n("li",[n("a",{attrs:{href:"#-11-%E7%BB%93%E6%9E%84%E5%9E%8B%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F%E5%BA%94%E7%94%A8%E5%AE%9E%E8%B7%B5%E8%8C%83%E4%BE%8B%E8%A7%A3%E6%9E%90"}},[e._v("# 11 结构型：代理模式——应用实践范例解析")]),e._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"#-111-%E4%BA%8B%E4%BB%B6%E4%BB%A3%E7%90%86"}},[e._v("# 11.1 事件代理")])]),e._v(" "),n("li",[n("a",{attrs:{href:"#-112-%E8%99%9A%E6%8B%9F%E4%BB%A3%E7%90%86"}},[e._v("# 11.2 虚拟代理")])]),e._v(" "),n("li",[n("a",{attrs:{href:"#-113-%E7%BC%93%E5%AD%98%E4%BB%A3%E7%90%86"}},[e._v("# 11.3 缓存代理")])]),e._v(" "),n("li",[n("a",{attrs:{href:"#-114-%E4%BF%9D%E6%8A%A4%E4%BB%A3%E7%90%86"}},[e._v("# 11.4 保护代理")])])])]),e._v(" "),n("li",[n("a",{attrs:{href:"#-12-%E8%A1%8C%E4%B8%BA%E5%9E%8B%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F%E9%87%8D%E6%9E%84%E5%B0%8F%E8%83%BD%E6%89%8B%E6%8B%86%E5%88%86%E8%83%96%E9%80%BB%E8%BE%91"}},[e._v("# 12. 行为型：策略模式——重构小能手，拆分“胖逻辑”")]),e._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"#-121-%E5%85%88%E6%9D%A5%E7%9C%8B%E4%B8%80%E4%B8%AA%E7%9C%9F%E5%AE%9E%E5%9C%BA%E6%99%AF"}},[e._v("# 12.1 先来看一个真实场景")])]),e._v(" "),n("li",[n("a",{attrs:{href:"#-122-if%5C-else-%E4%BE%A0%E4%BA%BA%E4%BA%BA%E5%96%8A%E6%89%93"}},[e._v("# 12.2 if-else 侠，人人喊打")])]),e._v(" "),n("li",[n("a",{attrs:{href:"#-123-%E9%87%8D%E6%9E%84%E8%AF%A2%E4%BB%B7%E9%80%BB%E8%BE%91"}},[e._v("# 12.3 重构询价逻辑")])]),e._v(" "),n("li",[n("a",{attrs:{href:"#-124-%E8%BF%99%E5%B0%B1%E6%98%AF%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F"}},[e._v("# 12.4 这，就是策略模式！")])])])]),e._v(" "),n("li",[n("a",{attrs:{href:"#-13-%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F"}},[e._v("# 13. 状态模式")]),e._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"#-131-%E4%B8%80%E6%9D%AF%E5%92%96%E5%95%A1%E5%B8%A6%E6%9D%A5%E7%9A%84%E6%80%9D%E8%80%83"}},[e._v("# 13.1 一杯咖啡带来的思考")])]),e._v(" "),n("li",[n("a",{attrs:{href:"#-132-%E4%B8%80%E5%8F%B0%E5%92%96%E5%95%A1%E6%9C%BA%E7%9A%84%E8%AF%9E%E7%94%9F"}},[e._v("# 13.2 一台咖啡机的诞生")])]),e._v(" "),n("li",[n("a",{attrs:{href:"#-133-%E4%B8%8D%E6%88%91%E6%9D%8E%E9%9B%B7%E5%BF%85%E4%B8%8D%E5%8F%AF%E8%83%BD%E5%86%8D%E5%81%9A-if%5C-else-%E4%BE%A0"}},[e._v("# 13.3 不，我李雷必不可能再做 if-else 侠")])]),e._v(" "),n("li",[n("a",{attrs:{href:"#-134-%E6%94%B9%E9%80%A0%E5%92%96%E5%95%A1%E6%9C%BA%E7%9A%84%E7%8A%B6%E6%80%81%E5%88%87%E6%8D%A2%E6%9C%BA%E5%88%B6"}},[e._v("# 13.4 改造咖啡机的状态切换机制")])]),e._v(" "),n("li",[n("a",{attrs:{href:"#-135-%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F%E5%A4%8D%E7%9B%98"}},[e._v("# 13.5 状态模式复盘")])])])]),e._v(" "),n("li",[n("a",{attrs:{href:"#-14-%E8%A1%8C%E4%B8%BA%E5%9E%8B%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F%E9%AC%BC%E6%95%85%E4%BA%8B%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86%E6%8B%89%E4%BA%86%E4%B8%80%E4%B8%AA%E9%92%89%E9%92%89%E7%BE%A4"}},[e._v("# 14 行为型：观察者模式——鬼故事：产品经理拉了一个钉钉群")]),e._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"#-141-%E7%94%9F%E6%B4%BB%E4%B8%AD%E7%9A%84%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F"}},[e._v("# 14.1 生活中的观察者模式")])]),e._v(" "),n("li",[n("a",{attrs:{href:"#-142-%E5%9C%A8%E5%AE%9E%E8%B7%B5%E4%B8%AD%E7%90%86%E8%A7%A3%E5%AE%9A%E4%B9%89"}},[e._v("# 14.2 在实践中理解定义")])])])]),e._v(" "),n("li",[n("a",{attrs:{href:"#-15-%E8%A1%8C%E4%B8%BA%E5%9E%8B%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F%E9%9D%A2%E8%AF%95%E7%9C%9F%E9%A2%98%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E5%AD%A6"}},[e._v("# 15. 行为型：观察者模式——面试真题手把手教学")]),e._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"#-151-vue%E6%95%B0%E6%8D%AE%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A%E5%93%8D%E5%BA%94%E5%BC%8F%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86"}},[e._v("# 15.1 Vue数据双向绑定（响应式系统）的实现原理")]),e._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"#-1511-%E6%A0%B8%E5%BF%83%E4%BB%A3%E7%A0%81"}},[e._v("# 15.1.1 核心代码")])])])]),e._v(" "),n("li",[n("a",{attrs:{href:"#-152-%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AAevent-bus-event-emitter"}},[e._v("# 15.2 实现一个Event Bus/ Event Emitter")])]),e._v(" "),n("li",[n("a",{attrs:{href:"#-153-%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F%E4%B8%8E%E5%8F%91%E5%B8%83%5C-%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%8C%BA%E5%88%AB%E6%98%AF%E4%BB%80%E4%B9%88"}},[e._v("# 15.3 观察者模式与发布-订阅模式的区别是什么？")])])])]),e._v(" "),n("li",[n("a",{attrs:{href:"#-16-%E8%A1%8C%E4%B8%BA%E5%9E%8B%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F%E7%9C%9F%C2%B7%E9%81%8D%E5%8E%86%E4%B8%93%E5%AE%B6"}},[e._v("# 16. 行为型：迭代器模式——真·遍历专家")]),e._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"#-161-%E5%85%AC%E5%85%83%E5%89%8D%E7%9A%84%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F"}},[e._v("# 16.1 “公元前”的迭代器模式")])]),e._v(" "),n("li",[n("a",{attrs:{href:"#-162-es6%E5%AF%B9%E8%BF%AD%E4%BB%A3%E5%99%A8%E7%9A%84%E5%AE%9E%E7%8E%B0"}},[e._v("# 16.2 ES6对迭代器的实现")])]),e._v(" "),n("li",[n("a",{attrs:{href:"#-163-%E4%B8%80%E8%B5%B7%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E8%BF%AD%E4%BB%A3%E5%99%A8%E7%94%9F%E6%88%90%E5%87%BD%E6%95%B0%E5%90%A7"}},[e._v("# 16.3 一起实现一个迭代器生成函数吧!")])])])])])])]),e._v(" "),n("p",[n("a",{attrs:{href:"#_0-%E5%BC%80%E7%AF%87%EF%BC%9A%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%B8%88%E7%9A%84%E6%88%90%E9%95%BF%E8%AE%BA"}},[e._v("#")]),e._v(" 0. 开篇：前端工程师的成长论")]),e._v(" "),n("h2",{attrs:{id:"_0-开篇：前端工程师的成长论"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_0-开篇：前端工程师的成长论","aria-hidden":"true"}},[e._v("#")]),e._v(" "),n("a",{attrs:{href:"#_0-%E5%BC%80%E7%AF%87%EF%BC%9A%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%B8%88%E7%9A%84%E6%88%90%E9%95%BF%E8%AE%BA"}},[e._v("#")]),e._v(" 0. 开篇：前端工程师的成长论")]),e._v(" "),n("p",[e._v("能够决定一个前端工程师的本质的，不是那些瞬息万变的技术点，而是那些"),n("strong",[e._v("不变的东西。")])]),e._v(" "),n("p",[e._v("所谓“不变的东西”，说的就是这种"),n("strong",[e._v("驾驭技术的能力。")])]),e._v(" "),n("p",[e._v("具体来说，它分为以下三个层次：")]),e._v(" "),n("ul",[n("li",[e._v("能用健壮的代码去解决具体的问题；")]),e._v(" "),n("li",[e._v("能用抽象的思维去应对复杂的系统；")]),e._v(" "),n("li",[e._v("能用工程化的思想去规划更大规模的业务。")])]),e._v(" "),n("p",[e._v("这三种能力在你的成长过程中是层层递进的关系，而后两种能力可以说是对架构师的要求。事实上，在我入行以来接触过的工程师里，能做到第一点，并且把它做到扎实、做到娴熟的人，已经堪称同辈楷模。")]),e._v(" "),n("h3",{attrs:{id:"_0-1-前端工程师，首先是软件工程师"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_0-1-前端工程师，首先是软件工程师","aria-hidden":"true"}},[e._v("#")]),e._v(" "),n("a",{attrs:{href:"#_0-1-%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%B8%88%EF%BC%8C%E9%A6%96%E5%85%88%E6%98%AF%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%B8%88"}},[e._v("#")]),e._v(" 0.1 前端工程师，首先是软件工程师")]),e._v(" "),n("p",[n("strong",[e._v("很多人缺乏的并不是这种高瞻远瞩的激情，而是我们前面提到的“不变能力”中最基本的那一点——用健壮的代码去解决具体的问题的能力。")])]),e._v(" "),n("p",[e._v("所以说，"),n("strong",[e._v("想做靠谱开发，先掌握设计模式。")])]),e._v(" "),n("p",[n("img",{attrs:{src:"http://wsk-mweb.oss-cn-hangzhou.aliyuncs.com/2020/01/17/15790147155049.jpg",alt:"-w684"}})]),e._v(" "),n("h2",{attrs:{id:"_1-设计模式的“道”与“术”"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-设计模式的“道”与“术”","aria-hidden":"true"}},[e._v("#")]),e._v(" "),n("a",{attrs:{href:"#_1-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%9A%84%E2%80%9C%E9%81%93%E2%80%9D%E4%B8%8E%E2%80%9C%E6%9C%AF%E2%80%9D"}},[e._v("#")]),e._v(" 1. 设计模式的“道”与“术”")]),e._v(" "),n("h3",{attrs:{id:"_1-1-设计模式，究竟有着怎样的力量？"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-设计模式，究竟有着怎样的力量？","aria-hidden":"true"}},[e._v("#")]),e._v(" "),n("a",{attrs:{href:"#_1-1-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%8C%E7%A9%B6%E7%AB%9F%E6%9C%89%E7%9D%80%E6%80%8E%E6%A0%B7%E7%9A%84%E5%8A%9B%E9%87%8F%EF%BC%9F"}},[e._v("#")]),e._v(" 1.1 设计模式，究竟有着怎样的力量？")]),e._v(" "),n("blockquote",[n("p",[e._v("每一个模式描述了一个在我们周围不断重复发生的问题，以及该问题的解决方案的核心。这样，你就能一次又一次地使用该方案而不必做重复劳动。 —— Christopher Alexander")])]),e._v(" "),n("h3",{attrs:{id:"_1-2-solid设计原则"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-solid设计原则","aria-hidden":"true"}},[e._v("#")]),e._v(" "),n("a",{attrs:{href:"#_1-2-solid%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99"}},[e._v("#")]),e._v(" 1.2 SOLID设计原则")]),e._v(" "),n("blockquote",[n("p",[e._v('"SOLID" 是由罗伯特·C·马丁在 21 世纪早期引入的记忆术首字母缩略字，指代了面向对象编程和面向对象设计的五个基本原则。')])]),e._v(" "),n("p",[e._v("设计原则是设计模式的指导理论，它可以帮助我们规避不良的软件设计。SOLID 指代的五个基本原则分别是：")]),e._v(" "),n("ul",[n("li",[e._v("单一功能原则（Single Responsibility Principle）")]),e._v(" "),n("li",[e._v("开放封闭原则（Opened Closed Principle）")]),e._v(" "),n("li",[e._v("里式替换原则（Liskov Substitution Principle）")]),e._v(" "),n("li",[e._v("接口隔离原则（Interface Segregation Principle）")]),e._v(" "),n("li",[e._v("依赖反转原则（Dependency Inversion Principle）")])]),e._v(" "),n("p",[e._v("在 JavaScript 设计模式中，主要用到的设计模式基本都围绕“单一功能”和“开放封闭”这两个原则来展开。")]),e._v(" "),n("h3",{attrs:{id:"_1-3-设计模式的核心思想——封装变化"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-设计模式的核心思想——封装变化","aria-hidden":"true"}},[e._v("#")]),e._v(" "),n("a",{attrs:{href:"#_1-3-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%9A%84%E6%A0%B8%E5%BF%83%E6%80%9D%E6%83%B3%E2%80%94%E2%80%94%E5%B0%81%E8%A3%85%E5%8F%98%E5%8C%96"}},[e._v("#")]),e._v(" 1.3 设计模式的核心思想——封装变化")]),e._v(" "),n("p",[e._v("设计模式出现的背景，是软件设计的复杂度日益飙升。软件设计越来越复杂的“罪魁祸首”，就是变化。")]),e._v(" "),n("p",[e._v("这一点相信大家不难理解——如果说我们写一个业务，这个业务是一潭死水，初始版本是 1.0，100 年后还是 1.0，不接受任何迭代和优化，那么这个业务几乎可以随便写。反正只要实现功能就行了，完全不需要考虑可维护性、可扩展性。")]),e._v(" "),n("p",[e._v("但在实际开发中，不发生变化的代码可以说是不存在的。我们能做的只有将这个变化造成的影响最小化 —— "),n("strong",[e._v("将变与不变分离，确保变化的部分灵活、不变的部分稳定。")])]),e._v(" "),n("p",[e._v("这个过程，就叫“封装变化”；这样的代码，就是我们所谓的“健壮”的代码，它可以经得起变化的考验。而设计模式出现的意义，就是帮我们写出这样的代码。")]),e._v(" "),n("h3",{attrs:{id:"_1-4-设计模式的“术”"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-设计模式的“术”","aria-hidden":"true"}},[e._v("#")]),e._v(" "),n("a",{attrs:{href:"#_1-4-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%9A%84%E2%80%9C%E6%9C%AF%E2%80%9D"}},[e._v("#")]),e._v(" 1.4 设计模式的“术”")]),e._v(" "),n("p",[e._v("所谓“术”，其实就是指二十年前 GOF 提出的最经典的23种设计模式。二十年前，四位程序员前辈（Erich Gamma, Richard Helm, Ralph Johnson & John Vlissides）通过编写《设计模式：可复用面向对象软件的基础》这本书，阐述了设计模式领域的开创性成果。在这本书中，将23种设计模式按照“创建型”、“行为型”和“结构型”进行划分：")]),e._v(" "),n("p",[n("img",{attrs:{src:"http://wsk-mweb.oss-cn-hangzhou.aliyuncs.com/2020/01/17/15792707256535.jpg",alt:""}})]),e._v(" "),n("p",[e._v("前面我们说过，设计模式的核心思想，就是“封装变化”。确实如此，无论是创建型、结构型还是行为型，这些具体的设计模式都是在用自己的方式去封装不同类型的变化 —— 创建型模式封装了创建对象过程中的变化，比如下节的工厂模式，它做的事情就是将创建对象的过程抽离；结构型模式封装的是对象之间组合方式的变化，目的在于灵活地表达对象间的配合与依赖关系；而行为型模式则将是对象千变万化的行为进行抽离，确保我们能够更安全、更方便地对行为进行更改。")]),e._v(" "),n("p",[e._v("封装变化，封装的正是软件中那些不稳定的要素，它是一种防患于未然的行为 —— 提前抽离了变化，就为后续的拓展提供了无限的可能性，如此，我们才能做到在变化到来的时候从容不迫。")]),e._v(" "),n("h3",{attrs:{id:"_1-5-从-java-c-到-javascript-的迁移"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-从-java-c-到-javascript-的迁移","aria-hidden":"true"}},[e._v("#")]),e._v(" "),n("a",{attrs:{href:"#_1-5-%E4%BB%8E-java-c-%E5%88%B0-javascript-%E7%9A%84%E8%BF%81%E7%A7%BB"}},[e._v("#")]),e._v(" 1.5 从 Java/C++ 到 JavaScript 的迁移")]),e._v(" "),n("p",[e._v("设计模式迁移到 JavaScript，不仅仅是从一类语言到另一类语言这么简单。强类型语言不仅和 JavaScript 之间存在着基本语法的差异，还存在着应用场景的差异。设计模式的“前端化”，正是我们后续十余个章节要做的事情。在这个过程中，场景是基础，代码是辅助，逻辑是主角。")]),e._v(" "),n("h2",{attrs:{id:"_2-创建型：工厂模式·简单工厂——区分“变与不变”"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-创建型：工厂模式·简单工厂——区分“变与不变”","aria-hidden":"true"}},[e._v("#")]),e._v(" "),n("a",{attrs:{href:"#_2-%E5%88%9B%E5%BB%BA%E5%9E%8B%EF%BC%9A%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F%C2%B7%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E2%80%94%E2%80%94%E5%8C%BA%E5%88%86%E2%80%9C%E5%8F%98%E4%B8%8E%E4%B8%8D%E5%8F%98%E2%80%9D"}},[e._v("#")]),e._v(" 2. 创建型：工厂模式·简单工厂——区分“变与不变”")]),e._v(" "),n("h3",{attrs:{id:"_2-1-先来说说构造器"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-先来说说构造器","aria-hidden":"true"}},[e._v("#")]),e._v(" "),n("a",{attrs:{href:"#_2-1-%E5%85%88%E6%9D%A5%E8%AF%B4%E8%AF%B4%E6%9E%84%E9%80%A0%E5%99%A8"}},[e._v("#")]),e._v(" 2.1 先来说说构造器")]),e._v(" "),n("p",[e._v("在介绍工厂模式之前，为了辅助大家的理解，我想先在这儿给大家介绍一下构造器模式。")]),e._v(" "),n("p",[e._v("别看这个名字很吓人（其实设计模式里每个名字好像都挺吓人的哈哈哈），这玩意儿你几乎天天用（所以咱们不单独给它开小节），不信你来看看：")]),e._v(" "),n("p",[e._v("有一天你写了个公司员工信息录入系统，这个系统开发阶段用户只有你自己，想怎么玩怎么玩。于是在创建“自己”这个唯一的用户的时候，你可以这么写：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const liLei = {\n    name: '李雷',\n    age: 25,\n    career: 'coder',\n}\n\n")])])]),n("p",[e._v("有一天你的同桌韩梅梅突然说：“李雷，让我瞅瞅你的系统做得咋样了，我也想被录进去”。你说好，不就多一个人的事情吗，于是代码里手动多了一个韩梅梅：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const liLei = {\n    name: '李雷',\n    age: 25,\n    career: 'coder',\n}\n\nconst hanMeiMei = {\n    name: '韩梅梅',\n    age: 24,\n    career: 'product manager'\n}\n\n")])])]),n("p",[e._v("又过了两天你老板过来了，说李雷，系统今天提测了，先把部门的 500 人录入看看功能。李雷心想，500 个对象字面量，要死要死，还好我有构造函数。于是李雷写出了一个可以自动创建用户的 User 函数：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("function User(name , age, career) {\n    this.name = name\n    this.age = age\n    this.career = career\n}\n\n")])])]),n("p",[e._v("楼上个这 User，就是一个"),n("strong",[e._v("构造器")]),e._v("。此处我们采用了 ES5 构造函数的写法，因为 ES6 中的 class 其实本质上还是函数，class 语法只是语法糖，构造函数，才是它的真面目。")]),e._v(" "),n("p",[e._v("接下来要做的事情，就是让程序自动地去读取数据库里面一行行的员工信息，然后把拿到的姓名、年龄等字段塞进User函数里，进行一个简单的调用：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const user = new User(name, age, career)\n\n")])])]),n("p",[e._v("从此李雷再也不用手写字面量。")]),e._v(" "),n("p",[e._v("像 User 这样当新建对象的内存被分配后，用来初始化该对象的特殊函数，就叫做构造器。在 JavaScript 中，我们使用构造函数去初始化对象，就是应用了构造器模式。这个模式太简单了，简单到我这一通讲对很多同学来说其实并不必要，大家都是学过 JavaScript 基础的人，都知道怎么 new 一个对象。但是我们洋洋洒洒这么一段的目的，并不是为了带大家复习构造函数本身的用法，而是希望大家去思考开篇我们提到的问题：")]),e._v(" "),n("p",[n("strong",[e._v("在创建一个user过程中，谁变了，谁不变？")])]),e._v(" "),n("p",[e._v("很明显，变的是每个user的姓名、年龄、工种这些值，这是用户的个性，不变的是每个员工都具备姓名、年龄、工种这些属性，这是用户的共性。")]),e._v(" "),n("p",[n("strong",[e._v("那么构造器做了什么？")])]),e._v(" "),n("p",[e._v("构造器是不是将 name、age、career 赋值给对象的过程封装，确保了每个对象都具备这些属性，确保了共性的不变，同时将 name、age、career 各自的取值操作开放，确保了个性的灵活？")]),e._v(" "),n("p",[e._v("如果在使用构造器模式的时候，我们本质上是去抽象了每个对象实例的变与不变。那么使用工厂模式时，我们要做的就是去抽象不同构造函数（类）之间的变与不变")]),e._v(" "),n("h3",{attrs:{id:"_2-1-简单工厂模式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-简单工厂模式","aria-hidden":"true"}},[e._v("#")]),e._v(" "),n("a",{attrs:{href:"#_2-1-%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F"}},[e._v("#")]),e._v(" 2.1 简单工厂模式")]),e._v(" "),n("p",[e._v("咱们先不说简单工厂模式定义是啥，咱们先来看李雷的新需求：")]),e._v(" "),n("p",[e._v("老板说这个系统录入的信息也太简单了，程序员和产品经理之间的区别一个简单的career字段怎么能说得清？我要求这个系统具备给不同工种分配职责说明的功能。也就是说，要给每个工种的用户加上一个个性化的字段，来描述他们的工作内容。")]),e._v(" "),n("p",[e._v("完了，这下员工的共性被拆离了。还好有构造器，李雷心想不就是多写个构造器的事儿吗，我写：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("function Coder(name , age) {\n    this.name = name\n    this.age = age\n    this.career = 'coder'\n    this.work = ['写代码','写系分', '修Bug']\n}\nfunction ProductManager(name, age) {\n    this.name = name\n    this.age = age\n    this.career = 'product manager'\n    this.work = ['订会议室', '写PRD', '催更']\n}\n\n")])])]),n("p",[e._v("现在我们有两个类（后面可能还会有更多的类），麻烦的事情来了：难道我每从数据库拿到一条数据，都要人工判断一下这个员工的工种，然后手动给它分配构造器吗？不行，这也是一个“变”，我们把这个“变”交给一个函数去处理：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("function Factory(name, age, career) {\n    switch(career) {\n        case 'coder':\n            return new Coder(name, age)\n            break\n        case 'product manager':\n            return new ProductManager(name, age)\n            break\n        ...\n}\n\n")])])]),n("p",[e._v("看起来是好一些了，至少我们不用操心构造函数的分配问题了。但是大家注意我在 switch 的末尾写了个省略号，这个省略号比较恐怖。看着这个省略号，李雷哭了，他想到：整个公司上下有数十个工种，难道我要手写数十个类、数十行 switch 吗？")]),e._v(" "),n("p",[e._v("当然不！回到我们最初的问题：大家仔细想想，在楼上这两段并不那么好的代码里，"),n("strong",[e._v("变的是什么？不变的又是什么？")])]),e._v(" "),n("p",[e._v("Coder 和 ProductManager 两个工种的员工，是不是仍然存在都拥有 name、age、career、work 这四个属性这样的共性？它们之间的区别，在于每个字段取值的不同，以及 work 字段需要随 career 字段取值的不同而改变。这样一来，我们是不是对共性封装得不够彻底？那么相应地，共性与个性是不是分离得也不够彻底？")]),e._v(" "),n("p",[e._v("现在我们把相同的逻辑封装回User类里，然后把这个承载了共性的 User 类和个性化的逻辑判断写入同一个函数：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("function User(name , age, career, work) {\n    this.name = name\n    this.age = age\n    this.career = career\n    this.work = work\n}\n\nfunction Factory(name, age, career) {\n    let work\n    switch(career) {\n        case 'coder':\n            work =  ['写代码','写系分', '修Bug']\n            break\n        case 'product manager':\n            work = ['订会议室', '写PRD', '催更']\n            break\n        case 'boss':\n            work = ['喝茶', '看报', '见客户']\n        case 'xxx':\n            // 其它工种的职责分配\n            ...\n\n    return new User(name, age, career, work)\n}\n\n")])])]),n("p",[e._v("这样一来，我们要做事情是不是简单太多了？不用自己时刻想着我拿到的这组数据是什么工种、我应该怎么给它分配构造函数，更不用手写无数个构造函数——Factory已经帮我们做完了一切，而我们只需要像以前一样"),n("strong",[e._v("无脑传参")]),e._v("就可以了！")]),e._v(" "),n("p",[e._v("现在我们一起来总结一下什么是工厂模式：工厂模式其实就是将"),n("strong",[e._v("创建对象的过程单独封装")]),e._v("。它很像我们去餐馆点菜：比如说点一份西红柿炒蛋，我们不用关心西红柿怎么切、怎么打鸡蛋这些菜品制作过程中的问题，我们只关心摆上桌那道菜。在工厂模式里，我传参这个过程就是点菜，工厂函数里面运转的逻辑就相当于炒菜的厨师和上桌的服务员做掉的那部分工作——这部分工作我们同样不用关心，我们只要能拿到工厂交付给我们的实例结果就行了。")]),e._v(" "),n("h3",{attrs:{id:"_2-3-小结"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-小结","aria-hidden":"true"}},[e._v("#")]),e._v(" "),n("a",{attrs:{href:"#_2-3-%E5%B0%8F%E7%BB%93"}},[e._v("#")]),e._v(" 2.3 小结")]),e._v(" "),n("p",[e._v("工厂模式的简单之处，在于它的概念相对好理解：将创建对象的过程单独封装，这样的操作就是工厂模式。同时它的应用场景也非常容易识别：有构造函数的地方，我们就应该想到简单工厂；在写了大量构造函数、调用了大量的 new、自觉非常不爽的情况下，我们就应该思考是不是可以掏出工厂模式重构我们的代码了。")]),e._v(" "),n("h2",{attrs:{id:"_3-创建型：工厂模式·抽象工厂——理解“开放封闭”"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-创建型：工厂模式·抽象工厂——理解“开放封闭”","aria-hidden":"true"}},[e._v("#")]),e._v(" "),n("a",{attrs:{href:"#_3-%E5%88%9B%E5%BB%BA%E5%9E%8B%EF%BC%9A%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F%C2%B7%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E2%80%94%E2%80%94%E7%90%86%E8%A7%A3%E2%80%9C%E5%BC%80%E6%94%BE%E5%B0%81%E9%97%AD%E2%80%9D"}},[e._v("#")]),e._v(" 3. 创建型：工厂模式·抽象工厂——理解“开放封闭”")]),e._v(" "),n("h3",{attrs:{id:"_3-1-一个不简单的简单工厂引发的命案"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-一个不简单的简单工厂引发的命案","aria-hidden":"true"}},[e._v("#")]),e._v(" "),n("a",{attrs:{href:"#_3-1-%E4%B8%80%E4%B8%AA%E4%B8%8D%E7%AE%80%E5%8D%95%E7%9A%84%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E5%BC%95%E5%8F%91%E7%9A%84%E5%91%BD%E6%A1%88"}},[e._v("#")]),e._v(" 3.1 一个不简单的简单工厂引发的命案")]),e._v(" "),n("p",[e._v("在实际的业务中，我们往往面对的复杂度并非数个类、一个工厂可以解决，而是需要动用多个工厂。")]),e._v(" "),n("p",[e._v("我们继续看上个小节举出的例子，简单工厂函数最后长这样：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("function Factory(name, age, career) {\n    let work\n    switch(career) {\n        case 'coder':\n            work =  ['写代码','写系分', '修Bug']\n            break\n        case 'product manager':\n            work = ['订会议室', '写PRD', '催更']\n            break\n        case 'boss':\n            work = ['喝茶', '看报', '见客户']\n        case 'xxx':\n            // 其它工种的职责分配\n            ...\n\n    return new User(name, age, career, work)\n}\n\n")])])]),n("p",[e._v("乍一看没什么问题，但是经不起推敲呀。首先映入眼帘的 Bug，是我们把 Boss 这个角色和普通员工塞进了一个工厂。大家知道，Boss 和基层员工在职能上差别还是挺大的，具体在员工系统里怎么表现呢？首先他的权限就跟咱们不一样。有一些系统，比如员工绩效评估的打分入口，就只有 Boss 点得进去，对不对？除此之外还有许多操作，是只有管理层可以执行的，因此我们需要对这个群体的对象进行单独的逻辑处理。")]),e._v(" "),n("p",[e._v("怎么办？去修改 Factory 的函数体、增加管理层相关的判断和处理逻辑吗？单从功能实现上来说，没问题。但这么做其实是在挖坑——因为公司不仅仅只有这两类人，除此之外还有外包同学、还有保安，他们的权限、职能都存在着质的差别。如果延续这个思路，每考虑到一个新的员工群体，就回去修改一次 Factory 的函数体，这样做糟糕透了——首先，是**Factory会变得异常庞大，**庞大到你每次添加的时候都不敢下手，生怕自己万一写出一个Bug，就会导致整个Factory的崩坏，进而摧毁整个系统；其次，你坑死了你的队友：Factory 的逻辑过于繁杂和混乱，没人敢维护它；最后，你还连带坑了隔壁的测试同学：你每次新加一个工种，他都不得不对整个Factory 的逻辑进行回归——谁让你的改变是在 Factory 内部原地发生的呢！这一切悲剧的根源只有一个——没有遵守开放封闭原则。")]),e._v(" "),n("p",[e._v("我们再复习一下开放封闭原则的内容：对拓展开放，对修改封闭。说得更准确点，"),n("strong",[e._v("软件实体（类、模块、函数）可以扩展")]),e._v("，但是不可修改。楼上这波操作错就错在我们不是在拓展，而是在疯狂地修改。")]),e._v(" "),n("h3",{attrs:{id:"_3-2-抽象工厂模式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-抽象工厂模式","aria-hidden":"true"}},[e._v("#")]),e._v(" "),n("a",{attrs:{href:"#_3-2-%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F"}},[e._v("#")]),e._v(" 3.2 抽象工厂模式")]),e._v(" "),n("p",[e._v("上面这段可能仍有部分同学觉得抽象，也没关系。这里咱们先不急着理解透彻这个干巴巴的概念，先来看这么一个示例：")]),e._v(" "),n("p",[e._v("大家知道一部智能手机的基本组成是操作系统（Operating System，我们下面缩写作 OS）和硬件（HardWare）组成。所以说如果我要开一个山寨手机工厂，那我这个工厂里必须是既准备好了操作系统，也准备好了硬件，才能实现手机的量产。考虑到操作系统和硬件这两样东西背后也存在不同的厂商，而我现在并不知道我下一个生产线到底具体想生产一台什么样的手机，我只知道手机必须有这两部分组成，所以我先来一个抽象类来约定住这台手机的基本组成：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('class MobilePhoneFactory {\n    // 提供操作系统的接口\n    createOS(){\n        throw new Error("抽象工厂方法不允许直接调用，你需要将我重写！");\n    }\n    // 提供硬件的接口\n    createHardWare(){\n        throw new Error("抽象工厂方法不允许直接调用，你需要将我重写！");\n    }\n}\n\n')])])]),n("p",[e._v("楼上这个类，除了约定手机流水线的通用能力之外，啥也不干。如果你尝试让它干点啥，比如 new 一个 "),n("code",[e._v("MobilePhoneFactory")]),e._v(" 实例，并尝试调用它的实例方法。它还会给你报错，提醒你“我不是让你拿去new一个实例的，我就是个定规矩的”。在抽象工厂模式里，楼上这个类就是我们食物链顶端最大的 "),n("code",[e._v("Boss——AbstractFactory")]),e._v("（抽象工厂）。")]),e._v(" "),n("p",[e._v("抽象工厂不干活，具体工厂（ConcreteFactory）来干活！当我们明确了生产方案，明确某一条手机生产流水线具体要生产什么样的手机了之后，就可以化抽象为具体，比如我现在想要一个专门生产 Android 系统 + 高通硬件的手机的生产线，我给这类手机型号起名叫 FakeStar，那我就可以为 FakeStar 定制一个具体工厂：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// 具体工厂继承自抽象工厂\nclass FakeStarFactory extends MobilePhoneFactory {\n    createOS() {\n        // 提供安卓系统实例\n        return new AndroidOS()\n    }\n    createHardWare() {\n        // 提供高通硬件实例\n        return new QualcommHardWare()\n    }\n}\n\n")])])]),n("p",[e._v("这里我们在提供安卓系统的时候，调用了两个构造函数：AndroidOS 和 QualcommHardWare，它们分别用于生成具体的操作系统和硬件实例。像这种被我们拿来用于 new 出具体对象的类，叫做具体产品类（ConcreteProduct）。具体产品类往往不会孤立存在，不同的具体产品类往往有着共同的功能，比如安卓系统类和苹果系统类，它们都是操作系统，都有着可以"),n("strong",[e._v("操控手机硬件系统")]),e._v("这样一个最基本的功能。因此我们可以"),n("strong",[e._v("用一个抽象产品（AbstractProduct）类")]),e._v("来声明这一类产品应该具有的基本功能（众：什么抽象产品？？？要这些玩意儿干啥？老夫写代码就是一把梭，为啥不让我老老实实一个一个写具体类？？？大家稍安勿躁，先把例子看完，下文会有解释）")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// 定义操作系统这类产品的抽象产品类\nclass OS {\n    controlHardWare() {\n        throw new Error('抽象产品方法不允许直接调用，你需要将我重写！');\n    }\n}\n\n// 定义具体操作系统的具体产品类\nclass AndroidOS extends OS {\n    controlHardWare() {\n        console.log('我会用安卓的方式去操作硬件')\n    }\n}\n\nclass AppleOS extends OS {\n    controlHardWare() {\n        console.log('我会用🍎的方式去操作硬件')\n    }\n}\n...\n\n")])])]),n("p",[e._v("硬件类产品同理：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// 定义手机硬件这类产品的抽象产品类\nclass HardWare {\n    // 手机硬件的共性方法，这里提取了“根据命令运转”这个共性\n    operateByOrder() {\n        throw new Error('抽象产品方法不允许直接调用，你需要将我重写！');\n    }\n}\n\n// 定义具体硬件的具体产品类\nclass QualcommHardWare extends HardWare {\n    operateByOrder() {\n        console.log('我会用高通的方式去运转')\n    }\n}\n\nclass MiWare extends HardWare {\n    operateByOrder() {\n        console.log('我会用小米的方式去运转')\n    }\n}\n...\n\n")])])]),n("p",[e._v("好了，如此一来，当我们需要生产一台FakeStar手机时，我们只需要这样做：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// 这是我的手机\nconst myPhone = new FakeStarFactory()\n// 让它拥有操作系统\nconst myOS = myPhone.createOS()\n// 让它拥有硬件\nconst myHardWare = myPhone.createHardWare()\n// 启动操作系统(输出‘我会用安卓的方式去操作硬件’)\nmyOS.controlHardWare()\n// 唤醒硬件(输出‘我会用高通的方式去运转’)\nmyHardWare.operateByOrder()\n\n")])])]),n("p",[e._v("关键的时刻来了——假如有一天，FakeStar过气了，我们需要产出一款新机投入市场，这时候怎么办？我们是不是不需要对"),n("strong",[e._v("抽象工厂MobilePhoneFactory做任何修改")]),e._v("，只需要拓展它的种类：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("class newStarFactory extends MobilePhoneFactory {\n    createOS() {\n        // 操作系统实现代码\n    }\n    createHardWare() {\n        // 硬件实现代码\n    }\n}\n\n")])])]),n("p",[e._v("这么个操作，"),n("strong",[e._v("对原有的系统不会造成任何潜在影响")]),e._v("所谓的“对拓展开放，对修改封闭”就这么圆满实现了。前面我们之所以要实现"),n("strong",[e._v("抽象产品类")]),e._v("，也是同样的道理。")]),e._v(" "),n("h3",{attrs:{id:"_3-3-总结"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-总结","aria-hidden":"true"}},[e._v("#")]),e._v(" "),n("a",{attrs:{href:"#_3-3-%E6%80%BB%E7%BB%93"}},[e._v("#")]),e._v(" 3.3 总结")]),e._v(" "),n("p",[e._v("大家现在回头对比一下抽象工厂和简单工厂的思路，思考一下：它们之间有哪些异同？")]),e._v(" "),n("p",[e._v("它们的共同点，在于都尝试去"),n("strong",[e._v("分离一个系统中变与不变的部分")]),e._v("。它们的不同在于"),n("strong",[e._v("场景的复杂度")]),e._v("。在简单工厂的使用场景里，处理的对象是类，并且是一些非常好对付的类——它们的共性容易抽离，同时因为逻辑本身比较简单，故而不苛求代码可扩展性。抽象工厂本质上处理的其实也是类，但是是一帮非常棘手、繁杂的类，这些类中不仅能划分出门派，还能划分出等级，同时存在着千变万化的扩展可能性——这使得我们必须对"),n("strong",[e._v("共性")]),e._v("作更特别的处理、使用抽象类去降低扩展的成本，同时需要对类的性质作划分，于是有了这样的四个关键角色：")]),e._v(" "),n("ul",[n("li",[e._v("**抽象工厂（抽象类，它不能被用于生成具体实例）：**用于声明最终目标产品的共性。在一个系统里，抽象工厂可以有多个（大家可以想象我们的手机厂后来被一个更大的厂收购了，这个厂里除了手机抽象类，还有平板、游戏机抽象类等等），每一个抽象工厂对应的这一类的产品，被称为“产品族”。")]),e._v(" "),n("li",[e._v("**具体工厂（用于生成产品族里的一个具体的产品）：**继承自抽象工厂、实现了抽象工厂里声明的那些方法，用于创建具体的产品的类。")]),e._v(" "),n("li",[e._v("**抽象产品（抽象类，它不能被用于生成具体实例）：**上面我们看到，具体工厂里实现的接口，会依赖一些类，这些类对应到各种各样的具体的细粒度产品（比如操作系统、硬件等），这些具体产品类的共性各自抽离，便对应到了各自的抽象产品类。")]),e._v(" "),n("li",[e._v("**具体产品（用于生成产品族里的一个具体的产品所依赖的更细粒度的产品）：**比如我们上文中具体的一种操作系统、或具体的一种硬件等。")])]),e._v(" "),n("p",[e._v("抽象工厂模式的定义，"),n("strong",[e._v("是围绕一个超级工厂创建其他工厂")]),e._v("。抽象工厂目前来说在JS世界里也应用得并不广泛，所以大家不必拘泥于细节，只需留意以下三点：")]),e._v(" "),n("ol",[n("li",[e._v("学会用 ES6 模拟 JAVA 中的抽象类；")]),e._v(" "),n("li",[e._v("了解抽象工厂模式中四个角色的定位与作用；")]),e._v(" "),n("li",[e._v("对“开放封闭原则”形成自己的理解，知道它好在哪，知道执行它的必要性。")])]),e._v(" "),n("h2",{attrs:{id:"_4-创建型：单例模式——vuex的数据管理哲学"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-创建型：单例模式——vuex的数据管理哲学","aria-hidden":"true"}},[e._v("#")]),e._v(" "),n("a",{attrs:{href:"#_4-%E5%88%9B%E5%BB%BA%E5%9E%8B%EF%BC%9A%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94vuex%E7%9A%84%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86%E5%93%B2%E5%AD%A6"}},[e._v("#")]),e._v(" 4. 创建型：单例模式——Vuex的数据管理哲学")]),e._v(" "),n("p",[n("strong",[e._v("保证一个类仅有一个实例，并提供一个访问它的全局访问点")]),e._v("，这样的模式就叫做单例模式。")]),e._v(" "),n("h3",{attrs:{id:"_4-1-单例模式的实现思路"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-单例模式的实现思路","aria-hidden":"true"}},[e._v("#")]),e._v(" "),n("a",{attrs:{href:"#_4-1-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%80%9D%E8%B7%AF"}},[e._v("#")]),e._v(" 4.1 单例模式的实现思路")]),e._v(" "),n("blockquote",[n("p",[e._v("思考这样一个问题：如何才能保证一个类仅有一个实例？")])]),e._v(" "),n("p",[e._v("一般情况下，当我们创建了一个类（本质是构造函数）后，可以通过new关键字调用构造函数进而生成任意多的实例对象。像这样：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("class SingleDog {\n    show() {\n        console.log('我是一个单例对象')\n    }\n}\n\nconst s1 = new SingleDog()\nconst s2 = new SingleDog()\n\n// false\ns1 === s2\n\n")])])]),n("p",[e._v("楼上我们先 new 了一个 s1，又 new 了一个 s2，很明显 s1 和 s2 之间没有任何瓜葛，两者是相互独立的对象，各占一块内存空间。而单例模式想要做到的是，"),n("strong",[e._v("不管我们尝试去创建多少次，它都只给你返回第一次所创建的那唯一的一个实例")]),e._v("。")]),e._v(" "),n("p",[e._v("要做到这一点，"),n("strong",[e._v("就需要构造函数具备判断自己是否已经创建过一个实例的能力")]),e._v("。我们现在把这段判断逻辑写成一个静态方法(其实也可以直接写入构造函数的函数体里）：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("class SingleDog {\n    show() {\n        console.log('我是一个单例对象')\n    }\n    static getInstance() {\n        // 判断是否已经new过1个实例\n        if (!SingleDog.instance) {\n            // 若这个唯一的实例不存在，那么先创建它\n            SingleDog.instance = new SingleDog()\n        }\n        // 如果这个唯一的实例已经存在，则直接返回\n        return SingleDog.instance\n    }\n}\n\nconst s1 = SingleDog.getInstance()\nconst s2 = SingleDog.getInstance()\n\n// true\ns1 === s2\n\n")])])]),n("p",[e._v("除了楼上这种实现方式之外，getInstance的逻辑还可以用闭包来实现：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("SingleDog.getInstance = (function() {\n    // 定义自由变量instance，模拟私有变量\n    let instance = null\n    return function() {\n        // 判断自由变量是否为null\n        if(!instance) {\n            // 如果为null则new出唯一实例\n            instance = new SingleDog()\n        }\n        return instance\n    }\n})()\n\n")])])]),n("p",[e._v("可以看出，在getInstance方法的判断和拦截下，我们不管调用多少次，SingleDog都只会给我们返回一个实例，s1和s2现在都指向这个唯一的实例。")]),e._v(" "),n("h3",{attrs:{id:"_4-2-生产实践：vuex中的单例模式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-生产实践：vuex中的单例模式","aria-hidden":"true"}},[e._v("#")]),e._v(" "),n("a",{attrs:{href:"#_4-2-%E7%94%9F%E4%BA%A7%E5%AE%9E%E8%B7%B5%EF%BC%9Avuex%E4%B8%AD%E7%9A%84%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F"}},[e._v("#")]),e._v(" 4.2 生产实践：Vuex中的单例模式")]),e._v(" "),n("h4",{attrs:{id:"_4-2-1-理解-vuex-中的-store"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-1-理解-vuex-中的-store","aria-hidden":"true"}},[e._v("#")]),e._v(" "),n("a",{attrs:{href:"#_4-2-1-%E7%90%86%E8%A7%A3-vuex-%E4%B8%AD%E7%9A%84-store"}},[e._v("#")]),e._v(" 4.2.1 理解 Vuex 中的 Store")]),e._v(" "),n("blockquote",[n("p",[e._v("Vuex 使用单一状态树，用一个对象就包含了全部的应用层级状态。至此它便作为一个“唯一数据源 (SSOT)”而存在。这也意味着，每个应用将仅仅包含一个 store 实例。单一状态树让我们能够直接地定位任一特定的状态片段，在调试的过程中也能轻易地取得整个当前应用状态的快照。 ——Vuex官方文档")])]),e._v(" "),n("p",[e._v("在Vue中，组件之间是独立的，组件间通信最常用的办法是 props（限于父组件和子组件之间的通信），稍微复杂一点的（比如兄弟组件间的通信）我们通过自己实现简单的事件监听函数也能解决掉。")]),e._v(" "),n("p",[e._v("但当组件非常多、组件间关系复杂、且嵌套层级很深的时候，这种原始的通信方式会使我们的逻辑变得复杂难以维护。这时最好的做法是将共享的数据抽出来、放在全局，供组件们按照一定的的规则去存取数据，保证状态以一种可预测的方式发生变化。于是便有了 Vuex，这个用来存放共享数据的唯一数据源，就是 Store。")]),e._v(" "),n("h4",{attrs:{id:"_4-2-2-vuex如何确保store的唯一性"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-2-vuex如何确保store的唯一性","aria-hidden":"true"}},[e._v("#")]),e._v(" "),n("a",{attrs:{href:"#_4-2-2-vuex%E5%A6%82%E4%BD%95%E7%A1%AE%E4%BF%9Dstore%E7%9A%84%E5%94%AF%E4%B8%80%E6%80%A7"}},[e._v("#")]),e._v(" 4.2.2 Vuex如何确保Store的唯一性")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// 安装vuex插件\nVue.use(Vuex)\n\n// 将store注入到Vue实例中\nnew Vue({\n    el: '#app',\n    store\n})\n\n")])])]),n("p",[e._v("通过调用Vue.use()方法，我们安装了 Vuex 插件。Vuex 插件是一个对象，它在内部实现了一个 install 方法，这个方法会在插件安装时被调用，从而把 Store 注入到Vue实例里去。也就是说每 install 一次，都会尝试给 Vue 实例注入一个 Store。")]),e._v(" "),n("p",[e._v("在 install 方法里，有一段逻辑和我们楼上的 getInstance 非常相似的逻辑：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("let Vue // 这个Vue的作用和楼上的instance作用一样\n...\n\nexport function install (_Vue) {\n  // 判断传入的Vue实例对象是否已经被install过Vuex插件（是否有了唯一的state）\n  if (Vue && _Vue === Vue) {\n    if (process.env.NODE_ENV !== 'production') {\n      console.error(\n        '[vuex] already installed. Vue.use(Vuex) should be called only once.'\n      )\n    }\n    return\n  }\n  // 若没有，则为这个Vue实例对象install一个唯一的Vuex\n  Vue = _Vue\n  // 将Vuex的初始化逻辑写进Vue的钩子函数里\n  applyMixin(Vue)\n}\n\n")])])]),n("p",[e._v("楼上便是 Vuex 源码中单例模式的实现办法了，套路可以说和我们的getInstance如出一辙。通过这种方式，可以保证一个 Vue 实例（即一个 Vue 应用）只会被 install 一次 Vuex 插件，所以每个 Vue 实例只会拥有一个全局的 Store。")]),e._v(" "),n("h3",{attrs:{id:"_4-3-小结"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-小结","aria-hidden":"true"}},[e._v("#")]),e._v(" "),n("a",{attrs:{href:"#_4-3-%E5%B0%8F%E7%BB%93"}},[e._v("#")]),e._v(" 4.3 小结")]),e._v(" "),n("p",[e._v("思考一下：如果我在 install 里没有实现单例模式，会带来什么样的麻烦？")]),e._v(" "),n("p",[e._v("我们通过上面的源码解析可以看出，每次 install 都会为Vue实例初始化一个 Store。假如 install 里没有单例模式的逻辑，那我们如果在一个应用里不小心多次安装了插件：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// 在主文件里安装Vuex\nVue.use(Vuex)\n\n...(中间添加/修改了一些store的数据)\n\n// 在后续的逻辑里不小心又安装了一次\nVue.use(Vuex)\n\n")])])]),n("p",[e._v("失去了单例判断能力的 install 方法，会为当前的Vue实例重新注入一个新的 Store，也就是说你中间的那些数据操作全都没了，一切归 0。因此，单例模式在此处是非常必要的。")]),e._v(" "),n("h2",{attrs:{id:"_5-创建型：单例模式——面试真题手把手教学"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-创建型：单例模式——面试真题手把手教学","aria-hidden":"true"}},[e._v("#")]),e._v(" "),n("a",{attrs:{href:"#_5-%E5%88%9B%E5%BB%BA%E5%9E%8B%EF%BC%9A%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94%E9%9D%A2%E8%AF%95%E7%9C%9F%E9%A2%98%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E5%AD%A6"}},[e._v("#")]),e._v(" 5. 创建型：单例模式——面试真题手把手教学")]),e._v(" "),n("h3",{attrs:{id:"_5-1-实现一个-storage"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-实现一个-storage","aria-hidden":"true"}},[e._v("#")]),e._v(" "),n("a",{attrs:{href:"#_5-1-%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA-storage"}},[e._v("#")]),e._v(" 5.1 实现一个 Storage")]),e._v(" "),n("p",[n("strong",[e._v("描述")])]),e._v(" "),n("blockquote",[n("p",[e._v("实现Storage，使得该对象为单例，基于 localStorage 进行封装。实现方法 setItem(key,value) 和 getItem(key)。")])]),e._v(" "),n("p",[n("strong",[e._v("思路")])]),e._v(" "),n("p",[e._v("拿到单例模式相关的面试题，大家首先要做的是回忆我们上个小节的“基本思路”部分——至少要记起来"),n("code",[e._v("getInstance")]),e._v("方法和"),n("code",[e._v("instance")]),e._v("这个变量是干啥的。")]),e._v(" "),n("p",[e._v("具体实现上，把判断逻辑写入静态方法或者构造函数里都没关系，最好能把闭包的版本也写出来，多多益善。")]),e._v(" "),n("p",[e._v("总之有了上节的基础，这个题简直是默写！")]),e._v(" "),n("blockquote",[n("p",[n("strong",[e._v("实现：静态方法版")])])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// 定义Storage\nclass Storage {\n    static getInstance() {\n        // 判断是否已经new过1个实例\n        if (!Storage.instance) {\n            // 若这个唯一的实例不存在，那么先创建它\n            Storage.instance = new Storage()\n        }\n        // 如果这个唯一的实例已经存在，则直接返回\n        return Storage.instance\n    }\n    getItem (key) {\n        return localStorage.getItem(key)\n    }\n    setItem (key, value) {\n        return localStorage.setItem(key, value)\n    }\n}\n\nconst storage1 = Storage.getInstance()\nconst storage2 = Storage.getInstance()\n\nstorage1.setItem('name', '李雷')\n// 李雷\nstorage1.getItem('name')\n// 也是李雷\nstorage2.getItem('name')\n\n// 返回true\nstorage1 === storage2\n\n")])])]),n("blockquote",[n("p",[n("strong",[e._v("实现： 闭包版")])])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// 先实现一个基础的StorageBase类，把getItem和setItem方法放在它的原型链上\nfunction StorageBase () {}\nStorageBase.prototype.getItem = function (key){\n    return localStorage.getItem(key)\n}\nStorageBase.prototype.setItem = function (key, value) {\n    return localStorage.setItem(key, value)\n}\n\n// 以闭包的形式创建一个引用自由变量的构造函数\nconst Storage = (function(){\n    let instance = null\n    return function(){\n        // 判断自由变量是否为null\n        if(!instance) {\n            // 如果为null则new出唯一实例\n            instance = new StorageBase()\n        }\n        return instance\n    }\n})()\n\n// 这里其实不用 new Storage 的形式调用，直接 Storage() 也会有一样的效果\nconst storage1 = new Storage()\nconst storage2 = new Storage()\n\nstorage1.setItem('name', '李雷')\n// 李雷\nstorage1.getItem('name')\n// 也是李雷\nstorage2.getItem('name')\n\n// 返回true\nstorage1 === storage2\n\n")])])]),n("h3",{attrs:{id:"_5-2-实现一个全局的模态框"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-实现一个全局的模态框","aria-hidden":"true"}},[e._v("#")]),e._v(" "),n("a",{attrs:{href:"#_5-2-%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E5%85%A8%E5%B1%80%E7%9A%84%E6%A8%A1%E6%80%81%E6%A1%86"}},[e._v("#")]),e._v(" 5.2 实现一个全局的模态框")]),e._v(" "),n("p",[n("strong",[e._v("描述")])]),e._v(" "),n("blockquote",[n("p",[e._v("实现一个全局唯一的Modal弹框")])]),e._v(" "),n("p",[n("strong",[e._v("思路")])]),e._v(" "),n("p",[e._v("这道题比较经典，基本上所有讲单例模式的文章都会以此为例，同时它也是早期单例模式在前端领域的最集中体现。")]),e._v(" "),n("p",[e._v("万变不离其踪，记住getInstance方法、记住instance变量、记住闭包和静态方法，这个题除了要多写点 HTML 和 CSS 之外，对大家来说完全不成问题。")]),e._v(" "),n("p",[n("strong",[e._v("实现")])]),e._v(" "),n("p",[e._v("完整代码如下：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>单例模式弹框</title>\n</head>\n<style>\n    #modal {\n        height: 200px;\n        width: 200px;\n        line-height: 200px;\n        position: fixed;\n        left: 50%;\n        top: 50%;\n        transform: translate(-50%, -50%);\n        border: 1px solid black;\n        text-align: center;\n    }\n</style>\n<body>\n\t<button id='open'>打开弹框</button>\n\t<button id='close'>关闭弹框</button>\n</body>\n<script>\n    // 核心逻辑，这里采用了闭包思路来实现单例模式\n    const Modal = (function() {\n    \tlet modal = null\n    \treturn function() {\n            if(!modal) {\n            \tmodal = document.createElement('div')\n            \tmodal.innerHTML = '我是一个全局唯一的Modal'\n            \tmodal.id = 'modal'\n            \tmodal.style.display = 'none'\n            \tdocument.body.appendChild(modal)\n            }\n            return modal\n    \t}\n    })()\n\n    // 点击打开按钮展示模态框\n    document.getElementById('open').addEventListener('click', function() {\n        // 未点击则不创建modal实例，避免不必要的内存占用;此处不用 new Modal 的形式调用也可以，和 Storage 同理\n    \tconst modal = new Modal()\n    \tmodal.style.display = 'block'\n    })\n\n    // 点击关闭按钮隐藏模态框\n    document.getElementById('close').addEventListener('click', function() {\n    \tconst modal = new Modal()\n    \tif(modal) {\n    \t    modal.style.display = 'none'\n    \t}\n    })\n<\/script>\n</html>\n\n")])])]),n("p",[e._v("是不是发现又是熟悉的套路？又可以默写了？（ES6 版本的实现大家自己尝试默写一下，相信对现在的你来说已经非常简单了）。")]),e._v(" "),n("p",[e._v("这就是单例模式面试题的特点，准确地说，是所有设计模式相关面试题的特点——牢记核心思路，就能举一反三。所以说设计模式的学习是典型的一分耕耘一分收获，性价比极高。")]),e._v(" "),n("h2",{attrs:{id:"_6-创建型：原型模式——谈prototype无小事"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6-创建型：原型模式——谈prototype无小事","aria-hidden":"true"}},[e._v("#")]),e._v(" "),n("a",{attrs:{href:"#_6-%E5%88%9B%E5%BB%BA%E5%9E%8B%EF%BC%9A%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94%E8%B0%88prototype%E6%97%A0%E5%B0%8F%E4%BA%8B"}},[e._v("#")]),e._v(" 6. 创建型：原型模式——谈Prototype无小事")]),e._v(" "),n("p",[e._v("原型模式不仅是一种设计模式，它还是一种"),n("strong",[e._v("编程范式（programming paradigm）")]),e._v("，是 JavaScript 面向对象系统实现的根基。")]),e._v(" "),n("p",[e._v("在原型模式下，当我们想要创建一个对象时，会先找到一个对象作为原型，然后通过"),n("strong",[e._v("克隆原型")]),e._v("的方式来创建出一个与原型一样（共享一套数据/方法）的对象。在 JavaScript 里，"),n("code",[e._v("Object.create")]),e._v("方法就是原型模式的天然实现——准确地说，只要我们还在借助"),n("code",[e._v("Prototype")]),e._v("来实现对象的创建和原型的继承，那么我们就是在应用原型模式。")]),e._v(" "),n("p",[e._v("有的设计模式资料中会强调，原型模式就是拷贝出一个新对象，认为在 JavaScript 类里实现了深拷贝方法才算是应用了原型模式。这是非常典型的对 JAVA/C++ 设计模式的生搬硬套，更是对 JavaScript 原型模式的一种误解。事实上，在JAVA中，确实存在原型模式相关的克隆接口规范。但在 JavaScript 中，我们使用原型模式，并不是为了得到一个副本，而是为了得到与构造函数（类）相对应的类型的实例、实现数据/方法的共享。克隆是实现这个目的的方法，但克隆本身并不是我们的目的。")]),e._v(" "),n("h3",{attrs:{id:"_6-1-以类为中心的语言和以原型为中心的语言"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6-1-以类为中心的语言和以原型为中心的语言","aria-hidden":"true"}},[e._v("#")]),e._v(" "),n("a",{attrs:{href:"#_6-1-%E4%BB%A5%E7%B1%BB%E4%B8%BA%E4%B8%AD%E5%BF%83%E7%9A%84%E8%AF%AD%E8%A8%80%E5%92%8C%E4%BB%A5%E5%8E%9F%E5%9E%8B%E4%B8%BA%E4%B8%AD%E5%BF%83%E7%9A%84%E8%AF%AD%E8%A8%80"}},[e._v("#")]),e._v(" 6.1 以类为中心的语言和以原型为中心的语言")]),e._v(" "),n("p",[e._v("相信很多小伙伴读到这儿还会有些迷惑：使用 JavaScript 以来，我确实离不开Prototype，按照上面的说法，也算是原型模式重度用户了。但这个原型模式用得我一脸懵逼啊——难道我还有除了Prototype以外的选择？")]),e._v(" "),n("h4",{attrs:{id:"_6-1-1-java-中的类"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6-1-1-java-中的类","aria-hidden":"true"}},[e._v("#")]),e._v(" "),n("a",{attrs:{href:"#_6-1-1-java-%E4%B8%AD%E7%9A%84%E7%B1%BB"}},[e._v("#")]),e._v(" 6.1.1 Java 中的类")]),e._v(" "),n("p",[e._v("作为 JavaScript 开发者，我们确实没有别的选择 —— 毕竟开头我们说过，原型模式是 JavaScript 这门语言面向对象系统的根本。但在其它语言，比如 JAVA 中，类才是它面向对象系统的根本。所以说在 JAVA 中，我们可以选择不使用原型模式 —— 这样一来，所有的实例都必须要从类中来，当我们希望创建两个一模一样的实例时，就只能这样做（假设实例从 Dog 类中来,必传参数为姓名、性别、年龄和品种）：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Dog dog = new Dog('旺财', 'male', 3, '柴犬')\n\nDog dog_copy = new Dog('旺财', 'male', 3, '柴犬')\n\n")])])]),n("p",[e._v("没错，我们不得不把一模一样的参数传两遍，非常麻烦。而原型模式允许我们通过调用克隆方法的方式达到同样的目的，比较方便，所以 Java 专门针对原型模式设计了一套接口和方法，在必要的场景下会通过原型方法来应用原型模式。当然，在更多的情况下，Java 仍以“实例化类”这种方式来创建对象。")]),e._v(" "),n("h4",{attrs:{id:"_6-1-2-javascript-中的“类”"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6-1-2-javascript-中的“类”","aria-hidden":"true"}},[e._v("#")]),e._v(" "),n("a",{attrs:{href:"#_6-1-2-javascript-%E4%B8%AD%E7%9A%84%E2%80%9C%E7%B1%BB%E2%80%9D"}},[e._v("#")]),e._v(" 6.1.2 JavaScript 中的“类”")]),e._v(" "),n("p",[e._v("这时有一部分小伙伴估计要炸毛了：啥？？？JavaScript 只能用Prototype？我看你还活在上世纪，ES6 早就支持类了！现在我们 JavaScript 也是以类为中心的语言了。")]),e._v(" "),n("p",[e._v("这波同学的思想非常危险，因为 ES6 的类其实是原型继承的语法糖:")]),e._v(" "),n("blockquote",[n("p",[e._v("ECMAScript 2015 中引入的 JavaScript 类实质上是 JavaScript 现有的基于原型的继承的语法糖。类语法不会为 JavaScript 引入新的面向对象的继承模型。 ——MDN")])]),e._v(" "),n("p",[e._v("当我们尝试用 class 去定义一个 Dog 类时：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("class Dog {\n  constructor(name ,age) {\n   this.name = name\n   this.age = age\n  }\n\n  eat() {\n    console.log('肉骨头真好吃')\n  }\n}\n\n")])])]),n("p",[e._v("其实完全等价于写了这么一个构造函数:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("function Dog(name, age) {\n  this.name = name\n  this.age = age\n}\n\nDog.prototype.eat = function() {\n  console.log('肉骨头真好吃')\n}\n\n")])])]),n("p",[e._v("所以说 JavaScript 这门语言的根本就是原型模式。在 Java 等强类型语言中，原型模式的出现是为了实现类型之间的解耦。而 JavaScript 本身类型就比较模糊，不存在类型耦合的问题，所以说咱们平时根本不会刻意地去使用原型模式。因此我们此处不必强行把原型模式当作一种设计模式去理解，把它作为一种编程范式来讨论会更合适。")]),e._v(" "),n("h3",{attrs:{id:"_6-2-谈原型模式，其实是谈原型范式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6-2-谈原型模式，其实是谈原型范式","aria-hidden":"true"}},[e._v("#")]),e._v(" "),n("a",{attrs:{href:"#_6-2-%E8%B0%88%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F%EF%BC%8C%E5%85%B6%E5%AE%9E%E6%98%AF%E8%B0%88%E5%8E%9F%E5%9E%8B%E8%8C%83%E5%BC%8F"}},[e._v("#")]),e._v(" 6.2 谈原型模式，其实是谈原型范式")]),e._v(" "),n("p",[e._v("原型编程范式的核心思想就是"),n("strong",[e._v("利用实例来描述对象，用实例作为定义对象和继承的基础")]),e._v("。在 JavaScript 中，原型编程范式的体现就是"),n("strong",[e._v("基于原型链的继承")]),e._v("。这其中，对原型、原型链的理解是关键。")]),e._v(" "),n("h4",{attrs:{id:"_6-2-1-原型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6-2-1-原型","aria-hidden":"true"}},[e._v("#")]),e._v(" "),n("a",{attrs:{href:"#_6-2-1-%E5%8E%9F%E5%9E%8B"}},[e._v("#")]),e._v(" 6.2.1 原型")]),e._v(" "),n("p",[e._v("在 JavaScript 中，每个构造函数都拥有一个"),n("code",[e._v("prototype")]),e._v("属性，它指向构造函数的原型对象，这个原型对象中有一个 construtor 属性指回构造函数；每个实例都有一个"),n("code",[e._v("__proto__")]),e._v("属性，当我们使用构造函数去创建实例时，实例的"),n("code",[e._v("__proto__")]),e._v("属性就会指向构造函数的原型对象。")]),e._v(" "),n("p",[e._v("具体来说，当我们这样使用构造函数创建一个对象时：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// 创建一个Dog构造函数\nfunction Dog(name, age) {\n  this.name = name\n  this.age = age\n}\n\nDog.prototype.eat = function() {\n  console.log('肉骨头真好吃')\n}\n\n// 使用Dog构造函数创建dog实例\nconst dog = new Dog('旺财', 3)\n\n")])])]),n("p",[e._v("这段代码里的几个实体之间就存在着这样的关系：")]),e._v(" "),n("p",[n("img",{attrs:{src:"http://wsk-mweb.oss-cn-hangzhou.aliyuncs.com/2020/01/20/15795240413320.jpg",alt:"-w492"}})]),e._v(" "),n("h4",{attrs:{id:"_6-2-1-原型链"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6-2-1-原型链","aria-hidden":"true"}},[e._v("#")]),e._v(" "),n("a",{attrs:{href:"#_6-2-1-%E5%8E%9F%E5%9E%8B%E9%93%BE"}},[e._v("#")]),e._v(" 6.2.1 "),n("strong",[e._v("原型链")])]),e._v(" "),n("p",[e._v("现在我在上面那段代码的基础上，进行两个方法调用:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('// 输出"肉骨头真好吃"\ndog.eat()\n\n// 输出"[object Object]"\ndog.toString()\n\n')])])]),n("p",[e._v("明明没有在 dog 实例里手动定义 eat 方法和 toString 方法，它们还是被成功地调用了。这是因为当我试图访问一个 JavaScript 实例的属性/方法时，它首先搜索这个实例本身；当发现实例没有定义对应的属性/方法时，它会转而去搜索实例的原型对象；如果原型对象中也搜索不到，它就去搜索原型对象的原型对象，这个搜索的轨迹，就叫做原型链。")]),e._v(" "),n("p",[e._v("以我们的 eat 方法和 toString 方法的调用过程为例，它的搜索过程就是这样子的：")]),e._v(" "),n("p",[n("img",{attrs:{src:"http://wsk-mweb.oss-cn-hangzhou.aliyuncs.com/2020/01/21/15795296379446.jpg",alt:"-w1022"}}),e._v(" 楼上这些彼此相连的 "),n("code",[e._v("prototype")]),e._v("，就组成了一个原型链。 注： 几乎所有 JavaScript 中的对象都是位于原型链顶端的 Object 的实例，除了"),n("code",[e._v("Object.prototype")]),e._v("（当然，如果我们手动用"),n("code",[e._v("Object.create(null)")]),e._v("创建一个没有任何原型的对象，那它也不是 Object 的实例）。")]),e._v(" "),n("p",[e._v("以上为大家介绍了原型、原型链等 JavaScript 中核心的基础知识。这些不仅是基础中的基础，也是面试中的重点。此外在面试中，一些面试官可能会刻意混淆 JavaScript 中原型范式和强类型语言中原型模式的区别，当他们这么做的时候不一定是因为对语言、对设计模式的理解有问题，而很有可能是为了考察你对象的深拷贝。")]),e._v(" "),n("h3",{attrs:{id:"_6-3-对象的深拷贝"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6-3-对象的深拷贝","aria-hidden":"true"}},[e._v("#")]),e._v(" "),n("a",{attrs:{href:"#_6-3-%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%B7%B1%E6%8B%B7%E8%B4%9D"}},[e._v("#")]),e._v(" 6.3 对象的深拷贝")]),e._v(" "),n("p",[e._v("这类题目的发问方式又很多，除了“模拟 JAVA 中的克隆接口”、“JavaScript 实现原型模式”以外，它更常见、更友好的发问形式是“请实现JS中的深拷贝”。")]),e._v(" "),n("p",[e._v("实现 JavaScript 中的深拷贝，有一种非常取巧的方式 —— JSON.stringify：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const liLei = {\n    name: 'lilei',\n    age: 28,\n    habits: ['coding', 'hiking', 'running']\n}\n\nconst liLeiStr = JSON.stringify(liLei)\nconst liLeiCopy = JSON.parse(liLeiStr)\n\nliLeiCopy.habits.splice(0, 1)\nconsole.log('李雷副本的habits数组是', liLeiCopy.habits)\nconsole.log('李雷的habits数组是',  liLei.habits)\n\n")])])]),n("p",[e._v("丢进控制台检验一下，我们发现引用类型也被成功拷贝了，副本和本体相互不干扰，正合我意~")]),e._v(" "),n("p",[n("img",{attrs:{src:"http://wsk-mweb.oss-cn-hangzhou.aliyuncs.com/2020/01/21/15795323943582.jpg",alt:"-w559"}}),e._v(" 但是注意，这个方法存在一些局限性，比如无法处理 function、无法处理正则等等——只有当你的对象是一个严格的 JSON 对象时，可以顺利使用这个方法。在面试过程中，大家答出这个答案没有任何问题，但不要仅仅答这一种做法。")]),e._v(" "),n("p",[e._v("**深拷贝没有完美方案，每一种方案都有它的边界 case。**而面试官向你发问也并非是要求你破解人类未解之谜，多数情况下，他只是希望考查你对递归的熟练程度。所以递归实现深拷贝的核心思路，大家需要重点掌握（解析在注释里）：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("function deepClone(obj) {\n    // 如果是 值类型 或 null，则直接return\n    if(typeof obj !== 'object' || obj === null) {\n        return obj\n    }\n\n    // 定义结果对象\n    let copy = {}\n\n    // 如果对象是数组，则定义结果数组\n    if(obj.constructor === Array) {\n        copy = []\n    }\n\n    // 遍历对象的key\n    for(let key in obj) {\n        // 如果key是对象的自有属性\n        if(obj.hasOwnProperty(key)) {\n            // 递归调用深拷贝方法\n            copy[key] = deepClone(obj[key])\n        }\n    }\n\n    return copy\n}\n\n")])])]),n("p",[e._v("调用深拷贝方法，若属性为值类型，则直接返回；若属性为引用类型，则递归遍历。这就是我们在解这一类题时的核心的方法。")]),e._v(" "),n("p",[n("strong",[e._v("拓展阅读")])]),e._v(" "),n("p",[e._v("深拷贝在命题时，可发挥的空间主要在于针对不同数据结构的处理，比如除了考虑 Array、Object，还需要考虑一些其它的数据结构（Map、Set 等）；此外还有一些极端 case（循环引用等）的处理等等。深拷贝的实现细节，这里为大家推荐两个阅读材料：")]),e._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"https://github.com/jquery/jquery/blob/1472290917f17af05e98007136096784f9051fab/src/core.js#L121",target:"_blank",rel:"noopener noreferrer"}},[e._v("jQuery中的extend方法源码"),n("OutboundLink")],1)]),e._v(" "),n("li",[n("a",{attrs:{href:"https://juejin.im/book/5c70fc83518825428d7f9dfb/section/5c84d96ee51d453b7666b2ad",target:"_blank",rel:"noopener noreferrer"}},[e._v("深拷贝的终极探索"),n("OutboundLink")],1)])]),e._v(" "),n("h2",{attrs:{id:"_7-结构型：装饰器模式——对象装上它，就像开了挂"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_7-结构型：装饰器模式——对象装上它，就像开了挂","aria-hidden":"true"}},[e._v("#")]),e._v(" "),n("a",{attrs:{href:"#_7-%E7%BB%93%E6%9E%84%E5%9E%8B%EF%BC%9A%E8%A3%85%E9%A5%B0%E5%99%A8%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94%E5%AF%B9%E8%B1%A1%E8%A3%85%E4%B8%8A%E5%AE%83%EF%BC%8C%E5%B0%B1%E5%83%8F%E5%BC%80%E4%BA%86%E6%8C%82"}},[e._v("#")]),e._v(" 7. 结构型：装饰器模式——对象装上它，就像开了挂")]),e._v(" "),n("p",[e._v("装饰器模式，又名装饰者模式。它的定义是“在不改变原对象的基础上，通过对其进行包装拓展，使原有对象可以满足用户的更复杂需求”。")]),e._v(" "),n("p",[e._v("当然，对于没接触过装饰器的同学来说，这段定义意义不大。我们先借助一个生活中的例子来理解装饰器：")]),e._v(" "),n("h3",{attrs:{id:"_7-1-生活中的装饰器"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_7-1-生活中的装饰器","aria-hidden":"true"}},[e._v("#")]),e._v(" "),n("a",{attrs:{href:"#_7-1-%E7%94%9F%E6%B4%BB%E4%B8%AD%E7%9A%84%E8%A3%85%E9%A5%B0%E5%99%A8"}},[e._v("#")]),e._v(" 7.1 生活中的装饰器")]),e._v(" "),n("p",[e._v("去年有个手机壳在同事里非常流行，我也随大流买了一个，它长这样：")]),e._v(" "),n("p",[n("img",{attrs:{src:"http://wsk-mweb.oss-cn-hangzhou.aliyuncs.com/2020/01/21/15796203944131.jpg",alt:"-w683"}})]),e._v(" "),n("p",[e._v("这个手机壳的安装方式和普通手机壳一样，就是卡在手机背面。不同的是它卡上去后会变成一块水墨屏，这样一来我们手机就有了两个屏幕。平时办公或者玩游戏的时候，用正面的普通屏幕；阅读的时候怕伤眼睛，就可以翻过来用背面的水墨屏了。")]),e._v(" "),n("p",[e._v("这个水墨屏手机壳安装后，"),n("strong",[e._v("不会对手机原有的功能产生任何影响，仅仅是使手机具备了一种新的能力")]),e._v("（多了块屏幕），因此它在此处就是一个标准的装饰器。")]),e._v(" "),n("h4",{attrs:{id:"_7-1-2-装饰器的应用场景"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_7-1-2-装饰器的应用场景","aria-hidden":"true"}},[e._v("#")]),e._v(" "),n("a",{attrs:{href:"#_7-1-2-%E8%A3%85%E9%A5%B0%E5%99%A8%E7%9A%84%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF"}},[e._v("#")]),e._v(" 7.1.2 装饰器的应用场景")]),e._v(" "),n("p",[e._v("按钮是我们平时写业务时常见的页面元素。假设我们的初始需求是：每个业务中的按钮在点击后都弹出「您还未登录哦」的弹框。")]),e._v(" "),n("p",[e._v("那我们可以很轻易地写出这个需求的代码：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>按钮点击需求1.0</title>\n</head>\n<style>\n    #modal {\n        height: 200px;\n        width: 200px;\n        line-height: 200px;\n        position: fixed;\n        left: 50%;\n        top: 50%;\n        transform: translate(-50%, -50%);\n        border: 1px solid black;\n        text-align: center;\n    }\n</style>\n<body>\n\t<button id='open'>点击打开</button>\n\t<button id='close'>关闭弹框</button>\n</body>\n<script>\n    // 弹框创建逻辑，这里我们复用了单例模式面试题的例子\n    const Modal = (function() {\n    \tlet modal = null\n    \treturn function() {\n            if(!modal) {\n            \tmodal = document.createElement('div')\n            \tmodal.innerHTML = '您还未登录哦~'\n            \tmodal.id = 'modal'\n            \tmodal.style.display = 'none'\n            \tdocument.body.appendChild(modal)\n            }\n            return modal\n    \t}\n    })()\n\n    // 点击打开按钮展示模态框\n    document.getElementById('open').addEventListener('click', function() {\n        // 未点击则不创建modal实例，避免不必要的内存占用\n    \tconst modal = new Modal()\n    \tmodal.style.display = 'block'\n    })\n\n    // 点击关闭按钮隐藏模态框\n    document.getElementById('close').addEventListener('click', function() {\n    \tconst modal = document.getElementById('modal')\n    \tif(modal) {\n    \t    modal.style.display = 'none'\n    \t}\n    })\n<\/script>\n</html>\n\n")])])]),n("p",[e._v("按钮发布上线后，过了几天太平日子。忽然有一天，产品经理找到你，说这个弹框提示还不够明显，我们应该在弹框被关闭后把按钮的文案改为“快去登录”，同时把按钮置灰。")]),e._v(" "),n("p",[e._v("听到这个消息，你立刻马不停蹄地翻出之前的代码，找到了按钮的 click 监听函数，手动往里面添加了文案修改&按钮置灰逻辑。但这还没完，因为你司的几乎每个业务里都用到了这类按钮：除了“点击打开”按钮，还有“点我开始”、“点击购买”按钮等各种五花八门的按钮，这意味着你不得不深入到每一个业务的深处去给不同的按钮添加这部分逻辑。")]),e._v(" "),n("p",[e._v("有的业务不在你这儿，但作为这个新功能迭代的 owner，你还需要把需求细节再通知到每一个相关同事（要么你就自己上，去改别人的代码，更恐怖），怎么想怎么麻烦。一个文案修改&按钮置灰尚且如此麻烦，更不要说我们日常开发中遇到的更复杂的需求变更了")]),e._v(" "),n("p",[e._v("不仅麻烦，直接去修改已有的函数体，这种做法违背了我们的“开放封闭原则”；往一个函数体里塞这么多逻辑，违背了我们的“单一职责原则”。所以说这个事儿，越想越不能这么干。")]),e._v(" "),n("blockquote",[n("p",[e._v("我想一定会有同学质疑说为啥不把按钮抽成公共组件 Button，这样只需要在 Button 组件里修改一次逻辑就可以了。这种想法非常好。但注意，我们楼上的例子没有写组件直接写了 Button 标签是为了简化示例。事实上真要写组件的话，不同业务里必定有针对业务定制的不同 Button 组件，比如 MoreButton 、BeginButton等等，也是五花八门的，所以说我们仍会遇到同样的困境。")])]),e._v(" "),n("p",[e._v("讲真，我想任何人去做这个需求的时候，其实都压根不想去关心它现有的业务逻辑是啥样的——你说这按钮的旧逻辑是我自己写的还好，理解成本不高；万一碰上是个离职同事写的，那阅读难度谁能预料呢？我不想接锅，我只是想对它已有的功能做个拓展，只关心拓展出来的那部分新功能如何实现，对不对？")]),e._v(" "),n("p",[e._v("程序员说：“我不想努力了，我想开挂”，于是便有了装饰器模式。")]),e._v(" "),n("h3",{attrs:{id:"_7-2-装饰器模式初相见"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_7-2-装饰器模式初相见","aria-hidden":"true"}},[e._v("#")]),e._v(" "),n("a",{attrs:{href:"#_7-2-%E8%A3%85%E9%A5%B0%E5%99%A8%E6%A8%A1%E5%BC%8F%E5%88%9D%E7%9B%B8%E8%A7%81"}},[e._v("#")]),e._v(" 7.2 装饰器模式初相见")]),e._v(" "),n("p",[e._v("为了不被已有的业务逻辑干扰，当务之急就是将旧逻辑与新逻辑分离，"),n("strong",[e._v("把旧逻辑抽出去")]),e._v("：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// 将展示Modal的逻辑单独封装\nfunction openModal() {\n    const modal = new Modal()\n    modal.style.display = 'block'\n}\n\n")])])]),n("p",[e._v("编写新逻辑：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// 按钮文案修改逻辑\nfunction changeButtonText() {\n    const btn = document.getElementById('open')\n    btn.innerText = '快去登录'\n}\n\n// 按钮置灰逻辑\nfunction disableButton() {\n    const btn =  document.getElementById('open')\n    btn.setAttribute(\"disabled\", true)\n}\n\n// 新版本功能逻辑整合\nfunction changeButtonStatus() {\n    changeButtonText()\n    disableButton()\n}\n\n")])])]),n("p",[e._v("然后把三个操作逐个添加open按钮的监听函数里：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("document.getElementById('open').addEventListener('click', function() {\n    openModal()\n    changeButtonStatus()\n})\n\n")])])]),n("p",[e._v("如此一来，我们就实现了“只添加，不修改”的装饰器模式，使用changeButtonStatus的逻辑装饰了旧的按钮点击逻辑。以上是ES5中的实现，ES6中，我们可以以一种更加面向对象化的方式去写：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// 定义打开按钮\nclass OpenButton {\n    // 点击后展示弹框（旧逻辑）\n    onClick() {\n        const modal = new Modal()\n    \tmodal.style.display = 'block'\n    }\n}\n\n// 定义按钮对应的装饰器\nclass Decorator {\n    // 将按钮实例传入\n    constructor(open_button) {\n        this.open_button = open_button\n    }\n\n    onClick() {\n        this.open_button.onClick()\n        // “包装”了一层新逻辑\n        this.changeButtonStatus()\n    }\n\n    changeButtonStatus() {\n        this.changeButtonText()\n        this.disableButton()\n    }\n\n    disableButton() {\n        const btn =  document.getElementById('open')\n        btn.setAttribute(\"disabled\", true)\n    }\n\n    changeButtonText() {\n        const btn = document.getElementById('open')\n        btn.innerText = '快去登录'\n    }\n}\n\nconst openButton = new OpenButton()\nconst decorator = new Decorator(openButton)\n\ndocument.getElementById('open').addEventListener('click', function() {\n    // openButton.onClick()\n    // 此处可以分别尝试两个实例的onClick方法，验证装饰器是否生效\n    decorator.onClick()\n})\n\n")])])]),n("p",[e._v("大家这里需要特别关注一下 ES6 这个版本的实现，这里我们把按钮实例传给了 Decorator，以便于后续 Decorator 可以对它进行逻辑的拓展。在 ES7 中，Decorator 作为一种语法被直接支持了，它的书写会变得更加简单，但背后的原理其实与此大同小异。在下一节，我们将一起去探究一下 ES7 中 Decorator 背后的故事。")]),e._v(" "),n("h3",{attrs:{id:"_7-3-值得关注的细节"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_7-3-值得关注的细节","aria-hidden":"true"}},[e._v("#")]),e._v(" "),n("a",{attrs:{href:"#_7-3-%E5%80%BC%E5%BE%97%E5%85%B3%E6%B3%A8%E7%9A%84%E7%BB%86%E8%8A%82"}},[e._v("#")]),e._v(" 7.3 值得关注的细节")]),e._v(" "),n("h4",{attrs:{id:"_7-3-1-单一职责原则"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_7-3-1-单一职责原则","aria-hidden":"true"}},[e._v("#")]),e._v(" "),n("a",{attrs:{href:"#_7-3-1-%E5%8D%95%E4%B8%80%E8%81%8C%E8%B4%A3%E5%8E%9F%E5%88%99"}},[e._v("#")]),e._v(" 7.3.1 单一职责原则")]),e._v(" "),n("p",[e._v("大家可能刚刚没来得及注意，按钮新逻辑中，文本修改&按钮置灰这两个变化，被我封装在了两个不同的方法里，并以组合的形式出现在了最终的目标方法changeButtonStatus里。这样做的目的是为了强化大家脑中的“单一职责”意识。将不同的职责分离，可以做到每个职责都能被灵活地复用；同时，不同职责之间无法相互干扰，不会出现因为修改了 A 逻辑而影响了 B 逻辑的狗血剧情。")]),e._v(" "),n("p",[e._v("但是，设计原则并非是板上钉钉的教条。在此处，我们的代码总共只有两行、且比较简单，逻辑分离的诉求并不特别强，分开最好，不分影响也不大（此处我们选择了拆散两段逻辑，更多地是为了强化大家的意识）。在日常开发中，当遇到两段各司其职的代码逻辑时，我们首先要有“尝试拆分”的敏感，其次要有“该不该拆”的判断——当逻辑粒度过小时，盲目拆分会导致你的项目里存在过多的零碎的小方法，这反而不会使我们的代码变得更好。")]),e._v(" "),n("h2",{attrs:{id:"_8-结构型：装饰器模式——深入装饰器原理与优秀案例"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_8-结构型：装饰器模式——深入装饰器原理与优秀案例","aria-hidden":"true"}},[e._v("#")]),e._v(" "),n("a",{attrs:{href:"#_8-%E7%BB%93%E6%9E%84%E5%9E%8B%EF%BC%9A%E8%A3%85%E9%A5%B0%E5%99%A8%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94%E6%B7%B1%E5%85%A5%E8%A3%85%E9%A5%B0%E5%99%A8%E5%8E%9F%E7%90%86%E4%B8%8E%E4%BC%98%E7%A7%80%E6%A1%88%E4%BE%8B"}},[e._v("#")]),e._v(" 8. 结构型：装饰器模式——深入装饰器原理与优秀案例")]),e._v(" "),n("h3",{attrs:{id:"_8-1-前置知识：es7-中的装饰器"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_8-1-前置知识：es7-中的装饰器","aria-hidden":"true"}},[e._v("#")]),e._v(" "),n("a",{attrs:{href:"#_8-1-%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86%EF%BC%9Aes7-%E4%B8%AD%E7%9A%84%E8%A3%85%E9%A5%B0%E5%99%A8"}},[e._v("#")]),e._v(" 8.1 前置知识：ES7 中的装饰器")]),e._v(" "),n("p",[e._v("在 ES7 中，我们可以像写 python 一样通过一个@语法糖轻松地给一个类装上装饰器：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// 装饰器函数，它的第一个参数是目标类\nfunction classDecorator(target) {\n    target.hasDecorator = true\n  \treturn target\n}\n\n// 将装饰器“安装”到Button类上\n@classDecorator\nclass Button {\n    // Button类的相关逻辑\n}\n\n// 验证装饰器是否生效\nconsole.log('Button 是否被装饰了：', Button.hasDecorator)\n\n")])])]),n("p",[e._v("也可以用同样的语法糖去装饰类里面的方法：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// 具体的参数意义，在下个小节，这里大家先感知一下操作\nfunction funcDecorator(target, name, descriptor) {\n    let originalMethod = descriptor.value\n    descriptor.value = function() {\n    console.log('我是Func的装饰器逻辑')\n    return originalMethod.apply(this, arguments)\n  }\n  return descriptor\n}\n\nclass Button {\n    @funcDecorator\n    onClick() {\n        console.log('我是Func的原有逻辑')\n    }\n}\n\n// 验证装饰器是否生效\nconst button = new Button()\nbutton.onClick()\n\n")])])]),n("p",[e._v("注：以上代码直接放进浏览器/Node 中运行会报错，因为浏览器和 Node 目前都不支持装饰器语法，需要大家安装 Babel 进行转码：")]),e._v(" "),n("blockquote",[n("p",[e._v("安装 Babel 及装饰器相关的 Babel 插件")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("npm install babel-preset-env babel-plugin-transform-decorators-legacy --save-dev\n\n")])])]),n("p",[e._v("注：在没有任何配置选项的情况下，babel-preset-env 与 babel-preset-latest（或者 babel-preset-es2015，babel-preset-es2016 和 babel-preset-es2017 一起）的行为完全相同。")]),e._v(" "),n("blockquote",[n("p",[e._v("编写配置文件.babelrc：")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('{\n  "presets": ["env"],\n  "plugins": ["transform-decorators-legacy"]\n}\n\n')])])]),n("p",[e._v("最后别忘了下载全局的 Babel 命令行工具用于转码：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("npm install babel-cli -g\n\n")])])]),n("p",[e._v("执行完这波操作，我们首先是对目标文件进行转码，比如说你的目标文件叫做 test.js，想要把它转码后的结果输出到 babel_test.js，就可以这么写:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("babel test.js --out-file babel_test.js\n\n")])])]),n("blockquote",[n("p",[e._v("运行babel_test.js")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("babel_test.js\n\n")])])]),n("p",[e._v("就可以看到你的装饰器是否生效啦~")]),e._v(" "),n("p",[e._v("OK，知道了装饰器长啥样，我们一起看看装饰器的实现细节：")]),e._v(" "),n("h3",{attrs:{id:"_8-2-装饰器语法糖背后的故事"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_8-2-装饰器语法糖背后的故事","aria-hidden":"true"}},[e._v("#")]),e._v(" "),n("a",{attrs:{href:"#_8-2-%E8%A3%85%E9%A5%B0%E5%99%A8%E8%AF%AD%E6%B3%95%E7%B3%96%E8%83%8C%E5%90%8E%E7%9A%84%E6%95%85%E4%BA%8B"}},[e._v("#")]),e._v(" 8.2 装饰器语法糖背后的故事")]),e._v(" "),n("p",[e._v("所谓语法糖，往往意味着“美好的表象”。正如 class 语法糖背后是大家早已十分熟悉的 ES5 构造函数一样，装饰器语法糖背后也是我们的老朋友，不信我们一起来看看@decorator都帮我们做了些什么：")]),e._v(" "),n("h4",{attrs:{id:"_8-2-1-part1：函数传参-调用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_8-2-1-part1：函数传参-调用","aria-hidden":"true"}},[e._v("#")]),e._v(" "),n("a",{attrs:{href:"#_8-2-1-part1%EF%BC%9A%E5%87%BD%E6%95%B0%E4%BC%A0%E5%8F%82-%E8%B0%83%E7%94%A8"}},[e._v("#")]),e._v(" 8.2.1 Part1：函数传参&调用")]),e._v(" "),n("p",[e._v("上一节我们使用 ES6 实现装饰器模式时曾经将按钮实例传给了 Decorator，以便于后续 Decorator 可以对它进行逻辑的拓展。这也正是装饰器的最最基本操作——定义装饰器函数，将被装饰者“交给”装饰器。这也正是装饰器语法糖首先帮我们做掉的工作 —— 函数传参&调用。")]),e._v(" "),n("p",[n("strong",[e._v("类装饰器的参数")])]),e._v(" "),n("p",[e._v("当我们给一个类添加装饰器时：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("function classDecorator(target) {\n    target.hasDecorator = true\n  \treturn target\n}\n\n// 将装饰器“安装”到Button类上\n@classDecorator\nclass Button {\n    // Button类的相关逻辑\n}\n\n")])])]),n("p",[e._v("此处的 target 就是被装饰的类本身。")]),e._v(" "),n("p",[n("strong",[e._v("方法装饰器的参数")])]),e._v(" "),n("p",[e._v("而当我们给一个方法添加装饰器时：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("function funcDecorator(target, name, descriptor) {\n    let originalMethod = descriptor.value\n    descriptor.value = function() {\n    console.log('我是Func的装饰器逻辑')\n    return originalMethod.apply(this, arguments)\n  }\n  return descriptor\n}\n\nclass Button {\n    @funcDecorator\n    onClick() {\n        console.log('我是Func的原有逻辑')\n    }\n}\n\n")])])]),n("p",[e._v("此处的 target 变成了Button.prototype，即类的原型对象。这是因为 onClick 方法总是要依附其实例存在的，修饰 onClik 其实是修饰它的实例。但我们的装饰器函数执行的时候，Button 实例还并不存在。为了确保实例生成后可以顺利调用被装饰好的方法，装饰器只能去修饰 Button 类的原型对象。")]),e._v(" "),n("p",[n("strong",[e._v("装饰器函数调用的时机")])]),e._v(" "),n("p",[e._v("装饰器函数执行的时候，Button 实例还并不存在。这是因为实例是在我们的代码运行时动态生成的，而装饰器函数则是在编译阶段就执行了。所以说装饰器函数真正能触及到的，就只有类这个层面上的对象。")]),e._v(" "),n("h4",{attrs:{id:"_8-2-2-part2：将“属性描述对象”交到你手里"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_8-2-2-part2：将“属性描述对象”交到你手里","aria-hidden":"true"}},[e._v("#")]),e._v(" "),n("a",{attrs:{href:"#_8-2-2-part2%EF%BC%9A%E5%B0%86%E2%80%9C%E5%B1%9E%E6%80%A7%E6%8F%8F%E8%BF%B0%E5%AF%B9%E8%B1%A1%E2%80%9D%E4%BA%A4%E5%88%B0%E4%BD%A0%E6%89%8B%E9%87%8C"}},[e._v("#")]),e._v(" 8.2.2 Part2：将“属性描述对象”交到你手里")]),e._v(" "),n("p",[e._v("在编写类装饰器时，我们一般获取一个target参数就足够了。但在编写方法装饰器时，我们往往需要至少三个参数：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("function funcDecorator(target, name, descriptor) {\n    let originalMethod = descriptor.value\n    descriptor.value = function() {\n    console.log('我是Func的装饰器逻辑')\n    return originalMethod.apply(this, arguments)\n  }\n  return descriptor\n}\n\n")])])]),n("p",[e._v("第一个参数的意义，前文已经解释过。第二个参 数name，是我们修饰的目标属性属性名，也没啥好讲的。关键就在这个 descriptor 身上，它也是我们使用频率最高的一个参数，它的真面目就是“属性描述对象”（attributes object）。这个名字大家可能不熟悉，但"),n("code",[e._v("Object.defineProperty")]),e._v("方法我想大家多少都用过，它的调用方式是这样的：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Object.defineProperty(obj, prop, descriptor)\n\n")])])]),n("p",[e._v("此处的descriptor和装饰器函数里的 descriptor 是一个东西，它是 JavaScript 提供的一个内部数据结构、一个对象，专门用来描述对象的属性。它由各种各样的属性描述符组成，这些描述符又分为数据描述符和存取描述符：")]),e._v(" "),n("ul",[n("li",[e._v("数据描述符：包括 value（存放属性值，默认为默认为 undefined）、writable（表示属性值是否可改变，默认为true）、enumerable（表示属性是否可枚举，默认为 true）、configurable（属性是否可配置，默认为true）。")]),e._v(" "),n("li",[e._v("存取描述符：包括 "),n("code",[e._v("get")]),e._v(" 方法（访问属性时调用的方法，默认为 undefined），"),n("code",[e._v("set")]),e._v("（设置属性时调用的方法，默认为 undefined ）")])]),e._v(" "),n("p",[e._v("很明显，拿到了 descriptor，就相当于拿到了目标方法的控制权。通过修改 descriptor，我们就可以对目标方法的逻辑进行拓展了~")]),e._v(" "),n("p",[e._v("在上文的示例中，我们通过 descriptor 获取到了原函数的函数体（originalMethod），把原函数推迟到了新逻辑（console）的后面去执行。这种做法和我们上一节在ES5中实现装饰器模式时做的事情一模一样，所以说装饰器就是这么回事儿，换汤不换药~")]),e._v(" "),n("h3",{attrs:{id:"_8-3-生产实践"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_8-3-生产实践","aria-hidden":"true"}},[e._v("#")]),e._v(" "),n("a",{attrs:{href:"#_8-3-%E7%94%9F%E4%BA%A7%E5%AE%9E%E8%B7%B5"}},[e._v("#")]),e._v(" 8.3 生产实践")]),e._v(" "),n("p",[e._v("装饰器在前端世界的应用十分广泛，即便是在 ES7 未诞生的那些个蛮荒年代，也没能阻挡我们用装饰器开挂的热情。要说优秀的生产实践，可以说是两天两夜也说不完。但有一些实践，我相信大家可能都用过，或者说至少见过、听说过，只是当时并不清楚这个是装饰器模式。此处为了强化大家脑袋里已有的经验与设计模式知识之间的关联，更为了趁热打铁、将装饰器模式常见的用法给大家加固一下，我们一起来看几个不错的生产实践案例：")]),e._v(" "),n("h4",{attrs:{id:"_8-3-1-react中的装饰器：hoc"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_8-3-1-react中的装饰器：hoc","aria-hidden":"true"}},[e._v("#")]),e._v(" "),n("a",{attrs:{href:"#_8-3-1-react%E4%B8%AD%E7%9A%84%E8%A3%85%E9%A5%B0%E5%99%A8%EF%BC%9Ahoc"}},[e._v("#")]),e._v(" 8.3.1 React中的装饰器：HOC")]),e._v(" "),n("blockquote",[n("p",[e._v("高阶组件就是一个函数，且该函数接受一个组件作为参数，并返回一个新的组件。")])]),e._v(" "),n("p",[e._v("HOC (Higher Order Component) 即高阶组件。它是装饰器模式在 React 中的实践，同时也是 React 应用中非常重要的一部分。通过编写高阶组件，我们可以充分复用现有逻辑，提高编码效率和代码的健壮性。")]),e._v(" "),n("p",[e._v("我们现在编写一个高阶组件，它的作用是把传入的组件"),n("strong",[e._v("丢进一个有红色边框的容器里")]),e._v("（拓展其样式）。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("import React, { Component } from 'react'\n\nconst BorderHoc = WrappedComponent => class extends Component {\n  render() {\n    return <div style={{ border: 'solid 1px red' }}>\n      <WrappedComponent />\n    </div>\n  }\n}\nexport default borderHoc\n\n")])])]),n("p",[e._v("用它来装饰目标组件")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("import React, { Component } from 'react'\nimport BorderHoc from './BorderHoc'\n\n// 用BorderHoc装饰目标组件\n@BorderHoc\nclass TargetComponent extends React.Component {\n  render() {\n    // 目标组件具体的业务逻辑\n  }\n}\n\n// export出去的其实是一个被包裹后的组件\nexport default TargetComponent\n\n")])])]),n("p",[e._v("可以看出，高阶组件从实现层面来看其实就是上文我们提到的类装饰器。在高阶组件的辅助下，我们不必因为一个小小的拓展而大费周折地编写新组件或者把一个新逻辑重写 N 多次，只需要轻轻 @ 一下装饰器即可。")]),e._v(" "),n("h4",{attrs:{id:"_8-3-2-使用装饰器改写-redux-connect"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_8-3-2-使用装饰器改写-redux-connect","aria-hidden":"true"}},[e._v("#")]),e._v(" "),n("a",{attrs:{href:"#_8-3-2-%E4%BD%BF%E7%94%A8%E8%A3%85%E9%A5%B0%E5%99%A8%E6%94%B9%E5%86%99-redux-connect"}},[e._v("#")]),e._v(" 8.3.2 使用装饰器改写 Redux connect")]),e._v(" "),n("p",[e._v("Redux 是热门的状态管理工具。在 React 中，当我们想要引入 Redux 时，通常需要调用 connect 方法来把状态和组件绑在一起：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\nimport action from './action.js'\n\nclass App extends Component {\n  render() {\n    // App的业务逻辑\n  }\n}\n\nfunction mapStateToProps(state) {\n  // 假设App的状态对应状态树上的app节点\n  return state.app\n}\n\nfunction mapDispatchToProps(dispatch) {\n  // 这段看不懂也没关系，下面会有解释。重点理解connect的调用即可\n  return bindActionCreators(action, dispatch)\n}\n\n// 把App组件与Redux绑在一起\nexport default connect(mapStateToProps, mapDispatchToProps)(App)\n\n")])])]),n("p",[e._v("这里给没用过 redux 的同学解释一下 connect 的两个入参："),n("code",[e._v("mapStateToProps")]),e._v(" 是一个函数，它可以建立组件和状态之间的映射关系；"),n("code",[e._v("mapDispatchToProps")]),e._v("也是一个函数，它用于建立组件和"),n("code",[e._v("store.dispatch")]),e._v("的关系，使组件具备通过 dispatch 来派发状态的能力。")]),e._v(" "),n("p",[e._v("总而言之，我们调用 connect 可以返回一个"),n("strong",[e._v("具有装饰作用的函数")]),e._v("，这个函数可以接收一 个React 组件作为参数，使这个目标组件和 Redux 结合、具备 Redux 提供的数据和能力。既然有装饰作用，既然是"),n("strong",[e._v("能力的拓展")]),e._v("，那么就一定能用装饰器来改写： 把 connect 抽出来：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("import { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\nimport action from './action.js'\n\nfunction mapStateToProps(state) {\n  return state.app\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return bindActionCreators(action, dispatch)\n}\n\n// 将connect调用后的结果作为一个装饰器导出\nexport default connect(mapStateToProps, mapDispatchToProps)\n\n")])])]),n("p",[e._v("在组件文件里引入connect：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("import React, { Component } from 'react'\nimport connect from './connect.js'\n\n@connect\nexport default class App extends Component {\n  render() {\n    // App的业务逻辑\n  }\n}\n\n")])])]),n("p",[e._v("这样一来，我们的代码结构是不是清晰了很多？可维护性、可读性都上升了一个level，令人赏心悦目~")]),e._v(" "),n("blockquote",[n("p",[e._v("Tips： 回忆一下上面一个小节的讲解，对号入座看一看，connect装饰器从实现和调用方式上来看，是不是同时也是一个高阶组件呢？")])]),e._v(" "),n("h4",{attrs:{id:"_8-3-3-优质的源码阅读材料——core-decorators"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_8-3-3-优质的源码阅读材料——core-decorators","aria-hidden":"true"}},[e._v("#")]),e._v(" "),n("a",{attrs:{href:"#_8-3-3-%E4%BC%98%E8%B4%A8%E7%9A%84%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E6%9D%90%E6%96%99%E2%80%94%E2%80%94core-decorators"}},[e._v("#")]),e._v(" 8.3.3 优质的源码阅读材料——core-decorators")]),e._v(" "),n("p",[e._v("前面都在教大家怎么写装饰器模式，这里来聊聊怎么"),n("strong",[e._v("用好")]),e._v("装饰器模式。")]),e._v(" "),n("p",[e._v("装饰器模式的优势在于其极强的灵活性和可复用性——它本质上是一个函数，而且往往不依赖于任何逻辑而存在。这一点提醒了我们，当我们需要用到某个反复出现的拓展逻辑时，比起自己闷头搞，不如去看一看团队（社区）里有没有现成的实现，如果有，那么贯彻“拿来主义”，直接@就可以了。所以说装饰器模式是个好同志，它可以帮我们省掉大量复制粘贴的时间。")]),e._v(" "),n("p",[e._v("这里就要给大家推荐一个非常赞的装饰模式库 —— "),n("strong",[e._v("core-decorators")]),e._v("。core-decorators 帮我们实现好了一些使用频率较高的装饰器，比如"),n("code",[e._v("@readonly")]),e._v("(使目标属性只读)、"),n("code",[e._v("@deprecate")]),e._v("(在控制台输出警告，提示用户某个指定的方法已被废除)等等等等。这里强烈建议大家把 core-decorators 作为自己的源码阅读材料，你能收获的或许比你想象中更多~")]),e._v(" "),n("h2",{attrs:{id:"_9-结构型：适配器模式——兼容代码就是一把梭"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_9-结构型：适配器模式——兼容代码就是一把梭","aria-hidden":"true"}},[e._v("#")]),e._v(" "),n("a",{attrs:{href:"#_9-%E7%BB%93%E6%9E%84%E5%9E%8B%EF%BC%9A%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94%E5%85%BC%E5%AE%B9%E4%BB%A3%E7%A0%81%E5%B0%B1%E6%98%AF%E4%B8%80%E6%8A%8A%E6%A2%AD"}},[e._v("#")]),e._v(" 9. 结构型：适配器模式——兼容代码就是一把梭")]),e._v(" "),n("p",[e._v("适配器模式通过"),n("strong",[e._v("把一个类的接口变换成客户端所期待的另一种接口")]),e._v("，可以帮我们解决"),n("strong",[e._v("不兼容")]),e._v("的问题。")]),e._v(" "),n("h3",{attrs:{id:"_9-1-生活中的适配器"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_9-1-生活中的适配器","aria-hidden":"true"}},[e._v("#")]),e._v(" "),n("a",{attrs:{href:"#_9-1-%E7%94%9F%E6%B4%BB%E4%B8%AD%E7%9A%84%E9%80%82%E9%85%8D%E5%99%A8"}},[e._v("#")]),e._v(" 9.1 生活中的适配器")]),e._v(" "),n("p",[e._v("前段时间用了很久的 iPhone 6s丢了，请假跑出去买了台 iPhone X。结果有天听歌的时候发现X的耳机孔竟然是方形的，长这样：")]),e._v(" "),n("p",[n("img",{attrs:{src:"http://wsk-mweb.oss-cn-hangzhou.aliyuncs.com/2020/01/26/15800077307943.jpg",alt:"-w702"}})]),e._v(" "),n("p",[e._v("而重度 iPhone 6s 用户&耳机发烧友的耳机线，可能是如图一所示，没错，它们都是圆头耳机，意识到这一点的时候，我佛了。")]),e._v(" "),n("p",[e._v("此时我好像只能在重新买一批耳机（很有可能同款耳机并没有方头的款式）和重新买一台手机之间做选择了。好在我不是一个普通的倒霉蛋，我学过设计模式，设计模式告诉我这种实际接口与目标接口不匹配的尴尬可以用一个叫适配器的东西来化解。打开万能的淘宝一搜，还真有，如图二所示。")]),e._v(" "),n("p",[e._v("只要装上它，圆头耳机就可以完美适配方形插槽，最终效果如图三所示。")]),e._v(" "),n("p",[e._v("大家现在回顾楼上这波操作，这个耳机转换头做的事情，是不是就是我们开头说的把一个"),n("code",[e._v("类")]),e._v("（iPhone 新机型）的"),n("code",[e._v("接口")]),e._v("（方形）变换成"),n("code",[e._v("客户端")]),e._v("（用户）所期待的另一种"),n("code",[e._v("接口")]),e._v("（圆形）？")]),e._v(" "),n("p",[e._v("最终达到的效果，就是"),n("code",[e._v("用户")]),e._v("（我）可以像使用 iPhone 6s 插口一样使用 iPhoneX 的插口，而不用感知两者间的差异。我们设计模式中的适配器，和楼上这个适配器做的事情可以说是一模一样，同样具有化腐朽为神奇的力量。")]),e._v(" "),n("h3",{attrs:{id:"_9-2-兼容接口就是一把梭——适配器的业务场景"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_9-2-兼容接口就是一把梭——适配器的业务场景","aria-hidden":"true"}},[e._v("#")]),e._v(" "),n("a",{attrs:{href:"#_9-2-%E5%85%BC%E5%AE%B9%E6%8E%A5%E5%8F%A3%E5%B0%B1%E6%98%AF%E4%B8%80%E6%8A%8A%E6%A2%AD%E2%80%94%E2%80%94%E9%80%82%E9%85%8D%E5%99%A8%E7%9A%84%E4%B8%9A%E5%8A%A1%E5%9C%BA%E6%99%AF"}},[e._v("#")]),e._v(" 9.2 兼容接口就是一把梭——适配器的业务场景")]),e._v(" "),n("p",[e._v("大家知道我们现在有一个非常好用异步方案叫fetch，它的写法比ajax优雅很多。因此在不考虑兼容性的情况下，我们更愿意使用fetch、而不是使用ajax来发起异步请求。李雷是拜fetch教的忠实信徒，为了能更好地使用fetch，他封装了一个基于fetch的http方法库：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("export default class HttpUtils {\n  // get方法\n  static get(url) {\n    return new Promise((resolve, reject) => {\n      // 调用fetch\n      fetch(url)\n        .then(response => response.json())\n        .then(result => {\n          resolve(result)\n        })\n        .catch(error => {\n          reject(error)\n        })\n    })\n  }\n\n  // post方法，data以object形式传入\n  static post(url, data) {\n    return new Promise((resolve, reject) => {\n      // 调用fetch\n      fetch(url, {\n        method: 'POST',\n        headers: {\n          Accept: 'application/json',\n          'Content-Type': 'application/x-www-form-urlencoded'\n        },\n        // 将object类型的数据格式化为合法的body参数\n        body: this.changeData(data)\n      })\n        .then(response => response.json())\n        .then(result => {\n          resolve(result)\n        })\n        .catch(error => {\n          reject(error)\n        })\n    })\n  }\n\n  // body请求体的格式化方法\n  static changeData(obj) {\n    var prop,\n      str = ''\n    var i = 0\n    for (prop in obj) {\n      if (!prop) {\n        return\n      }\n      if (i == 0) {\n        str += prop + '=' + obj[prop]\n      } else {\n        str += '&' + prop + '=' + obj[prop]\n      }\n      i++\n    }\n    return str\n  }\n}\n\n")])])]),n("p",[e._v("当我想使用 fetch 发起请求时，只需要这样轻松地调用，而不必再操心繁琐的数据配置和数据格式化：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('// 定义目标url地址\nconst URL = "xxxxx"\n// 定义post入参\nconst params = {\n   // ...\n}\n\n// 发起post请求\n const postResponse = await HttpUtils.post(URL,params) || {}\n\n // 发起get请求\n const getResponse = await HttpUtils.get(URL)\n\n')])])]),n("p",[e._v("真是个好用的方法库！老板看了李雷的 HttpUtils 库，喜上眉梢——原来老板也是个拜 fetch 教。老板说李雷，咱们公司以后要做潮流公司了，写代码不再考虑兼容性，我希望你能"),n("strong",[e._v("把公司所有的业务的网络请求都迁移到你这个 HttpUtils 上来")]),e._v("，这样以后你只用维护这一个库了，也方便。李雷一听，悲从中来——他是该公司的第 99 代员工，对远古时期的业务一无所知。而该公司第1代员工封装的网络请求库，是基于 XMLHttpRequest 的，差不多长这样：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("function Ajax(type, url, data, success, failed){\n    // 创建ajax对象\n    var xhr = null;\n    if(window.XMLHttpRequest){\n        xhr = new XMLHttpRequest();\n    } else {\n        xhr = new ActiveXObject('Microsoft.XMLHTTP')\n    }\n\n  // ...(此处省略一系列的业务逻辑细节)\n\n   var type = type.toUpperCase();\n\n    // 识别请求类型\n    if(type == 'GET'){\n        if(data){\n          xhr.open('GET', url + '?' + data, true); //如果有数据就拼接\n        }\n        // 发送get请求\n        xhr.send();\n\n    } else if(type == 'POST'){\n        xhr.open('POST', url, true);\n        // 如果需要像 html 表单那样 POST 数据，使用 setRequestHeader() 来添加 http 头。\n        xhr.setRequestHeader(\"Content-type\", \"application/x-www-form-urlencoded\");\n        // 发送post请求\n        xhr.send(data);\n    }\n\n    // 处理返回数据\n    xhr.onreadystatechange = function(){\n        if(xhr.readyState == 4){\n            if(xhr.status == 200){\n                success(xhr.responseText);\n            } else {\n                if(failed){\n                    failed(xhr.status);\n                }\n            }\n        }\n    }\n}\n\n")])])]),n("p",[e._v("实现逻辑我们简单描述了一下，这个不是重点，重点是它是这样调用的：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// 发送get请求\nAjax('get', url地址, post入参, function(data){\n    // 成功的回调逻辑\n}, function(error){\n    // 失败的回调逻辑\n})\n\n")])])]),n("p",[e._v("李雷佛了 —— 不仅接口名不同，入参方式也不一样，这手动改要改到何年何日呢？")]),e._v(" "),n("p",[e._v("还好李雷学过设计模式，他立刻联想到了专门为我们抹平差异的适配器模式。要把老代码迁移到新接口，不一定要挨个儿去修改每一次的接口调用——正如我们想用 iPhoneX + 旧耳机听歌，不必挨个儿去改造耳机一样，我们只需要在引入接口时进行一次适配，便可轻松地 cover 掉业务里可能会有的多次调用（具体的解析在注释里）：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// Ajax适配器函数，入参与旧接口保持一致\nasync function AjaxAdapter(type, url, data, success, failed) {\n    const type = type.toUpperCase()\n    let result\n    try {\n         // 实际的请求全部由新接口发起\n         if(type === 'GET') {\n            result = await HttpUtils.get(url) || {}\n        } else if(type === 'POST') {\n            result = await HttpUtils.post(url, data) || {}\n        }\n        // 假设请求成功对应的状态码是1\n        result.statusCode === 1 && success ? success(result) : failed(result.statusCode)\n    } catch(error) {\n        // 捕捉网络错误\n        if(failed){\n            failed(error.statusCode);\n        }\n    }\n}\n\n// 用适配器适配旧的Ajax方法\nasync function Ajax(type, url, data, success, failed) {\n    await AjaxAdapter(type, url, data, success, failed)\n}\n\n")])])]),n("p",[e._v("如此一来，我们只需要编写一个适配器函数AjaxAdapter，并用适配器去承接旧接口的参数，就可以实现新旧接口的无缝衔接了~")]),e._v(" "),n("h2",{attrs:{id:"_9-3-生产实践：axios中的适配器"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_9-3-生产实践：axios中的适配器","aria-hidden":"true"}},[e._v("#")]),e._v(" "),n("a",{attrs:{href:"#_9-3-%E7%94%9F%E4%BA%A7%E5%AE%9E%E8%B7%B5%EF%BC%9Aaxios%E4%B8%AD%E7%9A%84%E9%80%82%E9%85%8D%E5%99%A8"}},[e._v("#")]),e._v(" 9.3 生产实践：axios中的适配器")]),e._v(" "),n("p",[e._v("数月之后，李雷的老板发现了网络请求神库axios，于是团队的方案又整个迁移到了axios——对于心中有适配器的李雷来说，这现在已经根本不是个事儿。不过本小节我们要聊的可不再是“如何使现有接口兼容axios”了（这招我们上个小节学过了）。此处引出axios，一是因为大家对它足够熟悉（不熟悉的同学，点这里可以快速熟悉一下~），二是因为axios本身就用到了我们的适配器模式，它的兼容方案值得我们学习和借鉴。")]),e._v(" "),n("p",[e._v("在使用axios时，作为用户我们只需要掌握以下面三个最常用的接口为代表的一套api：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// Make a request for a user with a given ID\naxios.get('/user?ID=12345')\n  .then(function (response) {\n    // handle success\n    console.log(response);\n  })\n  .catch(function (error) {\n    // handle error\n    console.log(error);\n  })\n  .then(function () {\n    // always executed\n  })\n\naxios.post('/user', {\n    firstName: 'Fred',\n    lastName: 'Flintstone'\n  })\n  .then(function (response) {\n    console.log(response);\n  })\n  .catch(function (error) {\n    console.log(error);\n  });\n\naxios({\n  method: 'post',\n  url: '/user/12345',\n  data: {\n    firstName: 'Fred',\n    lastName: 'Flintstone'\n  }\n})\n\n")])])]),n("p",[e._v("便可轻松地发起各种姿势的网络请求，而不用去关心底层的实现细节。 除了简明优雅的api之外，axios 强大的地方还在于，它不仅仅是一个局限于浏览器端的库。在Node环境下，我们尝试调用上面的 api，会发现它照样好使 —— axios 完美地"),n("strong",[e._v("抹平了两种环境下api的调用差异")]),e._v("，靠的正是对适配器模式的灵活运用。")]),e._v(" "),n("p",[e._v("在 axios 的核心逻辑中，我们可以注意到实际上派发请求的是 dispatchRequest 方法。该方法内部其实主要做了两件事：")]),e._v(" "),n("ol",[n("li",[e._v("数据转换，转换请求体/响应体，可以理解为数据层面的适配；")]),e._v(" "),n("li",[e._v("调用适配器。")])]),e._v(" "),n("p",[e._v("调用适配器的逻辑如下：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// 若用户未手动配置适配器，则使用默认的适配器\nvar adapter = config.adapter || defaults.adapter;\n\n  // dispatchRequest方法的末尾调用的是适配器方法\n  return adapter(config).then(function onAdapterResolution(response) {\n    // 请求成功的回调\n    throwIfCancellationRequested(config);\n\n    // 转换响应体\n    response.data = transformData(\n      response.data,\n      response.headers,\n      config.transformResponse\n    );\n\n    return response;\n  }, function onAdapterRejection(reason) {\n    // 请求失败的回调\n    if (!isCancel(reason)) {\n      throwIfCancellationRequested(config);\n\n      // 转换响应体\n      if (reason && reason.response) {\n        reason.response.data = transformData(\n          reason.response.data,\n          reason.response.headers,\n          config.transformResponse\n        );\n      }\n    }\n\n    return Promise.reject(reason);\n  });\n\n")])])]),n("p",[e._v("大家注意注释的第一行，“若用户未手动配置适配器，则使用默认的适配器”。手动配置适配器允许我们自定义处理请求，主要目的是为了使测试更轻松。")]),e._v(" "),n("p",[e._v("实际开发中，我们使用默认适配器的频率更高。默认适配器在"),n("code",[e._v("axios/lib/default.js")]),e._v("里是通过"),n("code",[e._v("getDefaultAdapter")]),e._v("方法来获取的：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("function getDefaultAdapter() {\n  var adapter;\n  // 判断当前是否是node环境\n  if (typeof process !== 'undefined' && Object.prototype.toString.call(process) === '[object process]') {\n    // 如果是node环境，调用node专属的http适配器\n    adapter = require('./adapters/http');\n  } else if (typeof XMLHttpRequest !== 'undefined') {\n    // 如果是浏览器环境，调用基于xhr的适配器\n    adapter = require('./adapters/xhr');\n  }\n  return adapter;\n}\n\n")])])]),n("p",[e._v("我们再来看看 Node 的 http 适配器和 xhr 适配器大概长啥样：")]),e._v(" "),n("blockquote",[n("p",[e._v("http 适配器：")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("module.exports = function httpAdapter(config) {\n  return new Promise(function dispatchHttpRequest(resolvePromise, rejectPromise) {\n    // 具体逻辑\n  }\n}\n\n")])])]),n("blockquote",[n("p",[e._v("xhr 适配器：")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("module.exports = function xhrAdapter(config) {\n  return new Promise(function dispatchXhrRequest(resolve, reject) {\n    // 具体逻辑\n  }\n}\n\n")])])]),n("p",[e._v("具体逻辑啥样，咱们目前先不关心，有兴趣的同学，可以狠狠地点这里阅读源码。咱们现在就注意两个事儿：")]),e._v(" "),n("ul",[n("li",[e._v("两个适配器的入参都是 config；")]),e._v(" "),n("li",[e._v("两个适配器的出参都是一个 Promise。")])]),e._v(" "),n("blockquote",[n("p",[e._v("Tips：要是仔细读了源码，会发现两个适配器中的 Promise 的内部结构也是如出一辙。")])]),e._v(" "),n("p",[e._v("这么一来，通过 axios 发起跨平台的网络请求，不仅调用的接口名是同一个，连入参、出参的格式都只需要掌握同一套。这导致它的学习成本非常低，开发者看了文档就能上手；同时因为足够简单，在使用的过程中也不容易出错，带来了极佳的用户体验，axios 也因此越来越流行。")]),e._v(" "),n("p",[e._v("这正是一个好的适配器的自我修养——把变化留给自己，把统一留给用户。在此处，所有关于 http 模块、关于 xhr 的实现细节，全部被 Adapter 封装进了自己复杂的底层逻辑里，暴露给用户的都是十分简单的统一的东西——统一的接口，统一的入参，统一的出参，统一的规则。用起来就是一个字 —— 爽！")]),e._v(" "),n("h3",{attrs:{id:"_9-4-小结"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_9-4-小结","aria-hidden":"true"}},[e._v("#")]),e._v(" "),n("a",{attrs:{href:"#_9-4-%E5%B0%8F%E7%BB%93"}},[e._v("#")]),e._v(" 9.4 小结")]),e._v(" "),n("p",[e._v("适配器模式的思想可以说是遍地开花，稍微多看几个库，你会发现不仅 axios 在用适配器，其它库也在用。如果哪怕只有一个同学因为今天读了这一节，对这个“看起来很厉害”的 axios 产生了好奇，或者说对读源码这件事情萌生了兴趣、进而刻意地去培养了自己的阅读习惯，那么你在繁忙的工作/学业中抽出的宝贵的用来阅读这一节内容的时间就没有白费，这本小册也算不负使命、远远大于它本身的价值了。")]),e._v(" "),n("h2",{attrs:{id:"_10-结构型：代理模式——一家小型婚介所的发家致富之路"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_10-结构型：代理模式——一家小型婚介所的发家致富之路","aria-hidden":"true"}},[e._v("#")]),e._v(" "),n("a",{attrs:{href:"#_10-%E7%BB%93%E6%9E%84%E5%9E%8B%EF%BC%9A%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94%E4%B8%80%E5%AE%B6%E5%B0%8F%E5%9E%8B%E5%A9%9A%E4%BB%8B%E6%89%80%E7%9A%84%E5%8F%91%E5%AE%B6%E8%87%B4%E5%AF%8C%E4%B9%8B%E8%B7%AF"}},[e._v("#")]),e._v(" 10 结构型：代理模式——一家小型婚介所的发家致富之路")]),e._v(" "),n("p",[e._v("代理模式，式如其名——在某些情况下，出于种种考虑/限制，一个对象"),n("strong",[e._v("不能直接访问")]),e._v("另一个对象，需要一个"),n("strong",[e._v("第三者")]),e._v("（代理）牵线搭桥从而间接达到访问目的，这样的模式就是代理模式。")]),e._v(" "),n("p",[e._v("代理模式非常好理解，因为你可能天天都在用，只是没有刻意挖掘过它背后的玄机——比如大家耳熟能详的"),n("strong",[e._v("科学上网")]),e._v("，就是代理模式的典型案例。")]),e._v(" "),n("h3",{attrs:{id:"_10-1-科学上网背后的故事"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_10-1-科学上网背后的故事","aria-hidden":"true"}},[e._v("#")]),e._v(" "),n("a",{attrs:{href:"#_10-1-%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%E8%83%8C%E5%90%8E%E7%9A%84%E6%95%85%E4%BA%8B"}},[e._v("#")]),e._v(" 10.1 科学上网背后的故事")]),e._v(" "),n("p",[e._v("科学上网，就是咱们常说的 VPN(虚拟专用网络)。大家知道，正常情况下，我们尝试去访问 Google.com，Chrome会给你一个这样的提示： "),n("img",{attrs:{src:"http://wsk-mweb.oss-cn-hangzhou.aliyuncs.com/2020/01/26/15800121288359.jpg",alt:"-w318"}}),e._v(" 这是为啥呢？这就要从网络请求的整个流程说起了。一般情况下，当我们访问一个 url 的时候，会发生下图的过程： "),n("img",{attrs:{src:"http://wsk-mweb.oss-cn-hangzhou.aliyuncs.com/2020/01/26/15800121447958.jpg",alt:"-w639"}}),e._v(" 为了屏蔽某些网站，一股神秘的东方力量会作用于你的 DNS 解析过程，告诉它：“你不能解析出xxx.xxx.xxx.xxx（某个特殊ip）的地址”。而我们的 Google.com，不幸地出现在了这串被诅咒的 ip 地址里，于是你的 DNS 会告诉你：“对不起，我查不到”。")]),e._v(" "),n("p",[e._v("但有时候，一部分人为了搞学习，通过访问VPN，是可以间接访问到 Google.com 的。这背后，就是"),n("strong",[e._v("代理模式")]),e._v("在给力。在使用VPN时，我们的访问过程是这样的：")]),e._v(" "),n("p",[n("img",{attrs:{src:"http://wsk-mweb.oss-cn-hangzhou.aliyuncs.com/2020/01/26/15800124042734.jpg",alt:"-w649"}})]),e._v(" "),n("p",[e._v("没错，比起常规的访问过程，多出了一个第三方 —— 代理服务器。这个第三方的 ip 地址，不在被禁用的那批 ip 地址之列，我们可以顺利访问到这台服务器。而这台服务器的 DNS 解析过程，没有被施加咒语，所以它是可以顺利访问 Google.com 的。代理服务器在请求到 Google.com 后，将响应体转发给你，使你得以间接地访问到目标网址 —— 像这种第三方代替我们访问目标对象的模式，就是代理模式。")]),e._v(" "),n("h3",{attrs:{id:"_10-2-用代理模式开一家婚姻介绍所吧"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_10-2-用代理模式开一家婚姻介绍所吧","aria-hidden":"true"}},[e._v("#")]),e._v(" "),n("a",{attrs:{href:"#_10-2-%E7%94%A8%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F%E5%BC%80%E4%B8%80%E5%AE%B6%E5%A9%9A%E5%A7%BB%E4%BB%8B%E7%BB%8D%E6%89%80%E5%90%A7"}},[e._v("#")]),e._v(" 10.2 用代理模式开一家婚姻介绍所吧")]),e._v(" "),n("p",[e._v("这样看来，开婚介所确实是个发家致富的好路子。既然暴富的机会就在眼前，那么事不宜迟，我们接下来就一起用 JavaScript 来实现一个小型婚介所。")]),e._v(" "),n("h4",{attrs:{id:"_10-2-1-前置知识：-es6中的proxy"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_10-2-1-前置知识：-es6中的proxy","aria-hidden":"true"}},[e._v("#")]),e._v(" "),n("a",{attrs:{href:"#_10-2-1-%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86%EF%BC%9A-es6%E4%B8%AD%E7%9A%84proxy"}},[e._v("#")]),e._v(" 10.2.1 前置知识： ES6中的Proxy")]),e._v(" "),n("p",[e._v("前置知识： ES6中的Proxy")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const proxy = new Proxy(obj, handler)\n\n")])])]),n("p",[e._v("第一个参数是我们的目标对象，也就是上文中的“未知妹子”。handler 也是一个对象，用来定义代理的行为，相当于上文中的“婚介所”。当我们通过 proxy 去访问目标对象的时候，handler会对我们的行为作一层拦截，我们的每次访问都需要经过 handler 这个第三方。")]),e._v(" "),n("h4",{attrs:{id:"_10-2-2-“婚介所”的实现"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_10-2-2-“婚介所”的实现","aria-hidden":"true"}},[e._v("#")]),e._v(" "),n("a",{attrs:{href:"#_10-2-2-%E2%80%9C%E5%A9%9A%E4%BB%8B%E6%89%80%E2%80%9D%E7%9A%84%E5%AE%9E%E7%8E%B0"}},[e._v("#")]),e._v(" 10.2.2 “婚介所”的实现")]),e._v(" "),n("p",[e._v("未知妹子的个人信息，刚问了下我们已经注册了 VIP 的同事哥，大致如下：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// 未知妹子\nconst girl = {\n  // 姓名\n  name: '小美',\n  // 自我介绍\n  aboutMe: '...'（大家自行脑补吧）\n  // 年龄\n  age: 24,\n  // 职业\n  career: 'teacher',\n  // 假头像\n  fakeAvatar: 'xxxx'(新垣结衣的图片地址）\n  // 真实头像\n  avatar: 'xxxx'(自己的照片地址),\n  // 手机号\n  phone: 123456,\n}\n\n")])])]),n("p",[e._v("婚介所收到了小美的信息，开始营业。大家想，这个姓名、自我介绍、假头像，这些信息大差不差，曝光一下没问题。但是人家妹子的年龄、职业、真实头像、手机号码，是不是属于非常私密的信息了？要想 get 这些信息，平台要考验一下你的诚意了 —— 首先，你是不是已经通过了实名审核？如果通过实名审核，那么你可以查看一些相对私密的信息（年龄、职业）。然后，你是不是 VIP ？只有 VIP 可以查看真实照片和联系方式。满足了这两个判定条件，你才可以顺利访问到别人的全部私人信息，不然，就劝退你提醒你去完成认证和VIP购买再来。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// 普通私密信息\nconst baseInfo = ['age', 'career']\n// 最私密信息\nconst privateInfo = ['avatar', 'phone']\n\n// 用户（同事A）对象实例\nconst user = {\n    // ...(一些必要的个人信息)\n    isValidated: true,\n    isVIP: false,\n}\n\n// 掘金婚介所登场了\nconst JuejinLovers = new Proxy(girl, {\n  get: function(girl, key) {\n      if(baseInfo.indexOf(key)!==-1 && !user.isValidated) {\n          alert('您还没有完成验证哦')\n          return\n      }\n\n      //...(此处省略其它有的没的各种校验逻辑)\n\n      // 此处我们认为只有验证过的用户才可以购买VIP\n      if(user.isValidated && privateInfo.indexOf(key) && !user.isVIP) {\n          alert('只有VIP才可以查看该信息哦')\n          return\n      }\n  }\n})\n\n")])])]),n("p",[e._v("以上主要是 getter 层面的拦截。假设我们还允许会员间互送礼物，每个会员可以告知婚介所自己愿意接受的礼物的价格下限，我们还可以作 setter 层面的拦截。：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// 规定礼物的数据结构由type和value组成\nconst present = {\n    type: '巧克力',\n    value: 60,\n}\n\n// 为用户增开presents字段存储礼物\nconst girl = {\n  // 姓名\n  name: '小美',\n  // 自我介绍\n  aboutMe: '...'（大家自行脑补吧）\n  // 年龄\n  age: 24,\n  // 职业\n  career: 'teacher',\n  // 假头像\n  fakeAvatar: 'xxxx'(新垣结衣的图片地址）\n  // 真实头像\n  avatar: 'xxxx'(自己的照片地址),\n  // 手机号\n  phone: 123456,\n  // 礼物数组\n  presents: [],\n  // 拒收50块以下的礼物\n  bottomValue: 50,\n  // 记录最近一次收到的礼物\n  lastPresent: present,\n}\n\n// 掘金婚介所推出了小礼物功能\nconst JuejinLovers = new Proxy(girl, {\n  get: function(girl, key) {\n    if(baseInfo.indexOf(key)!==-1 && !user.isValidated) {\n        alert('您还没有完成验证哦')\n        return\n    }\n\n    //...(此处省略其它有的没的各种校验逻辑)\n\n    // 此处我们认为只有验证过的用户才可以购买VIP\n    if(user.isValidated && privateInfo.indexOf(key) && !user.isVIP) {\n        alert('只有VIP才可以查看该信息哦')\n        return\n    }\n  }\n\n  set: function(girl, key, val) {\n    // 最近一次送来的礼物会尝试赋值给lastPresent字段\n    if(key === 'lastPresent') {\n      if(val.value < girl.bottomValue) {\n          alert('sorry，您的礼物被拒收了')\n          return\n      }\n\n      // 如果没有拒收，则赋值成功，同时并入presents数组\n      girl[lastPresent] = val\n      girl[presents] = [...presents, val]\n    }\n  }\n})\n\n")])])]),n("p",[e._v("不过如果认为代理模式的本领仅仅是开个婚介所这么简单，那就太小瞧它了。代理模式在前端领域一直是一种应用十分广泛的设计模式")]),e._v(" "),n("h2",{attrs:{id:"_11-结构型：代理模式——应用实践范例解析"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_11-结构型：代理模式——应用实践范例解析","aria-hidden":"true"}},[e._v("#")]),e._v(" "),n("a",{attrs:{href:"#_11-%E7%BB%93%E6%9E%84%E5%9E%8B%EF%BC%9A%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94%E5%BA%94%E7%94%A8%E5%AE%9E%E8%B7%B5%E8%8C%83%E4%BE%8B%E8%A7%A3%E6%9E%90"}},[e._v("#")]),e._v(" 11 结构型：代理模式——应用实践范例解析")]),e._v(" "),n("p",[e._v("本节我们选取业务开发中最常见的四种代理类型：事件代理、虚拟代理、缓存代理和保护代理来进行讲解。")]),e._v(" "),n("p",[e._v("在实际开发中，代理模式和我们下节要讲的“大 Boss ”观察者模式一样，可以玩出花来。但设计模式这玩意儿就是这样，变体再多、玩得再花，它的核心操作都是死的，套路也是死的——正是这种极强的规律性带来了极高的性价比。相信学完这节后，大家对这点会有更深的感触。")]),e._v(" "),n("h3",{attrs:{id:"_11-1-事件代理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_11-1-事件代理","aria-hidden":"true"}},[e._v("#")]),e._v(" "),n("a",{attrs:{href:"#_11-1-%E4%BA%8B%E4%BB%B6%E4%BB%A3%E7%90%86"}},[e._v("#")]),e._v(" 11.1 事件代理")]),e._v(" "),n("p",[e._v("事件代理，可能是代理模式最常见的一种应用方式，也是一道实打实的高频面试题。它的场景是一个父元素下有多个子元素，像这样：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('<!DOCTYPE html>\n<html lang="en">\n<head>\n  <meta charset="UTF-8">\n  <meta name="viewport" content="width=device-width, initial-scale=1.0">\n  <meta http-equiv="X-UA-Compatible" content="ie=edge">\n  <title>事件代理</title>\n</head>\n<body>\n  <div id="father">\n    <a href="#">链接1号</a>\n    <a href="#">链接2号</a>\n    <a href="#">链接3号</a>\n    <a href="#">链接4号</a>\n    <a href="#">链接5号</a>\n    <a href="#">链接6号</a>\n  </div>\n</body>\n</html>\n\n')])])]),n("p",[e._v("我们现在的需求是，希望鼠标点击每个 a 标签，都可以弹出“我是xxx”这样的提示。比如点击第一个 a 标签，弹出“我是链接1号”这样的提示。这意味着我们至少要安装 6 个监听函数给 6 个不同的的元素(一般我们会用循环，代码如下所示），如果我们的 a 标签进一步增多，那么性能的开销会更大。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// 假如不用代理模式，我们将循环安装监听函数\nconst aNodes = document.getElementById('father').getElementsByTagName('a')\n\nconst aLength = aNodes.length\n\nfor(let i=0;i<aLength;i++) {\n    aNodes[i].addEventListener('click', function(e) {\n        e.preventDefault()\n        alert(`我是${aNodes[i].innerText}`)\n    })\n}\n\n")])])]),n("p",[e._v("考虑到事件本身具有“冒泡”的特性，当我们点击 a 元素时，点击事件会“冒泡”到父元素 div 上，从而被监听到。如此一来，点击事件的监听函数只需要在 div 元素上被绑定一次即可，而不需要在子元素上被绑定 N 次——这种做法就是事件代理，它可以很大程度上提高我们代码的性能。")]),e._v(" "),n("p",[n("strong",[e._v("事件代理的实现")])]),e._v(" "),n("p",[e._v("用代理模式实现多个子元素的事件监听，代码会简单很多：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// 获取父元素\nconst father = document.getElementById('father')\n\n// 给父元素安装一次监听函数\nfather.addEventListener('click', function(e) {\n    // 识别是否是目标子元素\n    if(e.target.tagName === 'A') {\n        // 以下是监听函数的函数体\n        e.preventDefault()\n        alert(`我是${e.target.innerText}`)\n    }\n})\n\n")])])]),n("p",[e._v("在这种做法下，我们的点击操作并不会直接触及目标子元素，而是由父元素对事件进行处理和分发、间接地将其作用于子元素，因此这种操作从模式上划分属于代理模式。")]),e._v(" "),n("h3",{attrs:{id:"_11-2-虚拟代理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_11-2-虚拟代理","aria-hidden":"true"}},[e._v("#")]),e._v(" "),n("a",{attrs:{href:"#_11-2-%E8%99%9A%E6%8B%9F%E4%BB%A3%E7%90%86"}},[e._v("#")]),e._v(" 11.2 虚拟代理")]),e._v(" "),n("p",[e._v("我们此处简单地给大家描述一下懒加载是个什么东西：它是针对图片加载时机的优化：在一些图片量比较大的网站，比如电商网站首页，或者团购网站、小游戏首页等。如果我们尝试在用户打开页面的时候，就把所有的图片资源加载完毕，那么很可能会造成白屏、卡顿等现象。")]),e._v(" "),n("p",[e._v("此时我们会采取“先占位、后加载”的方式来展示图片 —— 在元素露出之前，我们给它一个 div 作占位，当它滚动到可视区域内时，再即时地去加载真实的图片资源，这样做既减轻了性能压力、又保住了用户体验。")]),e._v(" "),n("p",[e._v("除了图片懒加载，还有一种操作叫图片预加载。预加载主要是为了避免网络不好、或者图片太大时，页面长时间给用户留白的尴尬。常见的操作是先让这个 img 标签展示一个占位图，然后创建一个 Image 实例，让这个 Image 实例的 src 指向真实的目标图片地址、观察该 Image 实例的加载情况 —— 当其对应的真实图片加载完毕后，即已经有了该图片的缓存内容，再将 DOM 上的 img 元素的 src 指向真实的目标图片地址。此时我们直接去取了目标图片的缓存，所以展示速度会非常快，从占位图到目标图片的时间差会非常小、小到用户注意不到，这样体验就会非常好了。")]),e._v(" "),n("p",[e._v("上面的思路，我们可以不假思索地实现如下")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("class PreLoadImage {\n    // 占位图的url地址\n    static LOADING_URL = 'xxxxxx'\n\n    constructor(imgNode) {\n        // 获取该实例对应的DOM节点\n        this.imgNode = imgNode\n    }\n\n    // 该方法用于设置真实的图片地址\n    setSrc(targetUrl) {\n        // img节点初始化时展示的是一个占位图\n        this.imgNode.src = PreLoadImage.LOADING_URL\n        // 创建一个帮我们加载图片的Image实例\n        const image = new Image()\n        // 监听目标图片加载的情况，完成时再将DOM上的img节点的src属性设置为目标图片的url\n        image.onload = () => {\n            this.imgNode.src = targetUrl\n        }\n        // 设置src属性，Image实例开始加载图片\n        image.src = srcUrl\n    }\n}\n\n")])])]),n("p",[e._v("这个 "),n("code",[e._v("PreLoadImage")]),e._v(" 乍一看没问题，但其实违反了我们设计原则中的"),n("strong",[e._v("单一职责原则")]),e._v("。"),n("code",[e._v("PreLoadImage")]),e._v(" 不仅要负责图片的加载，还要负责 DOM 层面的操作（img 节点的初始化和后续的改变）。这样一来，就出现了两个可能导致这个类发生变化的原因。")]),e._v(" "),n("p",[e._v("好的做法是将两个逻辑分离，让 PreLoadImage 专心去做 DOM 层面的事情（真实 DOM 节点的获取、img 节点的链接设置），再找一个对象来专门来帮我们搞加载——这两个对象之间缺个媒婆，这媒婆非代理器不可：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("class PreLoadImage {\n    constructor(imgNode) {\n        // 获取真实的DOM节点\n        this.imgNode = imgNode\n    }\n\n    // 操作img节点的src属性\n    setSrc(imgUrl) {\n        this.imgNode.src = imgUrl\n    }\n}\n\nclass ProxyImage {\n    // 占位图的url地址\n    static LOADING_URL = 'xxxxxx'\n\n    constructor(targetImage) {\n        // 目标Image，即PreLoadImage实例\n        this.targetImage = targetImage\n    }\n\n    // 该方法主要操作虚拟Image，完成加载\n    setSrc(targetUrl) {\n       // 真实img节点初始化时展示的是一个占位图\n        this.targetImage.setSrc(ProxyImage.LOADING_URL)\n        // 创建一个帮我们加载图片的虚拟Image实例\n        const virtualImage = new Image()\n        // 监听目标图片加载的情况，完成时再将DOM上的真实img节点的src属性设置为目标图片的url\n        virtualImage.onload = () => {\n            this.targetImage.setSrc(targetUrl)\n        }\n        // 设置src属性，虚拟Image实例开始加载图片\n        virtualImage.src = targetUrl\n    }\n}\n\n")])])]),n("p",[n("code",[e._v("ProxyImage")]),e._v(" 帮我们调度了预加载相关的工作，我们可以通过 "),n("code",[e._v("ProxyImage")]),e._v(" 这个代理，实现对真实 img 节点的间接访问，并得到我们想要的效果。")]),e._v(" "),n("p",[e._v("在这个实例中，"),n("code",[e._v("virtualImage")]),e._v(" 这个对象是一个“幕后英雄”，它始终存在于 JavaScript 世界中、代替真实 DOM 发起了图片加载请求、完成了图片加载工作，却从未在渲染层面抛头露面。因此这种模式被称为“虚拟代理”模式。")]),e._v(" "),n("h3",{attrs:{id:"_11-3-缓存代理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_11-3-缓存代理","aria-hidden":"true"}},[e._v("#")]),e._v(" "),n("a",{attrs:{href:"#_11-3-%E7%BC%93%E5%AD%98%E4%BB%A3%E7%90%86"}},[e._v("#")]),e._v(" 11.3 缓存代理")]),e._v(" "),n("p",[e._v("缓存代理比较好理解，它应用于一些计算量较大的场景里。在这种场景下，我们需要“用空间换时间”——当我们需要用到某个已经计算过的值的时候，不想再耗时进行二次计算，而是希望能从内存里去取出现成的计算结果。这种场景下，就需要一个代理来帮我们在进行计算的同时，进行计算结果的缓存了。")]),e._v(" "),n("p",[e._v("一个比较典型的例子，是对传入的参数进行求和：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// addAll方法会对你传入的所有参数做求和操作\nconst addAll = function() {\n    console.log('进行了一次新计算')\n    let result = 0\n    const len = arguments.length\n    for(let i = 0; i < len; i++) {\n        result += arguments[i]\n    }\n    return result\n}\n\n// 为求和方法创建代理\nconst proxyAddAll = (function(){\n    // 求和结果的缓存池\n    const resultCache = {}\n    return function() {\n        // 将入参转化为一个唯一的入参字符串\n        const args = Array.prototype.join.call(arguments, ',')\n\n        // 检查本次入参是否有对应的计算结果\n        if(args in resultCache) {\n            // 如果有，则返回缓存池里现成的结果\n            return resultCache[args]\n        }\n        return resultCache[args] = addAll(...arguments)\n    }\n})()\n\n")])])]),n("p",[e._v("我们把这个方法丢进控制台，尝试同一套入参两次，结果喜人： "),n("img",{attrs:{src:"http://wsk-mweb.oss-cn-hangzhou.aliyuncs.com/2020/01/27/15800544626698.jpg",alt:"-w706"}}),e._v(" 我们发现 proxyAddAll 针对重复的入参只会计算一次，这将大大节省计算过程中的时间开销。现在我们有 6 个入参，可能还看不出来，当我们针对大量入参、做反复计算时，缓存代理的优势将得到更充分的凸显。")]),e._v(" "),n("h3",{attrs:{id:"_11-4-保护代理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_11-4-保护代理","aria-hidden":"true"}},[e._v("#")]),e._v(" "),n("a",{attrs:{href:"#_11-4-%E4%BF%9D%E6%8A%A4%E4%BB%A3%E7%90%86"}},[e._v("#")]),e._v(" 11.4 保护代理")]),e._v(" "),n("p",[e._v("保护代理，其实在我们上个小节大家就见识过了。此处我们仅作提点，不作重复演示。")]),e._v(" "),n("p",[e._v("开婚介所的时候，为了保护用户的私人信息，我们会在同事哥访问小美的年龄的时候，去校验同事哥是否已经通过了我们的实名认证；为了确保婚介所的利益同事哥确实是一位有诚意的男士，当他想获取小美的联系方式时，我们会校验他是否具有VIP 资格。所谓“保护代理”，就是在访问层面做文章，在 getter 和 setter 函数里去进行校验和拦截，确保一部分变量是安全的。")]),e._v(" "),n("p",[e._v("值得一提的是，上节中我们提到的 Proxy，它本身就是为拦截而生的，所以我们目前实现保护代理时，考虑的首要方案就是 ES6 中的 Proxy。")]),e._v(" "),n("h2",{attrs:{id:"_12-行为型：策略模式——重构小能手，拆分“胖逻辑”"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_12-行为型：策略模式——重构小能手，拆分“胖逻辑”","aria-hidden":"true"}},[e._v("#")]),e._v(" "),n("a",{attrs:{href:"#_12-%E8%A1%8C%E4%B8%BA%E5%9E%8B%EF%BC%9A%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94%E9%87%8D%E6%9E%84%E5%B0%8F%E8%83%BD%E6%89%8B%EF%BC%8C%E6%8B%86%E5%88%86%E2%80%9C%E8%83%96%E9%80%BB%E8%BE%91%E2%80%9D"}},[e._v("#")]),e._v(" 12. 行为型：策略模式——重构小能手，拆分“胖逻辑”")]),e._v(" "),n("p",[e._v("策略模式和状态模式属于本书”彩蛋“性质的附加小节。这两种模式理解难度都不大，在面试中也几乎没有什么权重，但是却对大家培养良好的编码习惯和重构意识却大有裨益。针对这两种模式，大家了解、会用即可，不建议大家死磕。")]),e._v(" "),n("p",[e._v("策略模式不太适合一上来就怼概念，容易懵。咱们就先从一个非常贴近业务的需求讲起，大家跟我一起敲完这波代码，自然会知道策略模式是怎么回事儿了。")]),e._v(" "),n("h3",{attrs:{id:"_12-1-先来看一个真实场景"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_12-1-先来看一个真实场景","aria-hidden":"true"}},[e._v("#")]),e._v(" "),n("a",{attrs:{href:"#_12-1-%E5%85%88%E6%9D%A5%E7%9C%8B%E4%B8%80%E4%B8%AA%E7%9C%9F%E5%AE%9E%E5%9C%BA%E6%99%AF"}},[e._v("#")]),e._v(" 12.1 先来看一个真实场景")]),e._v(" "),n("p",[e._v("有一天，产品经理韩梅梅找到李雷，给李雷提了这么个需求： 马上大促要来了，我们本次大促要做差异化询价。啥是差异化询价？就是说同一个商品，我通过在后台给它设置不同的价格类型，可以让它展示不同的价格。具体的逻辑如下：")]),e._v(" "),n("ul",[n("li",[e._v("当价格类型为“预售价”时，满 100 - 20，不满 100 打 9 折")]),e._v(" "),n("li",[e._v("当价格类型为“大促价”时，满 100 - 30，不满 100 打 8 折")]),e._v(" "),n("li",[e._v("当价格类型为“返场价”时，满 200 - 50，不叠加")]),e._v(" "),n("li",[e._v("当价格类型为“尝鲜价”时，直接打 5 折")])]),e._v(" "),n("p",[e._v("李雷扫了一眼 prd，立刻来了主意。他首先将四种价格做了标签化：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("预售价 - pre\n大促价 - onSale\n返场价 - back\n尝鲜价 - fresh\n\n")])])]),n("p",[e._v("接下来李雷仔细研读了 prd 的内容，作为资深 if-else 侠，他三下五除二就写出一套功能完备的代码：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// 询价方法，接受价格标签和原价为入参\nfunction askPrice(tag, originPrice) {\n\n  // 处理预热价\n  if(tag === 'pre') {\n    if(originPrice >= 100) {\n      return originPrice - 20\n    }\n    return originPrice * 0.9\n  }\n\n  // 处理大促价\n  if(tag === 'onSale') {\n    if(originPrice >= 100) {\n      return originPrice - 30\n    }\n    return originPrice * 0.8\n  }\n\n  // 处理返场价\n  if(tag === 'back') {\n    if(originPrice >= 200) {\n      return originPrice - 50\n    }\n    return originPrice\n  }\n\n  // 处理尝鲜价\n  if(tag === 'fresh') {\n     return originPrice * 0.5\n  }\n}\n\n")])])]),n("h3",{attrs:{id:"_12-2-if-else-侠，人人喊打"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_12-2-if-else-侠，人人喊打","aria-hidden":"true"}},[e._v("#")]),e._v(" "),n("a",{attrs:{href:"#_12-2-if-else-%E4%BE%A0%EF%BC%8C%E4%BA%BA%E4%BA%BA%E5%96%8A%E6%89%93"}},[e._v("#")]),e._v(" 12.2 if-else 侠，人人喊打")]),e._v(" "),n("p",[e._v("随便跑一下，上述代码运行起来确实没啥毛病。但也只是“运行起来”没毛病而已。作为人人喊打的 if-else 侠，李雷必须为他的行为付出代价。我们一起来看看这么写代码会带来什么后果：")]),e._v(" "),n("ul",[n("li",[e._v("首先，它违背了“单一功能”原则。一个 function 里面，它竟然处理了四坨逻辑——这个函数的逻辑太胖了！这样会带来什么样的糟糕后果，笔者在前面的小节中已经 BB 过很多次了：比如说万一其中一行代码出了 Bug，那么整个询价逻辑都会崩坏；与此同时出了 Bug 你很难定位到底是哪个代码块坏了事；再比如说单个能力很难被抽离复用等等等等。相信跟着我一路学下来的各位，也已经在重重实战中对胖逻辑的恶劣影响有了切身的体会。总之，见到胖逻辑，我们的第一反应，就是一个字——拆！")]),e._v(" "),n("li",[e._v("不仅如此，它还违背了“开放封闭”原则。假如有一天韩梅梅再次找到李雷，要他加一个满 100 - 50 的“新人价”怎么办？他只能继续 if-else：")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("function askPrice(tag, originPrice) {\n\n  // 处理预热价\n  if(tag === 'pre') {\n    if(originPrice >= 100) {\n      return originPrice - 20\n    }\n    return originPrice * 0.9\n  }\n  // 处理大促价\n  if(tag === 'onSale') {\n    if(originPrice >= 100) {\n      return originPrice - 30\n    }\n    return originPrice * 0.8\n  }\n\n  // 处理返场价\n  if(tag === 'back') {\n    if(originPrice >= 200) {\n      return originPrice - 50\n    }\n    return originPrice\n  }\n\n  // 处理尝鲜价\n  if(tag === 'fresh') {\n     return originPrice * 0.5\n  }\n\n  // 处理新人价\n  if(tag === 'newUser') {\n    if(originPrice >= 100) {\n      return originPrice - 50\n    }\n    return originPrice\n  }\n}\n\n")])])]),n("p",[e._v("没错，李雷灰溜溜地跑去改了 askPrice 函数！随后他恬不知耻地徐徐转头，对背后的测试同学说：哥，我改了询价函数，麻烦你帮我把整个询价逻辑回归一下。测试同学莞尔一笑， 心中早已有无数头羊驼在狂奔。他强忍着周末加班的悲痛，做完了这漫长而不必要的回归测试，随后对李雷说：哥，求你学学设计模式吧！！")]),e._v(" "),n("h3",{attrs:{id:"_12-3-重构询价逻辑"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_12-3-重构询价逻辑","aria-hidden":"true"}},[e._v("#")]),e._v(" "),n("a",{attrs:{href:"#_12-3-%E9%87%8D%E6%9E%84%E8%AF%A2%E4%BB%B7%E9%80%BB%E8%BE%91"}},[e._v("#")]),e._v(" 12.3 重构询价逻辑")]),e._v(" "),n("p",[e._v("现在我们基于我们已经学过的设计模式思想，一点一点改造掉这个臃肿的 askPrice。")]),e._v(" "),n("p",[n("strong",[e._v("单一功能改造")])]),e._v(" "),n("p",[e._v("首先，我们赶紧把四种询价逻辑提出来，让它们各自为政：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// 处理预热价\nfunction prePrice(originPrice) {\n  if(originPrice >= 100) {\n    return originPrice - 20\n  }\n  return originPrice * 0.9\n}\n\n// 处理大促价\nfunction onSalePrice(originPrice) {\n  if(originPrice >= 100) {\n    return originPrice - 30\n  }\n  return originPrice * 0.8\n}\n\n// 处理返场价\nfunction backPrice(originPrice) {\n  if(originPrice >= 200) {\n    return originPrice - 50\n  }\n  return originPrice\n}\n\n// 处理尝鲜价\nfunction freshPrice(originPrice) {\n  return originPrice * 0.5\n}\n\nfunction askPrice(tag, originPrice) {\n  // 处理预热价\n  if(tag === 'pre') {\n    return prePrice(originPrice)\n  }\n  // 处理大促价\n  if(tag === 'onSale') {\n    return onSalePrice(originPrice)\n  }\n\n  // 处理返场价\n  if(tag === 'back') {\n    return backPrice(originPrice)\n  }\n\n  // 处理尝鲜价\n  if(tag === 'fresh') {\n     return freshPrice(originPrice)\n  }\n}\n\n")])])]),n("p",[e._v("OK，我们现在至少做到了一个函数只做一件事。现在每个函数都有了自己明确的、单一的分工：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("prePrice - 处理预热价\nonSalePrice - 处理大促价\nbackPrice - 处理返场价\nfreshPrice - 处理尝鲜价\naskPrice - 分发询价逻辑\n\n")])])]),n("p",[e._v("如此一来，我们在遇到 Bug 时，就可以做到“头痛医头，脚痛医脚”，而不必在庞大的逻辑海洋里费力去定位到底是哪块不对。")]),e._v(" "),n("p",[e._v("同时，如果我在另一个函数里也想使用某个询价能力，比如说我想询预热价，那我直接把 prePrice 这个函数拿去调用就是了，而不必在 askPrice 肥胖的身躯里苦苦寻觅、然后掏出这块逻辑、最后再复制粘贴到另一个函数去——更何况万一哪天 askPrice 里的预热价逻辑改了，你还得再复制粘贴一次，扎心啊老铁！")]),e._v(" "),n("p",[e._v("到这里，在单一功能原则的指引下，我们已经解决了一半的问题。")]),e._v(" "),n("p",[e._v("我们现在来捋一下，其实这个询价逻辑整体上来看只有两个关键动作：")]),e._v(" "),n("blockquote",[n("p",[e._v("询价逻辑的分发 ——> 询价逻辑的执行")])]),e._v(" "),n("p",[e._v("在改造的第一步，我们已经把“询价逻辑的执行”给摘了出去，并且实现了不同询价逻辑之间的解耦。接下来，我们就要拿“分发”这个动作开刀。")]),e._v(" "),n("p",[n("strong",[e._v("开放封闭改造")])]),e._v(" "),n("p",[e._v("剩下一半的问题是啥呢？就是咱们上面说的那个新人价的问题——这会儿我要想给 askPrice 增加新人询价逻辑，我该咋整？我只能这么来：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// 处理预热价\nfunction prePrice(originPrice) {\n  if(originPrice >= 100) {\n    return originPrice - 20\n  }\n  return originPrice * 0.9\n}\n\n// 处理大促价\nfunction onSalePrice(originPrice) {\n  if(originPrice >= 100) {\n    return originPrice - 30\n  }\n  return originPrice * 0.8\n}\n\n// 处理返场价\nfunction backPrice(originPrice) {\n  if(originPrice >= 200) {\n    return originPrice - 50\n  }\n  return originPrice\n}\n\n// 处理尝鲜价\nfunction freshPrice(originPrice) {\n  return originPrice * 0.5\n}\n\n// 处理新人价\nfunction newUserPrice(originPrice) {\n  if(originPrice >= 100) {\n    return originPrice - 50\n  }\n  return originPrice\n}\n\nfunction askPrice(tag, originPrice) {\n  // 处理预热价\n  if(tag === 'pre') {\n    return prePrice(originPrice)\n  }\n  // 处理大促价\n  if(tag === 'onSale') {\n    return onSalePrice(originPrice)\n  }\n\n  // 处理返场价\n  if(tag === 'back') {\n    return backPrice(originPrice)\n  }\n\n  // 处理尝鲜价\n  if(tag === 'fresh') {\n     return freshPrice(originPrice)\n  }\n\n  // 处理新人价\n  if(tag === 'newUser') {\n     return newUserPrice(originPrice)\n  }\n}\n\n")])])]),n("p",[e._v("在外层，我们编写一个 newUser 函数用于处理新人价逻辑；在 askPrice 里面，我们新增了一个 if-else 判断。可以看出，这样其实还是在修改 askPrice 的函数体，没有实现“对扩展开放，对修改封闭”的效果。")]),e._v(" "),n("p",[e._v("那么我们应该怎么做？我们仔细想想，楼上用了这么多 if-else，我们的目的到底是什么？是不是就是为了把 询价标签-询价函数 这个映射关系给明确下来？那么在 JS 中，有没有什么既能够既帮我们明确映射关系，同时不破坏代码的灵活性的方法呢？答案就是"),n("strong",[e._v("对象映射")]),e._v("！")]),e._v(" "),n("p",[e._v("咱们完全可以把询价算法全都收敛到一个对象里去嘛：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// 定义一个询价处理器对象\nconst priceProcessor = {\n  pre(originPrice) {\n    if (originPrice >= 100) {\n      return originPrice - 20;\n    }\n    return originPrice * 0.9;\n  },\n  onSale(originPrice) {\n    if (originPrice >= 100) {\n      return originPrice - 30;\n    }\n    return originPrice * 0.8;\n  },\n  back(originPrice) {\n    if (originPrice >= 200) {\n      return originPrice - 50;\n    }\n    return originPrice;\n  },\n  fresh(originPrice) {\n    return originPrice * 0.5;\n  },\n};\n\n")])])]),n("p",[e._v("当我们想使用其中某个询价算法的时候：通过标签名去定位就好了：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// 询价函数\nfunction askPrice(tag, originPrice) {\n  return priceProcessor[tag](originPrice)\n}\n\n")])])]),n("p",[e._v("如此一来，askPrice 函数里的 if-else 大军彻底被咱们消灭了。这时候如果你需要一个新人价，只需要给 priceProcessor 新增一个映射关系：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("priceProcessor.newUser = function (originPrice) {\n  if (originPrice >= 100) {\n    return originPrice - 50;\n  }\n  return originPrice;\n}\n\n")])])]),n("p",[e._v("这样一来，询价逻辑的分发也变成了一个清清爽爽的过程。当李雷以这种方式新增一个新人价的询价逻辑的时候，就可以底气十足地对测试同学说：老哥，我改了询价逻辑，但是改动范围仅仅涉及到新人价，是一个单纯的功能增加。所以你只测这个新功能点就 OK，老逻辑不用管！")]),e._v(" "),n("p",[e._v("从此，李雷就从人人喊打的 if-else 侠，摇身一变成为了测试之友、中国好开发。业务代码里的询价逻辑，也因为李雷坚守设计原则100年不动摇，而变得易读、易维护。")]),e._v(" "),n("h3",{attrs:{id:"_12-4-这，就是策略模式！"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_12-4-这，就是策略模式！","aria-hidden":"true"}},[e._v("#")]),e._v(" "),n("a",{attrs:{href:"#_12-4-%E8%BF%99%EF%BC%8C%E5%B0%B1%E6%98%AF%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F%EF%BC%81"}},[e._v("#")]),e._v(" 12.4 这，就是策略模式！")]),e._v(" "),n("p",[e._v("说起来你可能不相信，咱们上面的整个重构的过程，就是对策略模式的应用。 现在大家来品品策略模式的定义：")]),e._v(" "),n("blockquote",[n("p",[e._v("定义一系列的算法,把它们一个个封装起来, 并且使它们可相互替换。")])]),e._v(" "),n("p",[e._v("回头看看，咱们忙活到现在，是不是就干了这事儿？")]),e._v(" "),n("p",[e._v("但你要直接读这句话，可能确实会懵圈——啥是算法？如何封装？可替换又是咋做到的？")]),e._v(" "),n("p",[e._v("如今你你已经自己动手实现了算法提取、算法封装、分发优化的整个一条龙的操作流，相信面对这条定义，你可以会心一笑——算法，就是我们这个场景中的询价逻辑，它也可以是你任何一个功能函数的逻辑；“封装”就是把某一功能点对应的逻辑给提出来；“可替换”建立在封装的基础上，只是说这个“替换”的判断过程，咱们不能直接怼 if-else，而要考虑更优的映射方案。")]),e._v(" "),n("h2",{attrs:{id:"_13-状态模式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_13-状态模式","aria-hidden":"true"}},[e._v("#")]),e._v(" "),n("a",{attrs:{href:"#_13-%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F"}},[e._v("#")]),e._v(" 13. 状态模式")]),e._v(" "),n("p",[e._v("状态模式和策略模式宛如一对孪生兄弟——它们长得很像、解决的问题也可以说没啥本质上的差别。虽然现在的你可能和本书的主人公李雷一样，对状态模式怀揣着一种“我没见过你所以我觉得你一定很牛x”的敬畏之心。不过没关系，随着我们本节学习过程的展开，你会慢慢体会到状态模式带来的快乐~")]),e._v(" "),n("h3",{attrs:{id:"_13-1-一杯咖啡带来的思考"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_13-1-一杯咖啡带来的思考","aria-hidden":"true"}},[e._v("#")]),e._v(" "),n("a",{attrs:{href:"#_13-1-%E4%B8%80%E6%9D%AF%E5%92%96%E5%95%A1%E5%B8%A6%E6%9D%A5%E7%9A%84%E6%80%9D%E8%80%83"}},[e._v("#")]),e._v(" 13.1 一杯咖啡带来的思考")]),e._v(" "),n("h3",{attrs:{id:"_13-2-一台咖啡机的诞生"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_13-2-一台咖啡机的诞生","aria-hidden":"true"}},[e._v("#")]),e._v(" "),n("a",{attrs:{href:"#_13-2-%E4%B8%80%E5%8F%B0%E5%92%96%E5%95%A1%E6%9C%BA%E7%9A%84%E8%AF%9E%E7%94%9F"}},[e._v("#")]),e._v(" 13.2 一台咖啡机的诞生")]),e._v(" "),n("p",[e._v("作为一个具备强大抽象思维能力的程序员，李雷没有辜负自己这么多年来学过的现代前端框架。他敏锐地感知到，韩梅梅所说的这些不同的”选择“间的切换，本质就是状态的切换。在这个能做四种咖啡的咖啡机体内，蕴含着四种状态：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("- 美式咖啡态（american)：只吐黑咖啡\n- 普通拿铁态(latte)：黑咖啡加点奶\n- 香草拿铁态（vanillaLatte）：黑咖啡加点奶再加香草糖浆\n- 摩卡咖啡态(mocha)：黑咖啡加点奶再加点巧克力\n\n")])])]),n("p",[e._v("嘿嘿，这么一梳理，李雷的思路一下子清晰了起来。作为死性不改的 if-else 侠，他再次三下五除二写出了一套功能完备的代码：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("class CoffeeMaker {\n  constructor() {\n    /**\n    这里略去咖啡机中与咖啡状态切换无关的一些初始化逻辑\n  **/\n    // 初始化状态，没有切换任何咖啡模式\n    this.state = 'init';\n  }\n\n  // 关注咖啡机状态切换函数\n  changeState(state) {\n    // 记录当前状态\n    this.state = state;\n    if(state === 'american') {\n      // 这里用 console 代指咖啡制作流程的业务逻辑\n      console.log('我只吐黑咖啡');\n    } else if(state === 'latte') {\n      console.log(`给黑咖啡加点奶`);\n    } else if(state === 'vanillaLatte') {\n      console.log('黑咖啡加点奶再加香草糖浆');\n    } else if(state === 'mocha') {\n      console.log('黑咖啡加点奶再加点巧克力');\n    }\n  }\n}\n\n")])])]),n("p",[e._v("测试一下，完美无缺：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const mk = new CoffeeMaker();\nmk.changeState('latte'); // 输出 '给黑咖啡加点奶'\n\n")])])]),n("h3",{attrs:{id:"_13-3-不，我李雷必不可能再做-if-else-侠"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_13-3-不，我李雷必不可能再做-if-else-侠","aria-hidden":"true"}},[e._v("#")]),e._v(" "),n("a",{attrs:{href:"#_13-3-%E4%B8%8D%EF%BC%8C%E6%88%91%E6%9D%8E%E9%9B%B7%E5%BF%85%E4%B8%8D%E5%8F%AF%E8%83%BD%E5%86%8D%E5%81%9A-if-else-%E4%BE%A0"}},[e._v("#")]),e._v(" 13.3 不，我李雷必不可能再做 if-else 侠")]),e._v(" "),n("p",[e._v("鉴于 if-else 使不得，李雷赶紧翻出了他在策略模式中学到的“单一职责”和“开放封闭”原则，比猫画虎地改造起了自己的咖啡机：")]),e._v(" "),n("h3",{attrs:{id:"_13-4-改造咖啡机的状态切换机制"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_13-4-改造咖啡机的状态切换机制","aria-hidden":"true"}},[e._v("#")]),e._v(" "),n("a",{attrs:{href:"#_13-4-%E6%94%B9%E9%80%A0%E5%92%96%E5%95%A1%E6%9C%BA%E7%9A%84%E7%8A%B6%E6%80%81%E5%88%87%E6%8D%A2%E6%9C%BA%E5%88%B6"}},[e._v("#")]),e._v(" 13.4 改造咖啡机的状态切换机制")]),e._v(" "),n("p",[n("strong",[e._v("职责分离")])]),e._v(" "),n("p",[e._v("首先，映入李雷眼帘最大的问题，就是咖啡制作过程不可复用：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("changeState(state) {\n    // 记录当前状态\n    this.state = state;\n    if(state === 'american') {\n      // 这里用 console 代指咖啡制作流程的业务逻辑\n      console.log('我只吐黑咖啡');\n    } else if(state === 'latte') {\n      console.log(`给黑咖啡加点奶`);\n    } else if(state === 'vanillaLatte') {\n      console.log('黑咖啡加点奶再加香草糖浆');\n    } else if(state === 'mocha') {\n      console.log('黑咖啡加点奶再加点巧克力');\n    }\n}\n\n")])])]),n("p",[e._v("李雷发现，这个 changeState 函数，它好好管好自己的事（状态切换）不行吗？怎么连做咖啡的过程也写在这里面？这不合理。")]),e._v(" "),n("p",[e._v("别的不说，就说咱李雷和韩梅梅都欲罢不能的香草拿铁吧：它是啥高深莫测的新品种么？它不是，它就是拿铁加点糖浆。那我至于把做拿铁的逻辑再在香草拿铁里写一遍么——完全不需要！直接调用拿铁制作工序对应的函数，然后末尾补个加糖浆的动作就行了——可惜，我们现在所有的制作工序都没有提出来函数化，而是以一种极不优雅的姿势挤在了 changeState 里面，谁也别想复用谁。太费劲了，咱们赶紧给它搞一搞职责分离：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("class CoffeeMaker {\n  constructor() {\n    /**\n    这里略去咖啡机中与咖啡状态切换无关的一些初始化逻辑\n  **/\n    // 初始化状态，没有切换任何咖啡模式\n    this.state = 'init';\n  }\n  changeState(state) {\n    // 记录当前状态\n    this.state = state;\n    if(state === 'american') {\n      // 这里用 console 代指咖啡制作流程的业务逻辑\n      this.americanProcess();\n    } else if(state === 'latte') {\n      this.latteProcress();\n    } else if(state === 'vanillaLatte') {\n      this.vanillaLatteProcress();\n    } else if(state === 'mocha') {\n      this.mochaProcress();\n    }\n  }\n\n  americanProcess() {\n    console.log('我只吐黑咖啡');\n  }\n\n  latteProcress() {\n    this.americanProcess();\n    console.log('加点奶');\n  }\n\n  vanillaLatteProcress() {\n    this.latteProcress();\n    console.log('再加香草糖浆');\n  }\n\n  mochaProcress() {\n    this.latteProcress();\n    console.log('再加巧克力');\n  }\n}\n\nconst mk = new CoffeeMaker();\nmk.changeState('latte');\n\n")])])]),n("p",[e._v("输出结果符合预期：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("我只吐黑咖啡\n加点奶\n\n")])])]),n("p",[n("strong",[e._v("开放封闭")])]),e._v(" "),n("p",[e._v("复用的问题解决了，if-else 却仍然活得好好的。")]),e._v(" "),n("p",[e._v("现在咱们假如要增加”气泡美式“这个咖啡品种，就不得不去修改 changeState 的函数逻辑，这违反了开放封闭的原则。")]),e._v(" "),n("p",[e._v("同时，一个函数里收敛这么多判断，也着实不够体面。咱们现在要像策略模式一样，想办法把咖啡机状态和咖啡制作工序之间的映射关系（也就是咱们上节谈到的分发过程）用一个更优雅地方式做掉。如果你策略模式掌握得足够好，你会第一时间反映出对象映射的方案：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const stateToProcessor = {\n  american() {\n    console.log('我只吐黑咖啡');\n  },\n  latte() {\n    this.american();\n    console.log('加点奶');\n  },\n  vanillaLatte() {\n    this.latte();\n    console.log('再加香草糖浆');\n  },\n  mocha() {\n    this.latte();\n    console.log('再加巧克力');\n  }\n}\n\nclass CoffeeMaker {\n  constructor() {\n    /**\n    这里略去咖啡机中与咖啡状态切换无关的一些初始化逻辑\n  **/\n    // 初始化状态，没有切换任何咖啡模式\n    this.state = 'init';\n  }\n\n  // 关注咖啡机状态切换函数\n  changeState(state) {\n    // 记录当前状态\n    this.state = state;\n    // 若状态不存在，则返回\n    if(!stateToProcessor[state]) {\n      return ;\n    }\n    stateToProcessor[state]();\n  }\n}\n\nconst mk = new CoffeeMaker();\nmk.changeState('latte');\n\n")])])]),n("p",[e._v("输出结果符合预期：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("我只吐黑咖啡\n加点奶\n\n")])])]),n("p",[e._v("当我们这么做时，其实已经实现了一个 js 版本的状态模式。")]),e._v(" "),n("p",[e._v("但这里有一点大家需要引起注意：这种方法仅仅是看上去完美无缺，其中却暗含一个非常重要的隐患——stateToProcessor 里的工序函数，感知不到咖啡机的内部状况。")]),e._v(" "),n("p",[n("strong",[e._v("策略与状态的辨析")])]),e._v(" "),n("p",[e._v("怎么理解这个问题？大家知道，策略模式是对算法的封装。算法和状态对应的行为函数虽然本质上都是行为，但是算法的独立性可高多了。")]),e._v(" "),n("p",[e._v("比如说我一个询价算法，我只需要读取一个数字，我就能啪啪三下五除二给你吐出另一个数字作为返回结果——它和计算主体之间可以是分离的，我们只要关注计算逻辑本身就可以了。")]),e._v(" "),n("p",[e._v("但状态可不一样了。拿咱们咖啡机来说，为了好懂，咱写代码的时候把真正咖啡的制作工序用 console 来表示了。但大家都知道，做咖啡要考虑的东西可太多了。 比如咱们做拿铁，拿铁里的牛奶从哪来，是不是从咖啡机的某个储物空间里去取？再比如我们行为函数是不是应该时刻感知咖啡机每种原材料的用量、进而判断自己的工序还能不能如期执行下去？这就决定了行为函数必须能很方便地拿到咖啡机这个主体的各种信息——它必须得对主体有感知才行。")]),e._v(" "),n("p",[e._v("策略模式和状态模式确实是相似的，它们都封装行为、都通过委托来实现行为分发。")]),e._v(" "),n("p",[e._v("但策略模式中的行为函数是”潇洒“的行为函数，它们不依赖调用主体、互相平行、各自为政，井水不犯河水。而状态模式中的行为函数，首先是和状态主体之间存在着关联，由状态主体把它们串在一起；另一方面，正因为关联着同样的一个（或一类）主体，所以不同状态对应的行为函数可能并不会特别割裂。")]),e._v(" "),n("p",[n("strong",[e._v("进一步改造")])]),e._v(" "),n("p",[e._v("按照我们这一通描述，当务之急是要把咖啡机和它的状态处理函数建立关联。")]),e._v(" "),n("p",[e._v("如果你读过一些早期的设计模式教学资料，有一种思路是将每一个状态所对应的的一些行为抽象成类，然后通过传递 this 的方式来关联状态和状态主体。 这种思路也可以，不过它一般还需要你实现抽象工厂，比较麻烦。实际业务中这种做法极为少见。我这里要给大家介绍的是一种更方便也更常用的解决方案——非常简单，把状态-行为映射对象作为主体类对应实例的一个属性添加进去就行了：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("class CoffeeMaker {\n  constructor() {\n    /**\n    这里略去咖啡机中与咖啡状态切换无关的一些初始化逻辑\n  **/\n    // 初始化状态，没有切换任何咖啡模式\n    this.state = 'init';\n    // 初始化牛奶的存储量\n    this.leftMilk = '500ml';\n  }\n  stateToProcessor = {\n    that: this,\n    american() {\n      // 尝试在行为函数里拿到咖啡机实例的信息并输出\n      console.log('咖啡机现在的牛奶存储量是:', this.that.leftMilk)\n      console.log('我只吐黑咖啡');\n    },\n    latte() {\n      this.american()\n      console.log('加点奶');\n    },\n    vanillaLatte() {\n      this.latte();\n      console.log('再加香草糖浆');\n    },\n    mocha() {\n      this.latte();\n      console.log('再加巧克力');\n    }\n  }\n\n  // 关注咖啡机状态切换函数\n  changeState(state) {\n    this.state = state;\n    if (!this.stateToProcessor[state]) {\n      return;\n    }\n    this.stateToProcessor[state]();\n  }\n}\n\nconst mk = new CoffeeMaker();\nmk.changeState('latte');\n\n")])])]),n("p",[e._v("输出结果为：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("咖啡机现在的牛奶存储量是: 500ml\n我只吐黑咖啡\n加点奶\n\n")])])]),n("p",[e._v("如此一来，我们就可以在 stateToProcessor 轻松拿到咖啡机的实例对象，进而感知咖啡机这个主体了。")]),e._v(" "),n("h3",{attrs:{id:"_13-5-状态模式复盘"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_13-5-状态模式复盘","aria-hidden":"true"}},[e._v("#")]),e._v(" "),n("a",{attrs:{href:"#_13-5-%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F%E5%A4%8D%E7%9B%98"}},[e._v("#")]),e._v(" 13.5 状态模式复盘")]),e._v(" "),n("p",[e._v("和策略模式一样，咱们仍然是敲完代码之后，一起来复盘一下状态模式的定义：")]),e._v(" "),n("blockquote",[n("p",[e._v("状态模式(State Pattern) ：允许一个对象在其内部状态改变时改变它的行为，对象看起来似乎修改了它的类。")])]),e._v(" "),n("p",[e._v("这个定义比较粗糙，可能你读完仍然 get 不到它想让你干啥。这时候，我们就应该把目光转移到它解决的问题上来：")]),e._v(" "),n("blockquote",[n("p",[e._v("状态模式主要解决的是当控制一个对象状态的条件表达式过于复杂时的情况。把状态的判断逻辑转移到表示不同状态的一系列类中，可以把复杂的判断逻辑简化。")])]),e._v(" "),n("p",[e._v("仔细回忆一下我们这节做的事情，也确实就是这么回事儿。")]),e._v(" "),n("p",[e._v("唯一的区别在于，定义里强调了”类“的概念。但我们的示例中，包括大家今后的实践中，一个对象的状态如果复杂到了你不得不给它的每 N 种状态划分为一类、一口气划分很多类这种程度，我更倾向于你去反思一个这个对象是不是做太多事情了。事实上，在大多数场景下，我们的行为划分，都是可以像本节一样，控制在”函数“这个粒度的。")]),e._v(" "),n("h2",{attrs:{id:"_14-行为型：观察者模式——鬼故事：产品经理拉了一个钉钉群"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_14-行为型：观察者模式——鬼故事：产品经理拉了一个钉钉群","aria-hidden":"true"}},[e._v("#")]),e._v(" "),n("a",{attrs:{href:"#_14-%E8%A1%8C%E4%B8%BA%E5%9E%8B%EF%BC%9A%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94%E9%AC%BC%E6%95%85%E4%BA%8B%EF%BC%9A%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86%E6%8B%89%E4%BA%86%E4%B8%80%E4%B8%AA%E9%92%89%E9%92%89%E7%BE%A4"}},[e._v("#")]),e._v(" 14 行为型：观察者模式——鬼故事：产品经理拉了一个钉钉群")]),e._v(" "),n("blockquote",[n("p",[e._v("观察者模式定义了一种一对多的依赖关系，让多个观察者对象同时监听某一个目标对象，当这个目标对象的状态发生变化时，会通知所有观察者对象，使它们能够自动更新。 —— Graphic Design Patterns")])]),e._v(" "),n("p",[e._v("观察者模式，是所有 JavaScript 设计模式中"),n("strong",[e._v("使用频率")]),e._v("最高，"),n("strong",[e._v("面试频率也最高")]),e._v("的设计模式，所以说它"),n("strong",[e._v("十分重要")]),e._v("——如果我是面试官，考虑到面试时间有限、设计模式这块不能多问，我可能在考查你设计模式的时候只会问观察者模式这一个模式。该模式的权重极高，我们此处会花费两个较长的章节把它掰碎嚼烂了来掌握。")]),e._v(" "),n("p",[e._v("重点不一定是难点。观察者模式十分重要，但它并不抽象，理解难度不大。这种模式不仅在业务开发中遍地开花，在日常生活中也是非常常见的。为了帮助大家形成初步的理解，在进入代码世界之前，我们照例来看一段日常：")]),e._v(" "),n("h3",{attrs:{id:"_14-1-生活中的观察者模式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_14-1-生活中的观察者模式","aria-hidden":"true"}},[e._v("#")]),e._v(" "),n("a",{attrs:{href:"#_14-1-%E7%94%9F%E6%B4%BB%E4%B8%AD%E7%9A%84%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F"}},[e._v("#")]),e._v(" 14.1 生活中的观察者模式")]),e._v(" "),n("p",[e._v("周一刚上班，前端开发李雷就被产品经理韩梅梅拉进了一个钉钉群——“员工管理系统需求第99次变更群”。这个群里不仅有李雷，还有后端开发 A，测试同学 B。三位技术同学看到这简单直白的群名便立刻做好了接受变更的准备、打算撸起袖子开始干了。此时韩梅梅却说：“别急，这个需求有问题，我需要和业务方再确认一下，大家先各忙各的吧”。这种情况下三位技术同学不必立刻投入工作，但他们都已经做好了本周需要做一个新需求的准备，时刻等待着产品经理的号召。")]),e._v(" "),n("p",[e._v('一天过去了，两天过去了。周三下午，韩梅梅终于和业务方确认了所有的需求细节，于是在“员工管理系统需求第99次变更群”里大吼一声：“需求文档来了！”，随后甩出了"需求文档.zip"文件，同时@所有人。三位技术同学听到熟悉的“有人@我”提示音，立刻点开群进行群消息和群文件查收，随后根据群消息和群文件提供的需求信息，投入到了各自的开发里。上述这个过程，就是一个典型的观察者模式。')]),e._v(" "),n("p",[n("strong",[e._v("重点角色对号入座")])]),e._v(" "),n("p",[e._v("观察者模式有一个“别名”，叫"),n("code",[e._v("发布 - 订阅模式")]),e._v("（之所以别名加了引号，是因为两者之间存在着细微的差异，下个小节里我们会讲到这点）。这个别名非常形象地诠释了观察者模式里两个核心的角色要素——"),n("code",[e._v("“发布者”")]),e._v("与"),n("code",[e._v("“订阅者”")]),e._v("。")]),e._v(" "),n("p",[e._v("在上述的过程中，需求文档（目标对象）的发布者只有一个——产品经理韩梅梅。而需求信息的接受者却有多个——前端、后端、测试同学，这些同学的共性就是他们需要根据需求信息开展自己后续的工作、因此都非常关心这个需求信息，于是不得不时刻关注着这个群的群消息提醒，他们是实打实的订阅者，即观察者对象。")]),e._v(" "),n("p",[e._v("现在我们再回过头来看一遍开头我们提到的略显抽象的定义：")]),e._v(" "),n("blockquote",[n("p",[e._v("观察者模式定义了一种一对多的依赖关系，让多个观察者对象同时监听某一个目标对象，当这个目标对象的状态发生变化时，会通知所有观察者对象，使它们能够自动更新。")])]),e._v(" "),n("p",[e._v("在我们上文这个钉钉群里，一个需求信息对象对应了多个观察者（技术同学），当需求信息对象的状态发生变化（从无到有）时，产品经理通知了群里的所有同学，以便这些同学接收信息进而开展工作：角色划分 --\x3e 状态变化 --\x3e 发布者通知到订阅者，这就是观察者模式的“套路”。")]),e._v(" "),n("h3",{attrs:{id:"_14-2-在实践中理解定义"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_14-2-在实践中理解定义","aria-hidden":"true"}},[e._v("#")]),e._v(" "),n("a",{attrs:{href:"#_14-2-%E5%9C%A8%E5%AE%9E%E8%B7%B5%E4%B8%AD%E7%90%86%E8%A7%A3%E5%AE%9A%E4%B9%89"}},[e._v("#")]),e._v(" 14.2 在实践中理解定义")]),e._v(" "),n("p",[e._v("结合我们上面的分析，现在大家知道，在观察者模式里，至少应该有两个关键角色是一定要出现的——发布者和订阅者。用面向对象的方式表达的话，那就是要有"),n("strong",[e._v("两个类")]),e._v("。")]),e._v(" "),n("p",[e._v("首先我们来看这个代表发布者的类，我们给它起名叫Publisher。这个类应该具备哪些“基本技能”呢？大家回忆一下上文中的韩梅梅，韩梅梅的基本操作是什么？首先是拉群（增加订阅者），然后是@所有人（通知订阅者），这俩是最明显的了。此外作为群主&产品经理，韩梅梅还具有踢走项目组成员（移除订阅者）的能力。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// 定义发布者类\nclass Publisher {\n  constructor() {\n    this.observers = []\n    console.log('Publisher created')\n  }\n  // 增加订阅者\n  add(observer) {\n    console.log('Publisher.add invoked')\n    this.observers.push(observer)\n  }\n  // 移除订阅者\n  remove(observer) {\n    console.log('Publisher.remove invoked')\n    this.observers.forEach((item, i) => {\n      if (item === observer) {\n        this.observers.splice(i, 1)\n      }\n    })\n  }\n  // 通知所有订阅者\n  notify() {\n    console.log('Publisher.notify invoked')\n    this.observers.forEach((observer) => {\n      observer.update(this)\n    })\n  }\n}\n\n")])])]),n("p",[e._v("ok，搞定了发布者，我们一起来想想订阅者能干啥——其实订阅者的能力非常简单，作为被动的一方，它的行为只有两个——被通知、去执行（本质上是接受发布者的调用，这步我们在Publisher中已经做掉了）。既然我们在Publisher中做的是方法调用，那么我们在订阅者类里要做的就是"),n("strong",[e._v("方法的定义")]),e._v("：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// 定义订阅者类\nclass Observer {\n    constructor() {\n        console.log('Observer created')\n    }\n\n    update() {\n        console.log('Observer.update invoked')\n    }\n}\n\n")])])]),n("p",[e._v("以上，我们就完成了最基本的发布者和订阅者类的设计和编写。在实际的业务开发中，我们所有的定制化的发布者/订阅者逻辑都可以基于这两个基本类来改写。比如我们可以通过拓展发布者类，来使所有的订阅者来"),n("strong",[e._v("监听某个特定状态的变化")]),e._v("。仍然以开篇的例子为例，我们让开发者们来监听需求文档（prd）的变化：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// 定义一个具体的需求文档（prd）发布类\nclass PrdPublisher extends Publisher {\n    constructor() {\n        super()\n        // 初始化需求文档\n        this.prdState = null\n        // 韩梅梅还没有拉群，开发群目前为空\n        this.observers = []\n        console.log('PrdPublisher created')\n    }\n\n    // 该方法用于获取当前的prdState\n    getState() {\n        console.log('PrdPublisher.getState invoked')\n        return this.prdState\n    }\n\n    // 该方法用于改变prdState的值\n    setState(state) {\n        console.log('PrdPublisher.setState invoked')\n        // prd的值发生改变\n        this.prdState = state\n        // 需求文档变更，立刻通知所有开发者\n        this.notify()\n    }\n}\n\n")])])]),n("p",[e._v("作为订阅方，开发者的任务也变得具体起来：接收需求文档、并开始干活：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("class DeveloperObserver extends Observer {\n    constructor() {\n        super()\n        // 需求文档一开始还不存在，prd初始为空对象\n        this.prdState = {}\n        console.log('DeveloperObserver created')\n    }\n\n    // 重写一个具体的update方法\n    update(publisher) {\n        console.log('DeveloperObserver.update invoked')\n        // 更新需求文档\n        this.prdState = publisher.getState()\n        // 调用工作函数\n        this.work()\n    }\n\n    // work方法，一个专门搬砖的方法\n    work() {\n        // 获取需求文档\n        const prd = this.prdState\n        // 开始基于需求文档提供的信息搬砖。。。\n        ...\n        console.log('996 begins...')\n    }\n}\n\n")])])]),n("p",[e._v("下面，我们可以 new 一个 PrdPublisher 对象（产品经理），她可以通过调用 setState 方法来更新需求文档。需求文档每次更新，都会紧接着调用 notify 方法来通知所有开发者，这就实现了定义里所谓的：")]),e._v(" "),n("blockquote",[n("p",[e._v("目标对象的状态发生变化时，会通知所有观察者对象，使它们能够自动更新。")])]),e._v(" "),n("p",[e._v("OK，下面我们来看看韩梅梅和她的小伙伴们是如何搞事情的吧：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// 创建订阅者：前端开发李雷\nconst liLei = new DeveloperObserver()\n// 创建订阅者：服务端开发小A（sorry。。。起名字真的太难了）\nconst A = new DeveloperObserver()\n// 创建订阅者：测试同学小B\nconst B = new DeveloperObserver()\n// 韩梅梅出现了\nconst hanMeiMei = new PrdPublisher()\n// 需求文档出现了\nconst prd = {\n    // 具体的需求内容\n    // ...\n}\n// 韩梅梅开始拉群\nhanMeiMei.add(liLei)\nhanMeiMei.add(A)\nhanMeiMei.add(B)\n// 韩梅梅发送了需求文档，并@了所有人\nhanMeiMei.setState(prd)\n\n")])])]),n("h2",{attrs:{id:"_15-行为型：观察者模式——面试真题手把手教学"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_15-行为型：观察者模式——面试真题手把手教学","aria-hidden":"true"}},[e._v("#")]),e._v(" "),n("a",{attrs:{href:"#_15-%E8%A1%8C%E4%B8%BA%E5%9E%8B%EF%BC%9A%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94%E9%9D%A2%E8%AF%95%E7%9C%9F%E9%A2%98%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E5%AD%A6"}},[e._v("#")]),e._v(" 15. 行为型：观察者模式——面试真题手把手教学")]),e._v(" "),n("p",[e._v("观察者模式作为一个超高频考点，在设计模式中具有举足轻重的地位。")]),e._v(" "),n("h3",{attrs:{id:"_15-1-vue数据双向绑定（响应式系统）的实现原理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_15-1-vue数据双向绑定（响应式系统）的实现原理","aria-hidden":"true"}},[e._v("#")]),e._v(" "),n("a",{attrs:{href:"#_15-1-vue%E6%95%B0%E6%8D%AE%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A%EF%BC%88%E5%93%8D%E5%BA%94%E5%BC%8F%E7%B3%BB%E7%BB%9F%EF%BC%89%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86"}},[e._v("#")]),e._v(" 15.1 Vue数据双向绑定（响应式系统）的实现原理")]),e._v(" "),n("p",[n("strong",[e._v("解析")])]),e._v(" "),n("p",[e._v("Vue 框架是热门的渐进式 JavaScript框架。在 Vue 中，当我们修改状态时，视图会随之更新，这就是Vue的数据双向绑定（又称响应式原理）。数据双向绑定是Vue 最独特的特性之一。如果读者没有接触过 Vue，强烈建议阅读Vue官方对响应式原理的介绍。此处我们用官方的一张流程图来简要地说明一下Vue响应式系统的整个流程：")]),e._v(" "),n("p",[n("img",{attrs:{src:"http://wsk-mweb.oss-cn-hangzhou.aliyuncs.com/2020/01/27/15801091700628.jpg",alt:"-w683"}})]),e._v(" "),n("p",[e._v("在 Vue 中，每个组件实例都有相应的 watcher 实例对象，它会在组件渲染的过程中把属性记录为依赖，之后当依赖项的 setter 被调用时，会通知 watcher 重新计算，从而致使它关联的组件得以更新——这是一个典型的观察者模式。这道面试题考察了受试者对Vue底层原理的理解、对观察者模式的实现能力以及一系列重要的JS知识点，具有较强的综合性和代表性。")]),e._v(" "),n("p",[e._v("在Vue数据双向绑定的实现逻辑里，有这样三个关键角色：")]),e._v(" "),n("ul",[n("li",[e._v("observer（监听器）：注意，此 observer 非彼 observer。在我们上节的解析中，observer 作为设计模式中的一个角色，代表“订阅者”。但在Vue数据双向绑定的角色结构里，所谓的 observer 不仅是一个数据监听器，它还需要对监听到的数据进行转发——也就是说它同时还是一个发布者。")]),e._v(" "),n("li",[e._v("watcher（订阅者）：observer 把数据转发给了真正的订阅者——watcher对象。watcher 接收到新的数据后，会去更新视图。")]),e._v(" "),n("li",[e._v("compile（编译器）：MVVM 框架特有的角色，负责对每个节点元素指令进行扫描和解析，指令的数据初始化、订阅者的创建这些“杂活”也归它管~")])]),e._v(" "),n("p",[e._v("这三者的配合过程如图所示：")]),e._v(" "),n("p",[n("img",{attrs:{src:"http://wsk-mweb.oss-cn-hangzhou.aliyuncs.com/2020/01/27/15801093891862.jpg",alt:"-w495"}})]),e._v(" "),n("p",[e._v("OK，实现方案搞清楚了，下面我们给整个流程中涉及到发布-订阅这一模式的代码来个特写：")]),e._v(" "),n("h4",{attrs:{id:"_15-1-1-核心代码"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_15-1-1-核心代码","aria-hidden":"true"}},[e._v("#")]),e._v(" "),n("a",{attrs:{href:"#_15-1-1-%E6%A0%B8%E5%BF%83%E4%BB%A3%E7%A0%81"}},[e._v("#")]),e._v(" 15.1.1 核心代码")]),e._v(" "),n("p",[n("strong",[e._v("实现observer")])]),e._v(" "),n("p",[e._v("首先我们需要实现一个方法，这个方法会对需要监听的数据对象进行遍历、给它的属性加上定制的 getter 和 setter 函数。这样但凡这个对象的某个属性发生了改变，就会触发 setter 函数，进而通知到订阅者。这个 setter 函数，就是我们的监听器：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// observe方法遍历并包装对象属性\nfunction observe(target) {\n    // 若target是一个对象，则遍历它\n    if(target && typeof target === 'object') {\n        Object.keys(target).forEach((key)=> {\n            // defineReactive方法会给目标属性装上“监听器”\n            defineReactive(target, key, target[key])\n        })\n    }\n}\n\n// 定义defineReactive方法\nfunction defineReactive(target, key, val) {\n    // 属性值也可能是object类型，这种情况下需要调用observe进行递归遍历\n    observe(val)\n    // 为当前属性安装监听器\n    Object.defineProperty(target, key, {\n         // 可枚举\n        enumerable: true,\n        // 不可配置\n        configurable: false,\n        get: function () {\n            return val;\n        },\n        // 监听器函数\n        set: function (value) {\n            console.log(`${target}属性的${key}属性从${val}值变成了了${value}`)\n            val = value\n        }\n    });\n}\n\n")])])]),n("p",[e._v("下面实现订阅者 Dep：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// 定义订阅者类Dep\nclass Dep {\n    constructor() {\n        // 初始化订阅队列\n        this.subs = []\n    }\n\n    // 增加订阅者\n    addSub(sub) {\n        this.subs.push(sub)\n    }\n\n    // 通知订阅者（是不是所有的代码都似曾相识？）\n    notify() {\n        this.subs.forEach((sub)=>{\n            sub.update()\n        })\n    }\n}\n\n")])])]),n("p",[e._v("现在我们可以改写 defineReactive 中的 setter 方法，在监听器里去通知订阅者了：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("function defineReactive(target, key, val) {\n    const dep = new Dep()\n    // 监听当前属性\n    observe(val)\n    Object.defineProperty(target, key, {\n        set: (value) => {\n            // 通知所有订阅者\n            dep.notify()\n        }\n    })\n}\n\n")])])]),n("h3",{attrs:{id:"_15-2-实现一个event-bus-event-emitter"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_15-2-实现一个event-bus-event-emitter","aria-hidden":"true"}},[e._v("#")]),e._v(" "),n("a",{attrs:{href:"#_15-2-%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AAevent-bus-event-emitter"}},[e._v("#")]),e._v(" 15.2 实现一个Event Bus/ Event Emitter")]),e._v(" "),n("p",[e._v("Event Bus（Vue、Flutter 等前端框架中有出镜）和 Event Emitter（Node中有出镜）出场的“剧组”不同，但是它们都对应一个共同的角色——"),n("strong",[e._v("全局事件总线")]),e._v("。")]),e._v(" "),n("p",[e._v("全局事件总线，严格来说不能说是观察者模式，而是发布-订阅模式（具体的概念甄别我们会在下个小节着重讲）。它在我们日常的业务开发中应用非常广。")]),e._v(" "),n("p",[n("strong",[e._v("在Vue中使用Event Bus来实现组件间的通讯")])]),e._v(" "),n("p",[e._v("Event Bus/Event Emitter 作为全局事件总线，它起到的是一个沟通桥梁的作用。我们可以把它理解为一个事件中心，我们所有事件的订阅/发布都不能由订阅方和发布方“私下沟通”，必须要委托这个事件中心帮我们实现。")]),e._v(" "),n("p",[e._v("在Vue中，有时候 A 组件和 B 组件中间隔了很远，看似没什么关系，但我们希望它们之间能够通信。这种情况下除了求助于 Vuex 之外，我们还可以通过 Event Bus 来实现我们的需求。")]),e._v(" "),n("p",[e._v("创建一个 Event Bus（本质上也是 Vue 实例）并导出：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const EventBus = new Vue()\nexport default EventBus\n\n")])])]),n("p",[e._v("在主文件里引入EventBus，并挂载到全局：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("import bus from 'EventBus的文件路径'\nVue.prototype.bus = bus\n\n")])])]),n("p",[e._v("订阅事件：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// 这里func指someEvent这个事件的监听函数\nthis.bus.$on('someEvent', func)\n\n")])])]),n("p",[e._v("发布（触发）事件：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// 这里params指someEvent这个事件被触发时回调函数接收的入参\nthis.bus.$emit('someEvent', params)\n\n")])])]),n("p",[e._v("大家会发现，整个调用过程中，没有出现具体的发布者和订阅者（比如上节的PrdPublisher和DeveloperObserver），全程只有bus这个东西一个人在疯狂刷存在感。这就是全局事件总线的特点——所有事件的发布/订阅操作，必须经由事件中心，禁止一切“私下交易”！")]),e._v(" "),n("p",[e._v("下面，我们就一起来实现一个Event Bus（注意看注释里的解析）：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("class EventEmitter {\n  constructor() {\n    // handlers是一个map，用于存储事件与回调之间的对应关系\n    this.handlers = {}\n  }\n\n  // on方法用于安装事件监听器，它接受目标事件名和回调函数作为参数\n  on(eventName, cb) {\n    // 先检查一下目标事件名有没有对应的监听函数队列\n    if (!this.handlers[eventName]) {\n      // 如果没有，那么首先初始化一个监听函数队列\n      this.handlers[eventName] = []\n    }\n\n    // 把回调函数推入目标事件的监听函数队列里去\n    this.handlers[eventName].push(cb)\n  }\n\n  // emit方法用于触发目标事件，它接受事件名和监听函数入参作为参数\n  emit(eventName, ...args) {\n    // 检查目标事件是否有监听函数队列\n    if (this.handlers[eventName]) {\n      // 如果有，则逐个调用队列里的回调函数\n      this.handlers[eventName].forEach((callback) => {\n        callback(...args)\n      })\n    }\n  }\n\n  // 移除某个事件回调队列里的指定回调函数\n  off(eventName, cb) {\n    const callbacks = this.handlers[eventName]\n    const index = callbacks.indexOf(cb)\n    if (index !== -1) {\n      callbacks.splice(index, 1)\n    }\n  }\n\n  // 为事件注册单次监听器\n  once(eventName, cb) {\n    // 对回调函数进行包装，使其执行完毕自动被移除\n    const wrapper = (...args) => {\n      cb.apply(...args)\n      this.off(eventName, wrapper)\n    }\n    this.on(eventName, wrapper)\n  }\n}\n\n")])])]),n("p",[e._v("在日常的开发中，大家用到EventBus/EventEmitter往往提供比这五个方法多的多的多的方法。但在面试过程中，如果大家能够完整地实现出这五个方法，已经非常可以说明问题了，因此楼上这个EventBus希望大家可以熟练掌握。学有余力的同学，推荐阅读"),n("a",{attrs:{href:"https://github.com/facebook/emitter",target:"_blank",rel:"noopener noreferrer"}},[e._v("FaceBook推出的通用EventEmiiter库的源码"),n("OutboundLink")],1),e._v(" ，相信你会有更多收获。")]),e._v(" "),n("h3",{attrs:{id:"_15-3-观察者模式与发布-订阅模式的区别是什么？"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_15-3-观察者模式与发布-订阅模式的区别是什么？","aria-hidden":"true"}},[e._v("#")]),e._v(" "),n("a",{attrs:{href:"#_15-3-%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F%E4%B8%8E%E5%8F%91%E5%B8%83-%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%8C%BA%E5%88%AB%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F"}},[e._v("#")]),e._v(" 15.3 观察者模式与发布-订阅模式的区别是什么？")]),e._v(" "),n("p",[e._v("在面试过程中，一些对细节比较在意的面试官可能会追问观察者模式与发布-订阅模式的区别。这个问题可能会引发一些同学的不适，因为在大量参考资料以及已出版的纸质书籍中，都会告诉大家“发布-订阅模式和观察者模式是同一个东西的两个名字”。本书在前文的叙述中，也没有突出强调两者的区别。其实这两个模式，要较起真来，确实不能给它们划严格的等号。")]),e._v(" "),n("p",[e._v("为什么大家都喜欢给它们强行划等号呢？这是因为就算划了等号，也不影响我们正常使用，毕竟两者在核心思想、运作机制上没有本质的差别。但考虑到这个问题确实可以成为面试题的一个方向，此处我们还是单独拿出来讲一下。")]),e._v(" "),n("p",[e._v("回到我们上文的例子里。韩梅梅把所有的开发者拉了一个群，直接把需求文档丢给每一位群成员，这种"),n("strong",[e._v("发布者直接触及到订阅者")]),e._v("的操作，叫观察者模式。但如果韩梅梅没有拉群，而是把需求文档上传到了公司统一的需求平台上，需求平台感知到文件的变化、自动通知了每一位订阅了该文件的开发者，这种"),n("strong",[e._v("发布者不直接触及到订阅者、而是由统一的第三方来完成实际的通信的操作，叫做发布-订阅模式")]),e._v("。")]),e._v(" "),n("p",[e._v("相信大家也已经看出来了，观察者模式和发布-订阅模式之间的区别，在于是否存在第三方、发布者能否直接感知订阅者（如图所示）。")]),e._v(" "),n("p",[n("img",{attrs:{src:"http://wsk-mweb.oss-cn-hangzhou.aliyuncs.com/2020/01/27/15801108638995.jpg",alt:"-w316"}})]),e._v(" "),n("p",[e._v("在我们见过的这些例子里，韩梅梅拉钉钉群的操作，就是典型的观察者模式；而通过EventBus去实现事件监听/发布，则属于发布-订阅模式。")]),e._v(" "),n("h2",{attrs:{id:"_16-行为型：迭代器模式——真·遍历专家"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_16-行为型：迭代器模式——真·遍历专家","aria-hidden":"true"}},[e._v("#")]),e._v(" "),n("a",{attrs:{href:"#_16-%E8%A1%8C%E4%B8%BA%E5%9E%8B%EF%BC%9A%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94%E7%9C%9F%C2%B7%E9%81%8D%E5%8E%86%E4%B8%93%E5%AE%B6"}},[e._v("#")]),e._v(" 16. 行为型：迭代器模式——真·遍历专家")]),e._v(" "),n("blockquote",[n("p",[e._v("迭代器模式提供一种方法顺序访问一个聚合对象中的各个元素，而又不暴露该对象的内部表示。 ——《设计模式：可复用面向对象软件的基础》")])]),e._v(" "),n("p",[e._v("迭代器模式是设计模式中少有的目的性极强的模式。所谓“目的性极强”就是说它不操心别的，它就解决这一个问题——遍历。")]),e._v(" "),n("h3",{attrs:{id:"_16-1-“公元前”的迭代器模式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_16-1-“公元前”的迭代器模式","aria-hidden":"true"}},[e._v("#")]),e._v(" "),n("a",{attrs:{href:"#_16-1-%E2%80%9C%E5%85%AC%E5%85%83%E5%89%8D%E2%80%9D%E7%9A%84%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F"}},[e._v("#")]),e._v(" 16.1 “公元前”的迭代器模式")]),e._v(" "),n("p",[e._v("遍历作为一种合理、高频的使用需求，几乎没有语言会要求它的开发者手动去实现。在JS中，本身也内置了一个比较简陋的数组迭代器的实现——Array.prototype.forEach。")]),e._v(" "),n("p",[e._v("通过调用forEach方法，我们可以轻松地遍历一个数组：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const arr = [1, 2, 3]\narr.forEach((item, index)=>{\n    console.log(`索引为${index}的元素是${item}`)\n})\n\n")])])]),n("p",[e._v("但forEach方法并不是万能的，比如下面这种场景：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('<!DOCTYPE html>\n<html lang="en">\n<head>\n  <meta charset="UTF-8">\n  <meta name="viewport" content="width=device-width, initial-scale=1.0">\n  <meta http-equiv="X-UA-Compatible" content="ie=edge">\n  <title>事件代理</title>\n</head>\n<body>\n    <a href="#">链接1号</a>\n    <a href="#">链接2号</a>\n    <a href="#">链接3号</a>\n    <a href="#">链接4号</a>\n    <a href="#">链接5号</a>\n    <a href="#">链接6号</a>\n</body>\n</html>\n\n')])])]),n("p",[e._v("我想拿到所有的a标签，我可以这样做：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const aNodes = document.getElementsByTagName('a')\nconsole.log('aNodes are', aNodes)\n\n")])])]),n("p",[e._v("我想取其中一个a标签，可以这样做：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const aNode = aNodes[i]\n\n")])])]),n("p",[e._v("在这个操作的映衬下，aNodes看上去多么像一个数组啊！但当你尝试用数组的原型方法去遍历它时：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("aNodes.forEach((aNode, index){\n    console.log(aNode, index)\n})\n\n")])])]),n("p",[e._v("你发现报错了： "),n("img",{attrs:{src:"http://wsk-mweb.oss-cn-hangzhou.aliyuncs.com/2020/01/27/15801110928208.jpg",alt:"-w529"}})]),e._v(" "),n("p",[e._v("震惊，原来这个aNodes是个假数组！准确地说，它是一个类数组对象，并没有为你实现好用的forEach方法。也就是说，要想实现类数组的遍历，你得另请高明。")]),e._v(" "),n("p",[e._v("现在问题就出现了：普通数组是不是集合？是！aNodes是不是集合？是！同样是集合，同样有遍历需求，我们却要针对不同的数据结构执行不同的遍历手段，好累！再回头看看迭代器的定义是什么——遍历集合的同时，我们不需要关心集合的内部结构。而forEach只能做到允许我们不关心数组这一种集合的内部结构，看来想要一套统一的遍历方案，我们非得请出一个更强的通用迭代器不可了。")]),e._v(" "),n("p",[e._v("这个小节的标题定语里有三个字“公元前”，这个“公元前”怎么定义呢？其实它说的就是ES标准内置迭代器之前的那些日子——差不多四五年之前，彼时还没有这么多轮子，jQuery风头正盛。当时面试可不问什么Vue原理、React原理、Webpack这些，当时问的最多的是你读过jQuery源码吗？答读过，好，那咱们就有的聊了。答没有？fine，看来你只是个调包侠，回见吧——因为前端的技术点在那时还很有限，所以可考察的东西也就这么点，读jQuery源码的程序员和不读jQuery源码的程序员在面试官眼里有着质的区别。但这也从一个侧面反映出来，jQuery这个库其实是非常优秀的，至少jQuery里有太多优秀的设计模式可以拿来考考你。就包括咱们当年想用一个真·迭代器又不想自己搞的时候，也是请jQuery实现的迭代器来帮忙：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('  <script src="https://cdn.bootcss.com/jquery/3.3.0/jquery.min.js" type="text/javascript"><\/script>\n\n')])])]),n("p",[e._v("借助jQuery的each方法，我们可以用同一套遍历规则遍历不同的集合对象：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const arr = [1, 2, 3]\nconst aNodes = document.getElementsByTagName('a')\n\n$.each(arr, function (index, item) {\n  console.log(`数组的第${index}个元素是${item}`)\n})\n\n$.each(aNodes, function (index, aNode) {\n  console.log(`DOM类数组的第${index}个元素是${aNode.innerText}`)\n})\n\n")])])]),n("p",[e._v("输出结果完全没问题：")]),e._v(" "),n("p",[n("img",{attrs:{src:"http://wsk-mweb.oss-cn-hangzhou.aliyuncs.com/2020/01/27/15801111934002.jpg",alt:"-w676"}}),e._v(" 当然啦，遍历jQuery自己的集合对象也不在话下：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const jQNodes = $('a')\n$.each(jQNodes, function (index, aNode) {\n  console.log(`jQuery集合的第${index}个元素是${aNode.innerText}`)\n})\n\n")])])]),n("p",[e._v("输出结果仍然没问题：")]),e._v(" "),n("p",[n("img",{attrs:{src:"http://wsk-mweb.oss-cn-hangzhou.aliyuncs.com/2020/01/27/15801112261395.jpg",alt:"-w628"}}),e._v(" 可以看出，jQuery的迭代器为我们统一了不同类型集合的遍历方式，使我们在访问集合内每一个成员时不用去关心集合本身的内部结构以及集合与集合间的差异，这就是迭代器存在的价值~")]),e._v(" "),n("h3",{attrs:{id:"_16-2-es6对迭代器的实现"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_16-2-es6对迭代器的实现","aria-hidden":"true"}},[e._v("#")]),e._v(" "),n("a",{attrs:{href:"#_16-2-es6%E5%AF%B9%E8%BF%AD%E4%BB%A3%E5%99%A8%E7%9A%84%E5%AE%9E%E7%8E%B0"}},[e._v("#")]),e._v(" 16.2 ES6对迭代器的实现")]),e._v(" "),n("p",[e._v("在“公元前”，JS原生的集合类型数据结构，只有Array（数组）和Object（对象）；而ES6中，又新增了Map和Set。四种数据结构各自有着自己特别的内部实现，但我们仍期待以同样的一套规则去遍历它们，所以ES6在推出新数据结构的同时也推出了一套统一的接口机制——迭代器（Iterator）。")]),e._v(" "),n("p",[e._v("ES6约定，任何数据结构只要具备Symbol.iterator属性（这个属性就是Iterator的具体实现，它本质上是当前数据结构默认的迭代器生成函数），就可以被遍历——准确地说，是被for...of...循环和迭代器的next方法遍历。 事实上，for...of...的背后正是对next方法的反复调用。")]),e._v(" "),n("p",[e._v("在ES6中，针对Array、Map、Set、String、TypedArray、函数的 arguments 对象、NodeList 对象这些原生的数据结构都可以通过for...of...进行遍历。原理都是一样的，此处我们拿最简单的数组进行举例，当我们用for...of...遍历数组时：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const arr = [1, 2, 3]\nconst len = arr.length\nfor(item of arr) {\n    console.log(`当前元素是${item}`)\n}\n\n")])])]),n("p",[e._v("之所以能够按顺序一次一次地拿到数组里的每一个成员，是因为我们借助数组的Symbol.iterator生成了它对应的迭代器对象，通过反复调用迭代器对象的next方法访问了数组成员，像这样：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const arr = [1, 2, 3]\n// 通过调用iterator，拿到迭代器对象\nconst iterator = arr[Symbol.iterator]()\n\n// 对迭代器对象执行next，就能逐个访问集合的成员\niterator.next()\niterator.next()\niterator.next()\n\n")])])]),n("p",[e._v("丢进控制台，我们可以看到next每次会按顺序帮我们访问一个集合成员：")]),e._v(" "),n("p",[n("img",{attrs:{src:"http://wsk-mweb.oss-cn-hangzhou.aliyuncs.com/2020/01/27/15801117717996.jpg",alt:"-w670"}})]),e._v(" "),n("p",[e._v("而for...of...做的事情，基本等价于下面这通操作：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// 通过调用iterator，拿到迭代器对象\nconst iterator = arr[Symbol.iterator]()\n\n// 初始化一个迭代结果\nlet now = { done: false }\n\n// 循环往外迭代成员\nwhile(!now.done) {\n    now = iterator.next()\n    if(!now.done) {\n        console.log(`现在遍历到了${now.value}`)\n    }\n}\n\n")])])]),n("p",[e._v("可以看出，for...of...其实就是iterator循环调用换了种写法。在ES6中我们之所以能够开心地用for...of...遍历各种各种的集合，全靠迭代器模式在背后给力。")]),e._v(" "),n("h3",{attrs:{id:"_16-3-一起实现一个迭代器生成函数吧"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_16-3-一起实现一个迭代器生成函数吧","aria-hidden":"true"}},[e._v("#")]),e._v(" "),n("a",{attrs:{href:"#_16-3-%E4%B8%80%E8%B5%B7%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E8%BF%AD%E4%BB%A3%E5%99%A8%E7%94%9F%E6%88%90%E5%87%BD%E6%95%B0%E5%90%A7"}},[e._v("#")]),e._v(" 16.3 一起实现一个迭代器生成函数吧!")]),e._v(" "),n("p",[e._v("楼上我们说迭代器对象全凭迭代器生成函数帮我们生成。在ES6中，实现一个迭代器生成函数并不是什么难事儿，因为ES6早帮我们考虑好了全套的解决方案，内置了贴心的生成器（Generator）供我们使用：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// 编写一个迭代器生成函数\nfunction *iteratorGenerator() {\n    yield '1号选手'\n    yield '2号选手'\n    yield '3号选手'\n}\n\nconst iterator = iteratorGenerator()\n\niterator.next()\niterator.next()\niterator.next()\n\n")])])]),n("p",[e._v("丢进控制台，不负众望：")]),e._v(" "),n("p",[n("img",{attrs:{src:"http://wsk-mweb.oss-cn-hangzhou.aliyuncs.com/2020/01/27/15801119304710.jpg",alt:"-w527"}})]),e._v(" "),n("p",[e._v("写一个生成器函数并没有什么难度，但在面试的过程中，面试官往往对生成器这种语法糖背后的实现逻辑更感兴趣。下面我们要做的，不仅仅是写一个迭代器对象，而是用ES5去写一个能够生成迭代器对象的迭代器生成函数（解析在注释里）：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// 定义生成器函数，入参是任意集合\nfunction iteratorGenerator(list) {\n    // idx记录当前访问的索引\n    var idx = 0\n    // len记录传入集合的长度\n    var len = list.length\n    return {\n        // 自定义next方法\n        next: function() {\n            // 如果索引还没有超出集合长度，done为false\n            var done = idx >= len\n            // 如果done为false，则可以继续取值\n            var value = !done ? list[idx++] : undefined\n\n            // 将当前值与遍历是否完毕（done）返回\n            return {\n                done: done,\n                value: value\n            }\n        }\n    }\n}\n\nvar iterator = iteratorGenerator(['1号选手', '2号选手', '3号选手'])\niterator.next()\niterator.next()\niterator.next()\n\n")])])]),n("p",[e._v("此处为了记录每次遍历的位置，我们实现了一个闭包，借助自由变量来做我们的迭代过程中的“游标”。")]),e._v(" "),n("p",[e._v("运行一下我们自定义的迭代器，结果符合预期：")]),e._v(" "),n("p",[n("img",{attrs:{src:"http://wsk-mweb.oss-cn-hangzhou.aliyuncs.com/2020/01/27/15801119697700.jpg",alt:"-w537"}})]),e._v(" "),n("p",[e._v("此文转载自: "),n("a",{attrs:{href:"https://www.weisuoke.com/fe2020/#_0-%E5%BC%80%E7%AF%87%EF%BC%9A%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%B8%88%E7%9A%84%E6%88%90%E9%95%BF%E8%AE%BA",target:"_blank",rel:"noopener noreferrer"}},[e._v("掘金小册 - JavaScript 设计模式核⼼原理与应⽤实践"),n("OutboundLink")],1)])])}),[],!1,null,null,null);t.default=r.exports}}]);